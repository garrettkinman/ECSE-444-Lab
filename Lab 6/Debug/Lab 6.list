
Lab 6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c7c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003e04  08003e04  00013e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e44  08003e44  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08003e44  08003e44  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003e44  08003e44  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e44  08003e44  00013e44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e48  08003e48  00013e48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08003e4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  20000018  08003e64  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000174  08003e64  00020174  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f950  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001eb0  00000000  00000000  0002f998  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ea0  00000000  00000000  00031848  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000da8  00000000  00000000  000326e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026cfb  00000000  00000000  00033490  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b996  00000000  00000000  0005a18b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f1c5c  00000000  00000000  00065b21  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015777d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d24  00000000  00000000  001577f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003dec 	.word	0x08003dec

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	08003dec 	.word	0x08003dec

080001c8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80001ce:	2300      	movs	r3, #0
 80001d0:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001d2:	2003      	movs	r0, #3
 80001d4:	f000 f95e 	bl	8000494 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80001d8:	2000      	movs	r0, #0
 80001da:	f000 f80d 	bl	80001f8 <HAL_InitTick>
 80001de:	4603      	mov	r3, r0
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d002      	beq.n	80001ea <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80001e4:	2301      	movs	r3, #1
 80001e6:	71fb      	strb	r3, [r7, #7]
 80001e8:	e001      	b.n	80001ee <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80001ea:	f003 fc19 	bl	8003a20 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80001ee:	79fb      	ldrb	r3, [r7, #7]
}
 80001f0:	4618      	mov	r0, r3
 80001f2:	3708      	adds	r7, #8
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bd80      	pop	{r7, pc}

080001f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b084      	sub	sp, #16
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000200:	2300      	movs	r3, #0
 8000202:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000204:	4b17      	ldr	r3, [pc, #92]	; (8000264 <HAL_InitTick+0x6c>)
 8000206:	781b      	ldrb	r3, [r3, #0]
 8000208:	2b00      	cmp	r3, #0
 800020a:	d023      	beq.n	8000254 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800020c:	4b16      	ldr	r3, [pc, #88]	; (8000268 <HAL_InitTick+0x70>)
 800020e:	681a      	ldr	r2, [r3, #0]
 8000210:	4b14      	ldr	r3, [pc, #80]	; (8000264 <HAL_InitTick+0x6c>)
 8000212:	781b      	ldrb	r3, [r3, #0]
 8000214:	4619      	mov	r1, r3
 8000216:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800021a:	fbb3 f3f1 	udiv	r3, r3, r1
 800021e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000222:	4618      	mov	r0, r3
 8000224:	f000 f96b 	bl	80004fe <HAL_SYSTICK_Config>
 8000228:	4603      	mov	r3, r0
 800022a:	2b00      	cmp	r3, #0
 800022c:	d10f      	bne.n	800024e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	2b0f      	cmp	r3, #15
 8000232:	d809      	bhi.n	8000248 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000234:	2200      	movs	r2, #0
 8000236:	6879      	ldr	r1, [r7, #4]
 8000238:	f04f 30ff 	mov.w	r0, #4294967295
 800023c:	f000 f935 	bl	80004aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000240:	4a0a      	ldr	r2, [pc, #40]	; (800026c <HAL_InitTick+0x74>)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	6013      	str	r3, [r2, #0]
 8000246:	e007      	b.n	8000258 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000248:	2301      	movs	r3, #1
 800024a:	73fb      	strb	r3, [r7, #15]
 800024c:	e004      	b.n	8000258 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800024e:	2301      	movs	r3, #1
 8000250:	73fb      	strb	r3, [r7, #15]
 8000252:	e001      	b.n	8000258 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000254:	2301      	movs	r3, #1
 8000256:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000258:	7bfb      	ldrb	r3, [r7, #15]
}
 800025a:	4618      	mov	r0, r3
 800025c:	3710      	adds	r7, #16
 800025e:	46bd      	mov	sp, r7
 8000260:	bd80      	pop	{r7, pc}
 8000262:	bf00      	nop
 8000264:	20000004 	.word	0x20000004
 8000268:	20000014 	.word	0x20000014
 800026c:	20000000 	.word	0x20000000

08000270 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000274:	4b06      	ldr	r3, [pc, #24]	; (8000290 <HAL_IncTick+0x20>)
 8000276:	781b      	ldrb	r3, [r3, #0]
 8000278:	461a      	mov	r2, r3
 800027a:	4b06      	ldr	r3, [pc, #24]	; (8000294 <HAL_IncTick+0x24>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	4413      	add	r3, r2
 8000280:	4a04      	ldr	r2, [pc, #16]	; (8000294 <HAL_IncTick+0x24>)
 8000282:	6013      	str	r3, [r2, #0]
}
 8000284:	bf00      	nop
 8000286:	46bd      	mov	sp, r7
 8000288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop
 8000290:	20000004 	.word	0x20000004
 8000294:	20000034 	.word	0x20000034

08000298 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000298:	b480      	push	{r7}
 800029a:	af00      	add	r7, sp, #0
  return uwTick;
 800029c:	4b03      	ldr	r3, [pc, #12]	; (80002ac <HAL_GetTick+0x14>)
 800029e:	681b      	ldr	r3, [r3, #0]
}
 80002a0:	4618      	mov	r0, r3
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	20000034 	.word	0x20000034

080002b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b084      	sub	sp, #16
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80002b8:	f7ff ffee 	bl	8000298 <HAL_GetTick>
 80002bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80002c8:	d005      	beq.n	80002d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80002ca:	4b09      	ldr	r3, [pc, #36]	; (80002f0 <HAL_Delay+0x40>)
 80002cc:	781b      	ldrb	r3, [r3, #0]
 80002ce:	461a      	mov	r2, r3
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	4413      	add	r3, r2
 80002d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80002d6:	bf00      	nop
 80002d8:	f7ff ffde 	bl	8000298 <HAL_GetTick>
 80002dc:	4602      	mov	r2, r0
 80002de:	68bb      	ldr	r3, [r7, #8]
 80002e0:	1ad3      	subs	r3, r2, r3
 80002e2:	68fa      	ldr	r2, [r7, #12]
 80002e4:	429a      	cmp	r2, r3
 80002e6:	d8f7      	bhi.n	80002d8 <HAL_Delay+0x28>
  {
  }
}
 80002e8:	bf00      	nop
 80002ea:	3710      	adds	r7, #16
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	20000004 	.word	0x20000004

080002f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80002f4:	b480      	push	{r7}
 80002f6:	b085      	sub	sp, #20
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	f003 0307 	and.w	r3, r3, #7
 8000302:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000304:	4b0c      	ldr	r3, [pc, #48]	; (8000338 <__NVIC_SetPriorityGrouping+0x44>)
 8000306:	68db      	ldr	r3, [r3, #12]
 8000308:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800030a:	68ba      	ldr	r2, [r7, #8]
 800030c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000310:	4013      	ands	r3, r2
 8000312:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000318:	68bb      	ldr	r3, [r7, #8]
 800031a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800031c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000320:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000324:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000326:	4a04      	ldr	r2, [pc, #16]	; (8000338 <__NVIC_SetPriorityGrouping+0x44>)
 8000328:	68bb      	ldr	r3, [r7, #8]
 800032a:	60d3      	str	r3, [r2, #12]
}
 800032c:	bf00      	nop
 800032e:	3714      	adds	r7, #20
 8000330:	46bd      	mov	sp, r7
 8000332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000336:	4770      	bx	lr
 8000338:	e000ed00 	.word	0xe000ed00

0800033c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000340:	4b04      	ldr	r3, [pc, #16]	; (8000354 <__NVIC_GetPriorityGrouping+0x18>)
 8000342:	68db      	ldr	r3, [r3, #12]
 8000344:	0a1b      	lsrs	r3, r3, #8
 8000346:	f003 0307 	and.w	r3, r3, #7
}
 800034a:	4618      	mov	r0, r3
 800034c:	46bd      	mov	sp, r7
 800034e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000352:	4770      	bx	lr
 8000354:	e000ed00 	.word	0xe000ed00

08000358 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000358:	b480      	push	{r7}
 800035a:	b083      	sub	sp, #12
 800035c:	af00      	add	r7, sp, #0
 800035e:	4603      	mov	r3, r0
 8000360:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000366:	2b00      	cmp	r3, #0
 8000368:	db0b      	blt.n	8000382 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800036a:	79fb      	ldrb	r3, [r7, #7]
 800036c:	f003 021f 	and.w	r2, r3, #31
 8000370:	4907      	ldr	r1, [pc, #28]	; (8000390 <__NVIC_EnableIRQ+0x38>)
 8000372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000376:	095b      	lsrs	r3, r3, #5
 8000378:	2001      	movs	r0, #1
 800037a:	fa00 f202 	lsl.w	r2, r0, r2
 800037e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000382:	bf00      	nop
 8000384:	370c      	adds	r7, #12
 8000386:	46bd      	mov	sp, r7
 8000388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop
 8000390:	e000e100 	.word	0xe000e100

08000394 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000394:	b480      	push	{r7}
 8000396:	b083      	sub	sp, #12
 8000398:	af00      	add	r7, sp, #0
 800039a:	4603      	mov	r3, r0
 800039c:	6039      	str	r1, [r7, #0]
 800039e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	db0a      	blt.n	80003be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003a8:	683b      	ldr	r3, [r7, #0]
 80003aa:	b2da      	uxtb	r2, r3
 80003ac:	490c      	ldr	r1, [pc, #48]	; (80003e0 <__NVIC_SetPriority+0x4c>)
 80003ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003b2:	0112      	lsls	r2, r2, #4
 80003b4:	b2d2      	uxtb	r2, r2
 80003b6:	440b      	add	r3, r1
 80003b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80003bc:	e00a      	b.n	80003d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003be:	683b      	ldr	r3, [r7, #0]
 80003c0:	b2da      	uxtb	r2, r3
 80003c2:	4908      	ldr	r1, [pc, #32]	; (80003e4 <__NVIC_SetPriority+0x50>)
 80003c4:	79fb      	ldrb	r3, [r7, #7]
 80003c6:	f003 030f 	and.w	r3, r3, #15
 80003ca:	3b04      	subs	r3, #4
 80003cc:	0112      	lsls	r2, r2, #4
 80003ce:	b2d2      	uxtb	r2, r2
 80003d0:	440b      	add	r3, r1
 80003d2:	761a      	strb	r2, [r3, #24]
}
 80003d4:	bf00      	nop
 80003d6:	370c      	adds	r7, #12
 80003d8:	46bd      	mov	sp, r7
 80003da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003de:	4770      	bx	lr
 80003e0:	e000e100 	.word	0xe000e100
 80003e4:	e000ed00 	.word	0xe000ed00

080003e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80003e8:	b480      	push	{r7}
 80003ea:	b089      	sub	sp, #36	; 0x24
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	60f8      	str	r0, [r7, #12]
 80003f0:	60b9      	str	r1, [r7, #8]
 80003f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80003f4:	68fb      	ldr	r3, [r7, #12]
 80003f6:	f003 0307 	and.w	r3, r3, #7
 80003fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80003fc:	69fb      	ldr	r3, [r7, #28]
 80003fe:	f1c3 0307 	rsb	r3, r3, #7
 8000402:	2b04      	cmp	r3, #4
 8000404:	bf28      	it	cs
 8000406:	2304      	movcs	r3, #4
 8000408:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800040a:	69fb      	ldr	r3, [r7, #28]
 800040c:	3304      	adds	r3, #4
 800040e:	2b06      	cmp	r3, #6
 8000410:	d902      	bls.n	8000418 <NVIC_EncodePriority+0x30>
 8000412:	69fb      	ldr	r3, [r7, #28]
 8000414:	3b03      	subs	r3, #3
 8000416:	e000      	b.n	800041a <NVIC_EncodePriority+0x32>
 8000418:	2300      	movs	r3, #0
 800041a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800041c:	f04f 32ff 	mov.w	r2, #4294967295
 8000420:	69bb      	ldr	r3, [r7, #24]
 8000422:	fa02 f303 	lsl.w	r3, r2, r3
 8000426:	43da      	mvns	r2, r3
 8000428:	68bb      	ldr	r3, [r7, #8]
 800042a:	401a      	ands	r2, r3
 800042c:	697b      	ldr	r3, [r7, #20]
 800042e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000430:	f04f 31ff 	mov.w	r1, #4294967295
 8000434:	697b      	ldr	r3, [r7, #20]
 8000436:	fa01 f303 	lsl.w	r3, r1, r3
 800043a:	43d9      	mvns	r1, r3
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000440:	4313      	orrs	r3, r2
         );
}
 8000442:	4618      	mov	r0, r3
 8000444:	3724      	adds	r7, #36	; 0x24
 8000446:	46bd      	mov	sp, r7
 8000448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044c:	4770      	bx	lr
	...

08000450 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	3b01      	subs	r3, #1
 800045c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000460:	d301      	bcc.n	8000466 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000462:	2301      	movs	r3, #1
 8000464:	e00f      	b.n	8000486 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000466:	4a0a      	ldr	r2, [pc, #40]	; (8000490 <SysTick_Config+0x40>)
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	3b01      	subs	r3, #1
 800046c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800046e:	210f      	movs	r1, #15
 8000470:	f04f 30ff 	mov.w	r0, #4294967295
 8000474:	f7ff ff8e 	bl	8000394 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000478:	4b05      	ldr	r3, [pc, #20]	; (8000490 <SysTick_Config+0x40>)
 800047a:	2200      	movs	r2, #0
 800047c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800047e:	4b04      	ldr	r3, [pc, #16]	; (8000490 <SysTick_Config+0x40>)
 8000480:	2207      	movs	r2, #7
 8000482:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000484:	2300      	movs	r3, #0
}
 8000486:	4618      	mov	r0, r3
 8000488:	3708      	adds	r7, #8
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}
 800048e:	bf00      	nop
 8000490:	e000e010 	.word	0xe000e010

08000494 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800049c:	6878      	ldr	r0, [r7, #4]
 800049e:	f7ff ff29 	bl	80002f4 <__NVIC_SetPriorityGrouping>
}
 80004a2:	bf00      	nop
 80004a4:	3708      	adds	r7, #8
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}

080004aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80004aa:	b580      	push	{r7, lr}
 80004ac:	b086      	sub	sp, #24
 80004ae:	af00      	add	r7, sp, #0
 80004b0:	4603      	mov	r3, r0
 80004b2:	60b9      	str	r1, [r7, #8]
 80004b4:	607a      	str	r2, [r7, #4]
 80004b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80004b8:	2300      	movs	r3, #0
 80004ba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80004bc:	f7ff ff3e 	bl	800033c <__NVIC_GetPriorityGrouping>
 80004c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80004c2:	687a      	ldr	r2, [r7, #4]
 80004c4:	68b9      	ldr	r1, [r7, #8]
 80004c6:	6978      	ldr	r0, [r7, #20]
 80004c8:	f7ff ff8e 	bl	80003e8 <NVIC_EncodePriority>
 80004cc:	4602      	mov	r2, r0
 80004ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80004d2:	4611      	mov	r1, r2
 80004d4:	4618      	mov	r0, r3
 80004d6:	f7ff ff5d 	bl	8000394 <__NVIC_SetPriority>
}
 80004da:	bf00      	nop
 80004dc:	3718      	adds	r7, #24
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}

080004e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004e2:	b580      	push	{r7, lr}
 80004e4:	b082      	sub	sp, #8
 80004e6:	af00      	add	r7, sp, #0
 80004e8:	4603      	mov	r3, r0
 80004ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80004ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004f0:	4618      	mov	r0, r3
 80004f2:	f7ff ff31 	bl	8000358 <__NVIC_EnableIRQ>
}
 80004f6:	bf00      	nop
 80004f8:	3708      	adds	r7, #8
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}

080004fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80004fe:	b580      	push	{r7, lr}
 8000500:	b082      	sub	sp, #8
 8000502:	af00      	add	r7, sp, #0
 8000504:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000506:	6878      	ldr	r0, [r7, #4]
 8000508:	f7ff ffa2 	bl	8000450 <SysTick_Config>
 800050c:	4603      	mov	r3, r0
}
 800050e:	4618      	mov	r0, r3
 8000510:	3708      	adds	r7, #8
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}

08000516 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8000516:	b580      	push	{r7, lr}
 8000518:	b082      	sub	sp, #8
 800051a:	af00      	add	r7, sp, #0
 800051c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	2b00      	cmp	r3, #0
 8000522:	d101      	bne.n	8000528 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8000524:	2301      	movs	r3, #1
 8000526:	e014      	b.n	8000552 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	791b      	ldrb	r3, [r3, #4]
 800052c:	b2db      	uxtb	r3, r3
 800052e:	2b00      	cmp	r3, #0
 8000530:	d105      	bne.n	800053e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	2200      	movs	r2, #0
 8000536:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000538:	6878      	ldr	r0, [r7, #4]
 800053a:	f003 fa95 	bl	8003a68 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	2202      	movs	r2, #2
 8000542:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	2200      	movs	r2, #0
 8000548:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	2201      	movs	r2, #1
 800054e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8000550:	2300      	movs	r3, #0
}
 8000552:	4618      	mov	r0, r3
 8000554:	3708      	adds	r7, #8
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}

0800055a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800055a:	b580      	push	{r7, lr}
 800055c:	b088      	sub	sp, #32
 800055e:	af00      	add	r7, sp, #0
 8000560:	60f8      	str	r0, [r7, #12]
 8000562:	60b9      	str	r1, [r7, #8]
 8000564:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8000566:	2300      	movs	r3, #0
 8000568:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	795b      	ldrb	r3, [r3, #5]
 800056e:	2b01      	cmp	r3, #1
 8000570:	d101      	bne.n	8000576 <HAL_DAC_ConfigChannel+0x1c>
 8000572:	2302      	movs	r3, #2
 8000574:	e107      	b.n	8000786 <HAL_DAC_ConfigChannel+0x22c>
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	2201      	movs	r2, #1
 800057a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	2202      	movs	r2, #2
 8000580:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8000582:	68bb      	ldr	r3, [r7, #8]
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	2b04      	cmp	r3, #4
 8000588:	d174      	bne.n	8000674 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800058a:	f7ff fe85 	bl	8000298 <HAL_GetTick>
 800058e:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	2b00      	cmp	r3, #0
 8000594:	d134      	bne.n	8000600 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000596:	e011      	b.n	80005bc <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000598:	f7ff fe7e 	bl	8000298 <HAL_GetTick>
 800059c:	4602      	mov	r2, r0
 800059e:	69fb      	ldr	r3, [r7, #28]
 80005a0:	1ad3      	subs	r3, r2, r3
 80005a2:	2b01      	cmp	r3, #1
 80005a4:	d90a      	bls.n	80005bc <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	691b      	ldr	r3, [r3, #16]
 80005aa:	f043 0208 	orr.w	r2, r3, #8
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	2203      	movs	r2, #3
 80005b6:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80005b8:	2303      	movs	r3, #3
 80005ba:	e0e4      	b.n	8000786 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d1e6      	bne.n	8000598 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 80005ca:	2001      	movs	r0, #1
 80005cc:	f7ff fe70 	bl	80002b0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	68ba      	ldr	r2, [r7, #8]
 80005d6:	6992      	ldr	r2, [r2, #24]
 80005d8:	641a      	str	r2, [r3, #64]	; 0x40
 80005da:	e01e      	b.n	800061a <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80005dc:	f7ff fe5c 	bl	8000298 <HAL_GetTick>
 80005e0:	4602      	mov	r2, r0
 80005e2:	69fb      	ldr	r3, [r7, #28]
 80005e4:	1ad3      	subs	r3, r2, r3
 80005e6:	2b01      	cmp	r3, #1
 80005e8:	d90a      	bls.n	8000600 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	691b      	ldr	r3, [r3, #16]
 80005ee:	f043 0208 	orr.w	r2, r3, #8
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	2203      	movs	r2, #3
 80005fa:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80005fc:	2303      	movs	r3, #3
 80005fe:	e0c2      	b.n	8000786 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000606:	2b00      	cmp	r3, #0
 8000608:	dbe8      	blt.n	80005dc <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 800060a:	2001      	movs	r0, #1
 800060c:	f7ff fe50 	bl	80002b0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	68ba      	ldr	r2, [r7, #8]
 8000616:	6992      	ldr	r2, [r2, #24]
 8000618:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	f003 0310 	and.w	r3, r3, #16
 8000626:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800062a:	fa01 f303 	lsl.w	r3, r1, r3
 800062e:	43db      	mvns	r3, r3
 8000630:	ea02 0103 	and.w	r1, r2, r3
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	69da      	ldr	r2, [r3, #28]
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	f003 0310 	and.w	r3, r3, #16
 800063e:	409a      	lsls	r2, r3
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	430a      	orrs	r2, r1
 8000646:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	f003 0310 	and.w	r3, r3, #16
 8000654:	21ff      	movs	r1, #255	; 0xff
 8000656:	fa01 f303 	lsl.w	r3, r1, r3
 800065a:	43db      	mvns	r3, r3
 800065c:	ea02 0103 	and.w	r1, r2, r3
 8000660:	68bb      	ldr	r3, [r7, #8]
 8000662:	6a1a      	ldr	r2, [r3, #32]
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	f003 0310 	and.w	r3, r3, #16
 800066a:	409a      	lsls	r2, r3
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	430a      	orrs	r2, r1
 8000672:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8000674:	68bb      	ldr	r3, [r7, #8]
 8000676:	691b      	ldr	r3, [r3, #16]
 8000678:	2b01      	cmp	r3, #1
 800067a:	d11d      	bne.n	80006b8 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000682:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	f003 0310 	and.w	r3, r3, #16
 800068a:	221f      	movs	r2, #31
 800068c:	fa02 f303 	lsl.w	r3, r2, r3
 8000690:	43db      	mvns	r3, r3
 8000692:	69ba      	ldr	r2, [r7, #24]
 8000694:	4013      	ands	r3, r2
 8000696:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8000698:	68bb      	ldr	r3, [r7, #8]
 800069a:	695b      	ldr	r3, [r3, #20]
 800069c:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	f003 0310 	and.w	r3, r3, #16
 80006a4:	697a      	ldr	r2, [r7, #20]
 80006a6:	fa02 f303 	lsl.w	r3, r2, r3
 80006aa:	69ba      	ldr	r2, [r7, #24]
 80006ac:	4313      	orrs	r3, r2
 80006ae:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	69ba      	ldr	r2, [r7, #24]
 80006b6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80006be:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	f003 0310 	and.w	r3, r3, #16
 80006c6:	2207      	movs	r2, #7
 80006c8:	fa02 f303 	lsl.w	r3, r2, r3
 80006cc:	43db      	mvns	r3, r3
 80006ce:	69ba      	ldr	r2, [r7, #24]
 80006d0:	4013      	ands	r3, r2
 80006d2:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80006d4:	68bb      	ldr	r3, [r7, #8]
 80006d6:	681a      	ldr	r2, [r3, #0]
 80006d8:	68bb      	ldr	r3, [r7, #8]
 80006da:	689b      	ldr	r3, [r3, #8]
 80006dc:	431a      	orrs	r2, r3
 80006de:	68bb      	ldr	r3, [r7, #8]
 80006e0:	68db      	ldr	r3, [r3, #12]
 80006e2:	4313      	orrs	r3, r2
 80006e4:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	f003 0310 	and.w	r3, r3, #16
 80006ec:	697a      	ldr	r2, [r7, #20]
 80006ee:	fa02 f303 	lsl.w	r3, r2, r3
 80006f2:	69ba      	ldr	r2, [r7, #24]
 80006f4:	4313      	orrs	r3, r2
 80006f6:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	69ba      	ldr	r2, [r7, #24]
 80006fe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	6819      	ldr	r1, [r3, #0]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	f003 0310 	and.w	r3, r3, #16
 800070c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000710:	fa02 f303 	lsl.w	r3, r2, r3
 8000714:	43da      	mvns	r2, r3
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	400a      	ands	r2, r1
 800071c:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	f003 0310 	and.w	r3, r3, #16
 800072c:	f640 72fc 	movw	r2, #4092	; 0xffc
 8000730:	fa02 f303 	lsl.w	r3, r2, r3
 8000734:	43db      	mvns	r3, r3
 8000736:	69ba      	ldr	r2, [r7, #24]
 8000738:	4013      	ands	r3, r2
 800073a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800073c:	68bb      	ldr	r3, [r7, #8]
 800073e:	685b      	ldr	r3, [r3, #4]
 8000740:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	f003 0310 	and.w	r3, r3, #16
 8000748:	697a      	ldr	r2, [r7, #20]
 800074a:	fa02 f303 	lsl.w	r3, r2, r3
 800074e:	69ba      	ldr	r2, [r7, #24]
 8000750:	4313      	orrs	r3, r2
 8000752:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	69ba      	ldr	r2, [r7, #24]
 800075a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	6819      	ldr	r1, [r3, #0]
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	f003 0310 	and.w	r3, r3, #16
 8000768:	22c0      	movs	r2, #192	; 0xc0
 800076a:	fa02 f303 	lsl.w	r3, r2, r3
 800076e:	43da      	mvns	r2, r3
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	400a      	ands	r2, r1
 8000776:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	2201      	movs	r2, #1
 800077c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	2200      	movs	r2, #0
 8000782:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000784:	2300      	movs	r3, #0
}
 8000786:	4618      	mov	r0, r3
 8000788:	3720      	adds	r7, #32
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
	...

08000790 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000790:	b480      	push	{r7}
 8000792:	b085      	sub	sp, #20
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d101      	bne.n	80007a2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800079e:	2301      	movs	r3, #1
 80007a0:	e098      	b.n	80008d4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	461a      	mov	r2, r3
 80007a8:	4b4d      	ldr	r3, [pc, #308]	; (80008e0 <HAL_DMA_Init+0x150>)
 80007aa:	429a      	cmp	r2, r3
 80007ac:	d80f      	bhi.n	80007ce <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	461a      	mov	r2, r3
 80007b4:	4b4b      	ldr	r3, [pc, #300]	; (80008e4 <HAL_DMA_Init+0x154>)
 80007b6:	4413      	add	r3, r2
 80007b8:	4a4b      	ldr	r2, [pc, #300]	; (80008e8 <HAL_DMA_Init+0x158>)
 80007ba:	fba2 2303 	umull	r2, r3, r2, r3
 80007be:	091b      	lsrs	r3, r3, #4
 80007c0:	009a      	lsls	r2, r3, #2
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	4a48      	ldr	r2, [pc, #288]	; (80008ec <HAL_DMA_Init+0x15c>)
 80007ca:	641a      	str	r2, [r3, #64]	; 0x40
 80007cc:	e00e      	b.n	80007ec <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	461a      	mov	r2, r3
 80007d4:	4b46      	ldr	r3, [pc, #280]	; (80008f0 <HAL_DMA_Init+0x160>)
 80007d6:	4413      	add	r3, r2
 80007d8:	4a43      	ldr	r2, [pc, #268]	; (80008e8 <HAL_DMA_Init+0x158>)
 80007da:	fba2 2303 	umull	r2, r3, r2, r3
 80007de:	091b      	lsrs	r3, r3, #4
 80007e0:	009a      	lsls	r2, r3, #2
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	4a42      	ldr	r2, [pc, #264]	; (80008f4 <HAL_DMA_Init+0x164>)
 80007ea:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	2202      	movs	r2, #2
 80007f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000806:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000810:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	691b      	ldr	r3, [r3, #16]
 8000816:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800081c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	699b      	ldr	r3, [r3, #24]
 8000822:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000828:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	6a1b      	ldr	r3, [r3, #32]
 800082e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000830:	68fa      	ldr	r2, [r7, #12]
 8000832:	4313      	orrs	r3, r2
 8000834:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	68fa      	ldr	r2, [r7, #12]
 800083c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	689b      	ldr	r3, [r3, #8]
 8000842:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000846:	d039      	beq.n	80008bc <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084c:	4a27      	ldr	r2, [pc, #156]	; (80008ec <HAL_DMA_Init+0x15c>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d11a      	bne.n	8000888 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000852:	4b29      	ldr	r3, [pc, #164]	; (80008f8 <HAL_DMA_Init+0x168>)
 8000854:	681a      	ldr	r2, [r3, #0]
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800085a:	f003 031c 	and.w	r3, r3, #28
 800085e:	210f      	movs	r1, #15
 8000860:	fa01 f303 	lsl.w	r3, r1, r3
 8000864:	43db      	mvns	r3, r3
 8000866:	4924      	ldr	r1, [pc, #144]	; (80008f8 <HAL_DMA_Init+0x168>)
 8000868:	4013      	ands	r3, r2
 800086a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800086c:	4b22      	ldr	r3, [pc, #136]	; (80008f8 <HAL_DMA_Init+0x168>)
 800086e:	681a      	ldr	r2, [r3, #0]
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	6859      	ldr	r1, [r3, #4]
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000878:	f003 031c 	and.w	r3, r3, #28
 800087c:	fa01 f303 	lsl.w	r3, r1, r3
 8000880:	491d      	ldr	r1, [pc, #116]	; (80008f8 <HAL_DMA_Init+0x168>)
 8000882:	4313      	orrs	r3, r2
 8000884:	600b      	str	r3, [r1, #0]
 8000886:	e019      	b.n	80008bc <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000888:	4b1c      	ldr	r3, [pc, #112]	; (80008fc <HAL_DMA_Init+0x16c>)
 800088a:	681a      	ldr	r2, [r3, #0]
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000890:	f003 031c 	and.w	r3, r3, #28
 8000894:	210f      	movs	r1, #15
 8000896:	fa01 f303 	lsl.w	r3, r1, r3
 800089a:	43db      	mvns	r3, r3
 800089c:	4917      	ldr	r1, [pc, #92]	; (80008fc <HAL_DMA_Init+0x16c>)
 800089e:	4013      	ands	r3, r2
 80008a0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80008a2:	4b16      	ldr	r3, [pc, #88]	; (80008fc <HAL_DMA_Init+0x16c>)
 80008a4:	681a      	ldr	r2, [r3, #0]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	6859      	ldr	r1, [r3, #4]
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ae:	f003 031c 	and.w	r3, r3, #28
 80008b2:	fa01 f303 	lsl.w	r3, r1, r3
 80008b6:	4911      	ldr	r1, [pc, #68]	; (80008fc <HAL_DMA_Init+0x16c>)
 80008b8:	4313      	orrs	r3, r2
 80008ba:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	2200      	movs	r2, #0
 80008c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	2201      	movs	r2, #1
 80008c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	2200      	movs	r2, #0
 80008ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80008d2:	2300      	movs	r3, #0
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	3714      	adds	r7, #20
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr
 80008e0:	40020407 	.word	0x40020407
 80008e4:	bffdfff8 	.word	0xbffdfff8
 80008e8:	cccccccd 	.word	0xcccccccd
 80008ec:	40020000 	.word	0x40020000
 80008f0:	bffdfbf8 	.word	0xbffdfbf8
 80008f4:	40020400 	.word	0x40020400
 80008f8:	400200a8 	.word	0x400200a8
 80008fc:	400204a8 	.word	0x400204a8

08000900 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000900:	b480      	push	{r7}
 8000902:	b085      	sub	sp, #20
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000908:	2300      	movs	r3, #0
 800090a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000912:	b2db      	uxtb	r3, r3
 8000914:	2b02      	cmp	r3, #2
 8000916:	d008      	beq.n	800092a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	2204      	movs	r2, #4
 800091c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	2200      	movs	r2, #0
 8000922:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000926:	2301      	movs	r3, #1
 8000928:	e022      	b.n	8000970 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	681a      	ldr	r2, [r3, #0]
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	f022 020e 	bic.w	r2, r2, #14
 8000938:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	681a      	ldr	r2, [r3, #0]
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	f022 0201 	bic.w	r2, r2, #1
 8000948:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094e:	f003 021c 	and.w	r2, r3, #28
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000956:	2101      	movs	r1, #1
 8000958:	fa01 f202 	lsl.w	r2, r1, r2
 800095c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	2201      	movs	r2, #1
 8000962:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	2200      	movs	r2, #0
 800096a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800096e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000970:	4618      	mov	r0, r3
 8000972:	3714      	adds	r7, #20
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr

0800097c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000998:	f003 031c 	and.w	r3, r3, #28
 800099c:	2204      	movs	r2, #4
 800099e:	409a      	lsls	r2, r3
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	4013      	ands	r3, r2
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d026      	beq.n	80009f6 <HAL_DMA_IRQHandler+0x7a>
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	f003 0304 	and.w	r3, r3, #4
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d021      	beq.n	80009f6 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f003 0320 	and.w	r3, r3, #32
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d107      	bne.n	80009d0 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	681a      	ldr	r2, [r3, #0]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	f022 0204 	bic.w	r2, r2, #4
 80009ce:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d4:	f003 021c 	and.w	r2, r3, #28
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009dc:	2104      	movs	r1, #4
 80009de:	fa01 f202 	lsl.w	r2, r1, r2
 80009e2:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d071      	beq.n	8000ad0 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f0:	6878      	ldr	r0, [r7, #4]
 80009f2:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80009f4:	e06c      	b.n	8000ad0 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fa:	f003 031c 	and.w	r3, r3, #28
 80009fe:	2202      	movs	r2, #2
 8000a00:	409a      	lsls	r2, r3
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	4013      	ands	r3, r2
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d02e      	beq.n	8000a68 <HAL_DMA_IRQHandler+0xec>
 8000a0a:	68bb      	ldr	r3, [r7, #8]
 8000a0c:	f003 0302 	and.w	r3, r3, #2
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d029      	beq.n	8000a68 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	f003 0320 	and.w	r3, r3, #32
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d10b      	bne.n	8000a3a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f022 020a 	bic.w	r2, r2, #10
 8000a30:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	2201      	movs	r2, #1
 8000a36:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3e:	f003 021c 	and.w	r2, r3, #28
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a46:	2102      	movs	r1, #2
 8000a48:	fa01 f202 	lsl.w	r2, r1, r2
 8000a4c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	2200      	movs	r2, #0
 8000a52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d038      	beq.n	8000ad0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a62:	6878      	ldr	r0, [r7, #4]
 8000a64:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000a66:	e033      	b.n	8000ad0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a6c:	f003 031c 	and.w	r3, r3, #28
 8000a70:	2208      	movs	r2, #8
 8000a72:	409a      	lsls	r2, r3
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	4013      	ands	r3, r2
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d02a      	beq.n	8000ad2 <HAL_DMA_IRQHandler+0x156>
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	f003 0308 	and.w	r3, r3, #8
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d025      	beq.n	8000ad2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	681a      	ldr	r2, [r3, #0]
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f022 020e 	bic.w	r2, r2, #14
 8000a94:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a9a:	f003 021c 	and.w	r2, r3, #28
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa2:	2101      	movs	r1, #1
 8000aa4:	fa01 f202 	lsl.w	r2, r1, r2
 8000aa8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	2201      	movs	r2, #1
 8000aae:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	2200      	movs	r2, #0
 8000abc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d004      	beq.n	8000ad2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000acc:	6878      	ldr	r0, [r7, #4]
 8000ace:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8000ad0:	bf00      	nop
 8000ad2:	bf00      	nop
}
 8000ad4:	3710      	adds	r7, #16
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
	...

08000adc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b087      	sub	sp, #28
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
 8000ae4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000aea:	e17f      	b.n	8000dec <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	2101      	movs	r1, #1
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	fa01 f303 	lsl.w	r3, r1, r3
 8000af8:	4013      	ands	r3, r2
 8000afa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	f000 8171 	beq.w	8000de6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	2b01      	cmp	r3, #1
 8000b0a:	d00b      	beq.n	8000b24 <HAL_GPIO_Init+0x48>
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	2b02      	cmp	r3, #2
 8000b12:	d007      	beq.n	8000b24 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b18:	2b11      	cmp	r3, #17
 8000b1a:	d003      	beq.n	8000b24 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	2b12      	cmp	r3, #18
 8000b22:	d130      	bne.n	8000b86 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	689b      	ldr	r3, [r3, #8]
 8000b28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	005b      	lsls	r3, r3, #1
 8000b2e:	2203      	movs	r2, #3
 8000b30:	fa02 f303 	lsl.w	r3, r2, r3
 8000b34:	43db      	mvns	r3, r3
 8000b36:	693a      	ldr	r2, [r7, #16]
 8000b38:	4013      	ands	r3, r2
 8000b3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	68da      	ldr	r2, [r3, #12]
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	005b      	lsls	r3, r3, #1
 8000b44:	fa02 f303 	lsl.w	r3, r2, r3
 8000b48:	693a      	ldr	r2, [r7, #16]
 8000b4a:	4313      	orrs	r3, r2
 8000b4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	693a      	ldr	r2, [r7, #16]
 8000b52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b62:	43db      	mvns	r3, r3
 8000b64:	693a      	ldr	r2, [r7, #16]
 8000b66:	4013      	ands	r3, r2
 8000b68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	091b      	lsrs	r3, r3, #4
 8000b70:	f003 0201 	and.w	r2, r3, #1
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7a:	693a      	ldr	r2, [r7, #16]
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	693a      	ldr	r2, [r7, #16]
 8000b84:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	f003 0303 	and.w	r3, r3, #3
 8000b8e:	2b03      	cmp	r3, #3
 8000b90:	d118      	bne.n	8000bc4 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000b98:	2201      	movs	r2, #1
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba0:	43db      	mvns	r3, r3
 8000ba2:	693a      	ldr	r2, [r7, #16]
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	08db      	lsrs	r3, r3, #3
 8000bae:	f003 0201 	and.w	r2, r3, #1
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb8:	693a      	ldr	r2, [r7, #16]
 8000bba:	4313      	orrs	r3, r2
 8000bbc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	693a      	ldr	r2, [r7, #16]
 8000bc2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	005b      	lsls	r3, r3, #1
 8000bce:	2203      	movs	r2, #3
 8000bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd4:	43db      	mvns	r3, r3
 8000bd6:	693a      	ldr	r2, [r7, #16]
 8000bd8:	4013      	ands	r3, r2
 8000bda:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	689a      	ldr	r2, [r3, #8]
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	fa02 f303 	lsl.w	r3, r2, r3
 8000be8:	693a      	ldr	r2, [r7, #16]
 8000bea:	4313      	orrs	r3, r2
 8000bec:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	693a      	ldr	r2, [r7, #16]
 8000bf2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	2b02      	cmp	r3, #2
 8000bfa:	d003      	beq.n	8000c04 <HAL_GPIO_Init+0x128>
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	2b12      	cmp	r3, #18
 8000c02:	d123      	bne.n	8000c4c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	08da      	lsrs	r2, r3, #3
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	3208      	adds	r2, #8
 8000c0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c10:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	f003 0307 	and.w	r3, r3, #7
 8000c18:	009b      	lsls	r3, r3, #2
 8000c1a:	220f      	movs	r2, #15
 8000c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c20:	43db      	mvns	r3, r3
 8000c22:	693a      	ldr	r2, [r7, #16]
 8000c24:	4013      	ands	r3, r2
 8000c26:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	691a      	ldr	r2, [r3, #16]
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	f003 0307 	and.w	r3, r3, #7
 8000c32:	009b      	lsls	r3, r3, #2
 8000c34:	fa02 f303 	lsl.w	r3, r2, r3
 8000c38:	693a      	ldr	r2, [r7, #16]
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	08da      	lsrs	r2, r3, #3
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	3208      	adds	r2, #8
 8000c46:	6939      	ldr	r1, [r7, #16]
 8000c48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	005b      	lsls	r3, r3, #1
 8000c56:	2203      	movs	r2, #3
 8000c58:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5c:	43db      	mvns	r3, r3
 8000c5e:	693a      	ldr	r2, [r7, #16]
 8000c60:	4013      	ands	r3, r2
 8000c62:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	f003 0203 	and.w	r2, r3, #3
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	005b      	lsls	r3, r3, #1
 8000c70:	fa02 f303 	lsl.w	r3, r2, r3
 8000c74:	693a      	ldr	r2, [r7, #16]
 8000c76:	4313      	orrs	r3, r2
 8000c78:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	693a      	ldr	r2, [r7, #16]
 8000c7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	f000 80ac 	beq.w	8000de6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c8e:	4b5e      	ldr	r3, [pc, #376]	; (8000e08 <HAL_GPIO_Init+0x32c>)
 8000c90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c92:	4a5d      	ldr	r2, [pc, #372]	; (8000e08 <HAL_GPIO_Init+0x32c>)
 8000c94:	f043 0301 	orr.w	r3, r3, #1
 8000c98:	6613      	str	r3, [r2, #96]	; 0x60
 8000c9a:	4b5b      	ldr	r3, [pc, #364]	; (8000e08 <HAL_GPIO_Init+0x32c>)
 8000c9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c9e:	f003 0301 	and.w	r3, r3, #1
 8000ca2:	60bb      	str	r3, [r7, #8]
 8000ca4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ca6:	4a59      	ldr	r2, [pc, #356]	; (8000e0c <HAL_GPIO_Init+0x330>)
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	089b      	lsrs	r3, r3, #2
 8000cac:	3302      	adds	r3, #2
 8000cae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cb2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	f003 0303 	and.w	r3, r3, #3
 8000cba:	009b      	lsls	r3, r3, #2
 8000cbc:	220f      	movs	r2, #15
 8000cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc2:	43db      	mvns	r3, r3
 8000cc4:	693a      	ldr	r2, [r7, #16]
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000cd0:	d025      	beq.n	8000d1e <HAL_GPIO_Init+0x242>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4a4e      	ldr	r2, [pc, #312]	; (8000e10 <HAL_GPIO_Init+0x334>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d01f      	beq.n	8000d1a <HAL_GPIO_Init+0x23e>
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4a4d      	ldr	r2, [pc, #308]	; (8000e14 <HAL_GPIO_Init+0x338>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d019      	beq.n	8000d16 <HAL_GPIO_Init+0x23a>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4a4c      	ldr	r2, [pc, #304]	; (8000e18 <HAL_GPIO_Init+0x33c>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d013      	beq.n	8000d12 <HAL_GPIO_Init+0x236>
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4a4b      	ldr	r2, [pc, #300]	; (8000e1c <HAL_GPIO_Init+0x340>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d00d      	beq.n	8000d0e <HAL_GPIO_Init+0x232>
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4a4a      	ldr	r2, [pc, #296]	; (8000e20 <HAL_GPIO_Init+0x344>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d007      	beq.n	8000d0a <HAL_GPIO_Init+0x22e>
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4a49      	ldr	r2, [pc, #292]	; (8000e24 <HAL_GPIO_Init+0x348>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d101      	bne.n	8000d06 <HAL_GPIO_Init+0x22a>
 8000d02:	2306      	movs	r3, #6
 8000d04:	e00c      	b.n	8000d20 <HAL_GPIO_Init+0x244>
 8000d06:	2307      	movs	r3, #7
 8000d08:	e00a      	b.n	8000d20 <HAL_GPIO_Init+0x244>
 8000d0a:	2305      	movs	r3, #5
 8000d0c:	e008      	b.n	8000d20 <HAL_GPIO_Init+0x244>
 8000d0e:	2304      	movs	r3, #4
 8000d10:	e006      	b.n	8000d20 <HAL_GPIO_Init+0x244>
 8000d12:	2303      	movs	r3, #3
 8000d14:	e004      	b.n	8000d20 <HAL_GPIO_Init+0x244>
 8000d16:	2302      	movs	r3, #2
 8000d18:	e002      	b.n	8000d20 <HAL_GPIO_Init+0x244>
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	e000      	b.n	8000d20 <HAL_GPIO_Init+0x244>
 8000d1e:	2300      	movs	r3, #0
 8000d20:	697a      	ldr	r2, [r7, #20]
 8000d22:	f002 0203 	and.w	r2, r2, #3
 8000d26:	0092      	lsls	r2, r2, #2
 8000d28:	4093      	lsls	r3, r2
 8000d2a:	693a      	ldr	r2, [r7, #16]
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d30:	4936      	ldr	r1, [pc, #216]	; (8000e0c <HAL_GPIO_Init+0x330>)
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	089b      	lsrs	r3, r3, #2
 8000d36:	3302      	adds	r3, #2
 8000d38:	693a      	ldr	r2, [r7, #16]
 8000d3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000d3e:	4b3a      	ldr	r3, [pc, #232]	; (8000e28 <HAL_GPIO_Init+0x34c>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	43db      	mvns	r3, r3
 8000d48:	693a      	ldr	r2, [r7, #16]
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d003      	beq.n	8000d62 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000d62:	4a31      	ldr	r2, [pc, #196]	; (8000e28 <HAL_GPIO_Init+0x34c>)
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000d68:	4b2f      	ldr	r3, [pc, #188]	; (8000e28 <HAL_GPIO_Init+0x34c>)
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	43db      	mvns	r3, r3
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	4013      	ands	r3, r2
 8000d76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d003      	beq.n	8000d8c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000d84:	693a      	ldr	r2, [r7, #16]
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000d8c:	4a26      	ldr	r2, [pc, #152]	; (8000e28 <HAL_GPIO_Init+0x34c>)
 8000d8e:	693b      	ldr	r3, [r7, #16]
 8000d90:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d92:	4b25      	ldr	r3, [pc, #148]	; (8000e28 <HAL_GPIO_Init+0x34c>)
 8000d94:	689b      	ldr	r3, [r3, #8]
 8000d96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	43db      	mvns	r3, r3
 8000d9c:	693a      	ldr	r2, [r7, #16]
 8000d9e:	4013      	ands	r3, r2
 8000da0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d003      	beq.n	8000db6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	4313      	orrs	r3, r2
 8000db4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000db6:	4a1c      	ldr	r2, [pc, #112]	; (8000e28 <HAL_GPIO_Init+0x34c>)
 8000db8:	693b      	ldr	r3, [r7, #16]
 8000dba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000dbc:	4b1a      	ldr	r3, [pc, #104]	; (8000e28 <HAL_GPIO_Init+0x34c>)
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	43db      	mvns	r3, r3
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	4013      	ands	r3, r2
 8000dca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d003      	beq.n	8000de0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000dd8:	693a      	ldr	r2, [r7, #16]
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000de0:	4a11      	ldr	r2, [pc, #68]	; (8000e28 <HAL_GPIO_Init+0x34c>)
 8000de2:	693b      	ldr	r3, [r7, #16]
 8000de4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	3301      	adds	r3, #1
 8000dea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	fa22 f303 	lsr.w	r3, r2, r3
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	f47f ae78 	bne.w	8000aec <HAL_GPIO_Init+0x10>
  }
}
 8000dfc:	bf00      	nop
 8000dfe:	371c      	adds	r7, #28
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	40021000 	.word	0x40021000
 8000e0c:	40010000 	.word	0x40010000
 8000e10:	48000400 	.word	0x48000400
 8000e14:	48000800 	.word	0x48000800
 8000e18:	48000c00 	.word	0x48000c00
 8000e1c:	48001000 	.word	0x48001000
 8000e20:	48001400 	.word	0x48001400
 8000e24:	48001800 	.word	0x48001800
 8000e28:	40010400 	.word	0x40010400

08000e2c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b087      	sub	sp, #28
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e36:	2300      	movs	r3, #0
 8000e38:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8000e3a:	e0cd      	b.n	8000fd8 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	683a      	ldr	r2, [r7, #0]
 8000e46:	4013      	ands	r3, r2
 8000e48:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	f000 80c0 	beq.w	8000fd2 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8000e52:	4a68      	ldr	r2, [pc, #416]	; (8000ff4 <HAL_GPIO_DeInit+0x1c8>)
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	089b      	lsrs	r3, r3, #2
 8000e58:	3302      	adds	r3, #2
 8000e5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e5e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	f003 0303 	and.w	r3, r3, #3
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	220f      	movs	r2, #15
 8000e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6e:	68fa      	ldr	r2, [r7, #12]
 8000e70:	4013      	ands	r3, r2
 8000e72:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e7a:	d025      	beq.n	8000ec8 <HAL_GPIO_DeInit+0x9c>
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	4a5e      	ldr	r2, [pc, #376]	; (8000ff8 <HAL_GPIO_DeInit+0x1cc>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d01f      	beq.n	8000ec4 <HAL_GPIO_DeInit+0x98>
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	4a5d      	ldr	r2, [pc, #372]	; (8000ffc <HAL_GPIO_DeInit+0x1d0>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d019      	beq.n	8000ec0 <HAL_GPIO_DeInit+0x94>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4a5c      	ldr	r2, [pc, #368]	; (8001000 <HAL_GPIO_DeInit+0x1d4>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d013      	beq.n	8000ebc <HAL_GPIO_DeInit+0x90>
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	4a5b      	ldr	r2, [pc, #364]	; (8001004 <HAL_GPIO_DeInit+0x1d8>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d00d      	beq.n	8000eb8 <HAL_GPIO_DeInit+0x8c>
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	4a5a      	ldr	r2, [pc, #360]	; (8001008 <HAL_GPIO_DeInit+0x1dc>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d007      	beq.n	8000eb4 <HAL_GPIO_DeInit+0x88>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	4a59      	ldr	r2, [pc, #356]	; (800100c <HAL_GPIO_DeInit+0x1e0>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d101      	bne.n	8000eb0 <HAL_GPIO_DeInit+0x84>
 8000eac:	2306      	movs	r3, #6
 8000eae:	e00c      	b.n	8000eca <HAL_GPIO_DeInit+0x9e>
 8000eb0:	2307      	movs	r3, #7
 8000eb2:	e00a      	b.n	8000eca <HAL_GPIO_DeInit+0x9e>
 8000eb4:	2305      	movs	r3, #5
 8000eb6:	e008      	b.n	8000eca <HAL_GPIO_DeInit+0x9e>
 8000eb8:	2304      	movs	r3, #4
 8000eba:	e006      	b.n	8000eca <HAL_GPIO_DeInit+0x9e>
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	e004      	b.n	8000eca <HAL_GPIO_DeInit+0x9e>
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	e002      	b.n	8000eca <HAL_GPIO_DeInit+0x9e>
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	e000      	b.n	8000eca <HAL_GPIO_DeInit+0x9e>
 8000ec8:	2300      	movs	r3, #0
 8000eca:	697a      	ldr	r2, [r7, #20]
 8000ecc:	f002 0203 	and.w	r2, r2, #3
 8000ed0:	0092      	lsls	r2, r2, #2
 8000ed2:	4093      	lsls	r3, r2
 8000ed4:	68fa      	ldr	r2, [r7, #12]
 8000ed6:	429a      	cmp	r2, r3
 8000ed8:	d132      	bne.n	8000f40 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8000eda:	4b4d      	ldr	r3, [pc, #308]	; (8001010 <HAL_GPIO_DeInit+0x1e4>)
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	494b      	ldr	r1, [pc, #300]	; (8001010 <HAL_GPIO_DeInit+0x1e4>)
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8000ee8:	4b49      	ldr	r3, [pc, #292]	; (8001010 <HAL_GPIO_DeInit+0x1e4>)
 8000eea:	685a      	ldr	r2, [r3, #4]
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	43db      	mvns	r3, r3
 8000ef0:	4947      	ldr	r1, [pc, #284]	; (8001010 <HAL_GPIO_DeInit+0x1e4>)
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8000ef6:	4b46      	ldr	r3, [pc, #280]	; (8001010 <HAL_GPIO_DeInit+0x1e4>)
 8000ef8:	689a      	ldr	r2, [r3, #8]
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	43db      	mvns	r3, r3
 8000efe:	4944      	ldr	r1, [pc, #272]	; (8001010 <HAL_GPIO_DeInit+0x1e4>)
 8000f00:	4013      	ands	r3, r2
 8000f02:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8000f04:	4b42      	ldr	r3, [pc, #264]	; (8001010 <HAL_GPIO_DeInit+0x1e4>)
 8000f06:	68da      	ldr	r2, [r3, #12]
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	43db      	mvns	r3, r3
 8000f0c:	4940      	ldr	r1, [pc, #256]	; (8001010 <HAL_GPIO_DeInit+0x1e4>)
 8000f0e:	4013      	ands	r3, r2
 8000f10:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	f003 0303 	and.w	r3, r3, #3
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	220f      	movs	r2, #15
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8000f22:	4a34      	ldr	r2, [pc, #208]	; (8000ff4 <HAL_GPIO_DeInit+0x1c8>)
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	089b      	lsrs	r3, r3, #2
 8000f28:	3302      	adds	r3, #2
 8000f2a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	43da      	mvns	r2, r3
 8000f32:	4830      	ldr	r0, [pc, #192]	; (8000ff4 <HAL_GPIO_DeInit+0x1c8>)
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	089b      	lsrs	r3, r3, #2
 8000f38:	400a      	ands	r2, r1
 8000f3a:	3302      	adds	r3, #2
 8000f3c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	2103      	movs	r1, #3
 8000f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f4e:	431a      	orrs	r2, r3
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	08da      	lsrs	r2, r3, #3
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	3208      	adds	r2, #8
 8000f5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	f003 0307 	and.w	r3, r3, #7
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	220f      	movs	r2, #15
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	43db      	mvns	r3, r3
 8000f70:	697a      	ldr	r2, [r7, #20]
 8000f72:	08d2      	lsrs	r2, r2, #3
 8000f74:	4019      	ands	r1, r3
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	3208      	adds	r2, #8
 8000f7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	689a      	ldr	r2, [r3, #8]
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	2103      	movs	r1, #3
 8000f88:	fa01 f303 	lsl.w	r3, r1, r3
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	401a      	ands	r2, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	685a      	ldr	r2, [r3, #4]
 8000f98:	2101      	movs	r1, #1
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	401a      	ands	r2, r3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	68da      	ldr	r2, [r3, #12]
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	2103      	movs	r1, #3
 8000fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb6:	43db      	mvns	r3, r3
 8000fb8:	401a      	ands	r2, r3
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fca:	43db      	mvns	r3, r3
 8000fcc:	401a      	ands	r2, r3
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8000fd8:	683a      	ldr	r2, [r7, #0]
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	fa22 f303 	lsr.w	r3, r2, r3
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	f47f af2b 	bne.w	8000e3c <HAL_GPIO_DeInit+0x10>
  }
}
 8000fe6:	bf00      	nop
 8000fe8:	371c      	adds	r7, #28
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	40010000 	.word	0x40010000
 8000ff8:	48000400 	.word	0x48000400
 8000ffc:	48000800 	.word	0x48000800
 8001000:	48000c00 	.word	0x48000c00
 8001004:	48001000 	.word	0x48001000
 8001008:	48001400 	.word	0x48001400
 800100c:	48001800 	.word	0x48001800
 8001010:	40010400 	.word	0x40010400

08001014 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	460b      	mov	r3, r1
 800101e:	807b      	strh	r3, [r7, #2]
 8001020:	4613      	mov	r3, r2
 8001022:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001024:	787b      	ldrb	r3, [r7, #1]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d003      	beq.n	8001032 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800102a:	887a      	ldrh	r2, [r7, #2]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001030:	e002      	b.n	8001038 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001032:	887a      	ldrh	r2, [r7, #2]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001048:	4b04      	ldr	r3, [pc, #16]	; (800105c <HAL_PWREx_GetVoltageRange+0x18>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001050:	4618      	mov	r0, r3
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	40007000 	.word	0x40007000

08001060 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001060:	b480      	push	{r7}
 8001062:	b085      	sub	sp, #20
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800106e:	d130      	bne.n	80010d2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001070:	4b23      	ldr	r3, [pc, #140]	; (8001100 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001078:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800107c:	d038      	beq.n	80010f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800107e:	4b20      	ldr	r3, [pc, #128]	; (8001100 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001086:	4a1e      	ldr	r2, [pc, #120]	; (8001100 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001088:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800108c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800108e:	4b1d      	ldr	r3, [pc, #116]	; (8001104 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	2232      	movs	r2, #50	; 0x32
 8001094:	fb02 f303 	mul.w	r3, r2, r3
 8001098:	4a1b      	ldr	r2, [pc, #108]	; (8001108 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800109a:	fba2 2303 	umull	r2, r3, r2, r3
 800109e:	0c9b      	lsrs	r3, r3, #18
 80010a0:	3301      	adds	r3, #1
 80010a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010a4:	e002      	b.n	80010ac <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	3b01      	subs	r3, #1
 80010aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010ac:	4b14      	ldr	r3, [pc, #80]	; (8001100 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010ae:	695b      	ldr	r3, [r3, #20]
 80010b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010b8:	d102      	bne.n	80010c0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d1f2      	bne.n	80010a6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80010c0:	4b0f      	ldr	r3, [pc, #60]	; (8001100 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010c2:	695b      	ldr	r3, [r3, #20]
 80010c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010cc:	d110      	bne.n	80010f0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80010ce:	2303      	movs	r3, #3
 80010d0:	e00f      	b.n	80010f2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80010d2:	4b0b      	ldr	r3, [pc, #44]	; (8001100 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80010da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010de:	d007      	beq.n	80010f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80010e0:	4b07      	ldr	r3, [pc, #28]	; (8001100 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80010e8:	4a05      	ldr	r2, [pc, #20]	; (8001100 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010ee:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80010f0:	2300      	movs	r3, #0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3714      	adds	r7, #20
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	40007000 	.word	0x40007000
 8001104:	20000014 	.word	0x20000014
 8001108:	431bde83 	.word	0x431bde83

0800110c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af02      	add	r7, sp, #8
 8001112:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8001114:	f7ff f8c0 	bl	8000298 <HAL_GetTick>
 8001118:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d101      	bne.n	8001124 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8001120:	2301      	movs	r3, #1
 8001122:	e063      	b.n	80011ec <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800112a:	b2db      	uxtb	r3, r3
 800112c:	2b00      	cmp	r3, #0
 800112e:	d10b      	bne.n	8001148 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2200      	movs	r2, #0
 8001134:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f002 fd03 	bl	8003b44 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800113e:	f241 3188 	movw	r1, #5000	; 0x1388
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f000 faf7 	bl	8001736 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	3b01      	subs	r3, #1
 8001158:	021a      	lsls	r2, r3, #8
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	430a      	orrs	r2, r1
 8001160:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001166:	9300      	str	r3, [sp, #0]
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	2200      	movs	r2, #0
 800116c:	2120      	movs	r1, #32
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f000 faef 	bl	8001752 <QSPI_WaitFlagStateUntilTimeout>
 8001174:	4603      	mov	r3, r0
 8001176:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8001178:	7afb      	ldrb	r3, [r7, #11]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d131      	bne.n	80011e2 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001188:	f023 0310 	bic.w	r3, r3, #16
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	6852      	ldr	r2, [r2, #4]
 8001190:	0611      	lsls	r1, r2, #24
 8001192:	687a      	ldr	r2, [r7, #4]
 8001194:	68d2      	ldr	r2, [r2, #12]
 8001196:	4311      	orrs	r1, r2
 8001198:	687a      	ldr	r2, [r7, #4]
 800119a:	6812      	ldr	r2, [r2, #0]
 800119c:	430b      	orrs	r3, r1
 800119e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	685a      	ldr	r2, [r3, #4]
 80011a6:	4b13      	ldr	r3, [pc, #76]	; (80011f4 <HAL_QSPI_Init+0xe8>)
 80011a8:	4013      	ands	r3, r2
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	6912      	ldr	r2, [r2, #16]
 80011ae:	0411      	lsls	r1, r2, #16
 80011b0:	687a      	ldr	r2, [r7, #4]
 80011b2:	6952      	ldr	r2, [r2, #20]
 80011b4:	4311      	orrs	r1, r2
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	6992      	ldr	r2, [r2, #24]
 80011ba:	4311      	orrs	r1, r2
 80011bc:	687a      	ldr	r2, [r7, #4]
 80011be:	6812      	ldr	r2, [r2, #0]
 80011c0:	430b      	orrs	r3, r1
 80011c2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f042 0201 	orr.w	r2, r2, #1
 80011d2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2200      	movs	r2, #0
 80011d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2201      	movs	r2, #1
 80011de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2200      	movs	r2, #0
 80011e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80011ea:	7afb      	ldrb	r3, [r7, #11]
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3710      	adds	r7, #16
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	ffe0f8fe 	.word	0xffe0f8fe

080011f8 <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d101      	bne.n	800120a <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e016      	b.n	8001238 <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f022 0201 	bic.w	r2, r2, #1
 8001218:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f002 fcd6 	bl	8003bcc <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2200      	movs	r2, #0
 8001224:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2200      	movs	r2, #0
 800122a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2200      	movs	r2, #0
 8001232:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8001236:	2300      	movs	r3, #0
}
 8001238:	4618      	mov	r0, r3
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b088      	sub	sp, #32
 8001244:	af02      	add	r7, sp, #8
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800124c:	f7ff f824 	bl	8000298 <HAL_GetTick>
 8001250:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001258:	b2db      	uxtb	r3, r3
 800125a:	2b01      	cmp	r3, #1
 800125c:	d101      	bne.n	8001262 <HAL_QSPI_Command+0x22>
 800125e:	2302      	movs	r3, #2
 8001260:	e048      	b.n	80012f4 <HAL_QSPI_Command+0xb4>
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	2201      	movs	r2, #1
 8001266:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001270:	b2db      	uxtb	r3, r3
 8001272:	2b01      	cmp	r3, #1
 8001274:	d137      	bne.n	80012e6 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	2200      	movs	r2, #0
 800127a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	2202      	movs	r2, #2
 8001280:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	9300      	str	r3, [sp, #0]
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	2200      	movs	r2, #0
 800128c:	2120      	movs	r1, #32
 800128e:	68f8      	ldr	r0, [r7, #12]
 8001290:	f000 fa5f 	bl	8001752 <QSPI_WaitFlagStateUntilTimeout>
 8001294:	4603      	mov	r3, r0
 8001296:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8001298:	7dfb      	ldrb	r3, [r7, #23]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d125      	bne.n	80012ea <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800129e:	2200      	movs	r2, #0
 80012a0:	68b9      	ldr	r1, [r7, #8]
 80012a2:	68f8      	ldr	r0, [r7, #12]
 80012a4:	f000 fa8c 	bl	80017c0 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d115      	bne.n	80012dc <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	9300      	str	r3, [sp, #0]
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	2201      	movs	r2, #1
 80012b8:	2102      	movs	r1, #2
 80012ba:	68f8      	ldr	r0, [r7, #12]
 80012bc:	f000 fa49 	bl	8001752 <QSPI_WaitFlagStateUntilTimeout>
 80012c0:	4603      	mov	r3, r0
 80012c2:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 80012c4:	7dfb      	ldrb	r3, [r7, #23]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d10f      	bne.n	80012ea <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	2202      	movs	r2, #2
 80012d0:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	2201      	movs	r2, #1
 80012d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80012da:	e006      	b.n	80012ea <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	2201      	movs	r2, #1
 80012e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80012e4:	e001      	b.n	80012ea <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 80012e6:	2302      	movs	r3, #2
 80012e8:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	2200      	movs	r2, #0
 80012ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80012f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3718      	adds	r7, #24
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}

080012fc <HAL_QSPI_Transmit>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b08a      	sub	sp, #40	; 0x28
 8001300:	af02      	add	r7, sp, #8
 8001302:	60f8      	str	r0, [r7, #12]
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001308:	2300      	movs	r3, #0
 800130a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800130c:	f7fe ffc4 	bl	8000298 <HAL_GetTick>
 8001310:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	3320      	adds	r3, #32
 8001318:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001320:	b2db      	uxtb	r3, r3
 8001322:	2b01      	cmp	r3, #1
 8001324:	d101      	bne.n	800132a <HAL_QSPI_Transmit+0x2e>
 8001326:	2302      	movs	r3, #2
 8001328:	e07b      	b.n	8001422 <HAL_QSPI_Transmit+0x126>
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	2201      	movs	r2, #1
 800132e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001338:	b2db      	uxtb	r3, r3
 800133a:	2b01      	cmp	r3, #1
 800133c:	d16a      	bne.n	8001414 <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	2200      	movs	r2, #0
 8001342:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d05b      	beq.n	8001402 <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	2212      	movs	r2, #18
 800134e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	691b      	ldr	r3, [r3, #16]
 8001358:	1c5a      	adds	r2, r3, #1
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	625a      	str	r2, [r3, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	691b      	ldr	r3, [r3, #16]
 8001364:	1c5a      	adds	r2, r3, #1
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	621a      	str	r2, [r3, #32]
      hqspi->pTxBuffPtr = pData;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	68ba      	ldr	r2, [r7, #8]
 800136e:	61da      	str	r2, [r3, #28]

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	695a      	ldr	r2, [r3, #20]
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800137e:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8001380:	e01b      	b.n	80013ba <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	9300      	str	r3, [sp, #0]
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	2201      	movs	r2, #1
 800138a:	2104      	movs	r1, #4
 800138c:	68f8      	ldr	r0, [r7, #12]
 800138e:	f000 f9e0 	bl	8001752 <QSPI_WaitFlagStateUntilTimeout>
 8001392:	4603      	mov	r3, r0
 8001394:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8001396:	7ffb      	ldrb	r3, [r7, #31]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d113      	bne.n	80013c4 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	69db      	ldr	r3, [r3, #28]
 80013a0:	781a      	ldrb	r2, [r3, #0]
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	69db      	ldr	r3, [r3, #28]
 80013aa:	1c5a      	adds	r2, r3, #1
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	61da      	str	r2, [r3, #28]
        hqspi->TxXferCount--;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b4:	1e5a      	subs	r2, r3, #1
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	625a      	str	r2, [r3, #36]	; 0x24
      while(hqspi->TxXferCount > 0U)
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d1df      	bne.n	8001382 <HAL_QSPI_Transmit+0x86>
 80013c2:	e000      	b.n	80013c6 <HAL_QSPI_Transmit+0xca>
          break;
 80013c4:	bf00      	nop
      }

      if (status == HAL_OK)
 80013c6:	7ffb      	ldrb	r3, [r7, #31]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d115      	bne.n	80013f8 <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	9300      	str	r3, [sp, #0]
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	2201      	movs	r2, #1
 80013d4:	2102      	movs	r1, #2
 80013d6:	68f8      	ldr	r0, [r7, #12]
 80013d8:	f000 f9bb 	bl	8001752 <QSPI_WaitFlagStateUntilTimeout>
 80013dc:	4603      	mov	r3, r0
 80013de:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 80013e0:	7ffb      	ldrb	r3, [r7, #31]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d108      	bne.n	80013f8 <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	2202      	movs	r2, #2
 80013ec:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 80013ee:	68f8      	ldr	r0, [r7, #12]
 80013f0:	f000 f934 	bl	800165c <HAL_QSPI_Abort>
 80013f4:	4603      	mov	r3, r0
 80013f6:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	2201      	movs	r2, #1
 80013fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8001400:	e00a      	b.n	8001418 <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001406:	f043 0208 	orr.w	r2, r3, #8
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	77fb      	strb	r3, [r7, #31]
 8001412:	e001      	b.n	8001418 <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 8001414:	2302      	movs	r3, #2
 8001416:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	2200      	movs	r2, #0
 800141c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8001420:	7ffb      	ldrb	r3, [r7, #31]
}
 8001422:	4618      	mov	r0, r3
 8001424:	3720      	adds	r7, #32
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b08a      	sub	sp, #40	; 0x28
 800142e:	af02      	add	r7, sp, #8
 8001430:	60f8      	str	r0, [r7, #12]
 8001432:	60b9      	str	r1, [r7, #8]
 8001434:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001436:	2300      	movs	r3, #0
 8001438:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800143a:	f7fe ff2d 	bl	8000298 <HAL_GetTick>
 800143e:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	699b      	ldr	r3, [r3, #24]
 8001446:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	3320      	adds	r3, #32
 800144e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001456:	b2db      	uxtb	r3, r3
 8001458:	2b01      	cmp	r3, #1
 800145a:	d101      	bne.n	8001460 <HAL_QSPI_Receive+0x36>
 800145c:	2302      	movs	r3, #2
 800145e:	e082      	b.n	8001566 <HAL_QSPI_Receive+0x13c>
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	2201      	movs	r2, #1
 8001464:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800146e:	b2db      	uxtb	r3, r3
 8001470:	2b01      	cmp	r3, #1
 8001472:	d171      	bne.n	8001558 <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	2200      	movs	r2, #0
 8001478:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 800147a:	68bb      	ldr	r3, [r7, #8]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d062      	beq.n	8001546 <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	2222      	movs	r2, #34	; 0x22
 8001484:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	691b      	ldr	r3, [r3, #16]
 800148e:	1c5a      	adds	r2, r3, #1
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	631a      	str	r2, [r3, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	691b      	ldr	r3, [r3, #16]
 800149a:	1c5a      	adds	r2, r3, #1
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->pRxBuffPtr = pData;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	68ba      	ldr	r2, [r7, #8]
 80014a4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	695b      	ldr	r3, [r3, #20]
 80014ac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80014b8:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	697a      	ldr	r2, [r7, #20]
 80014c0:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 80014c2:	e01c      	b.n	80014fe <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	9300      	str	r3, [sp, #0]
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	2201      	movs	r2, #1
 80014cc:	2106      	movs	r1, #6
 80014ce:	68f8      	ldr	r0, [r7, #12]
 80014d0:	f000 f93f 	bl	8001752 <QSPI_WaitFlagStateUntilTimeout>
 80014d4:	4603      	mov	r3, r0
 80014d6:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 80014d8:	7ffb      	ldrb	r3, [r7, #31]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d114      	bne.n	8001508 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	7812      	ldrb	r2, [r2, #0]
 80014e6:	b2d2      	uxtb	r2, r2
 80014e8:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ee:	1c5a      	adds	r2, r3, #1
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	629a      	str	r2, [r3, #40]	; 0x28
        hqspi->RxXferCount--;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f8:	1e5a      	subs	r2, r3, #1
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	631a      	str	r2, [r3, #48]	; 0x30
      while(hqspi->RxXferCount > 0U)
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	2b00      	cmp	r3, #0
 8001504:	d1de      	bne.n	80014c4 <HAL_QSPI_Receive+0x9a>
 8001506:	e000      	b.n	800150a <HAL_QSPI_Receive+0xe0>
          break;
 8001508:	bf00      	nop
      }

      if (status == HAL_OK)
 800150a:	7ffb      	ldrb	r3, [r7, #31]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d115      	bne.n	800153c <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	9300      	str	r3, [sp, #0]
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	2201      	movs	r2, #1
 8001518:	2102      	movs	r1, #2
 800151a:	68f8      	ldr	r0, [r7, #12]
 800151c:	f000 f919 	bl	8001752 <QSPI_WaitFlagStateUntilTimeout>
 8001520:	4603      	mov	r3, r0
 8001522:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8001524:	7ffb      	ldrb	r3, [r7, #31]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d108      	bne.n	800153c <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2202      	movs	r2, #2
 8001530:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 8001532:	68f8      	ldr	r0, [r7, #12]
 8001534:	f000 f892 	bl	800165c <HAL_QSPI_Abort>
 8001538:	4603      	mov	r3, r0
 800153a:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	2201      	movs	r2, #1
 8001540:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8001544:	e00a      	b.n	800155c <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800154a:	f043 0208 	orr.w	r2, r3, #8
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	77fb      	strb	r3, [r7, #31]
 8001556:	e001      	b.n	800155c <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 8001558:	2302      	movs	r3, #2
 800155a:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	2200      	movs	r2, #0
 8001560:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8001564:	7ffb      	ldrb	r3, [r7, #31]
}
 8001566:	4618      	mov	r0, r3
 8001568:	3720      	adds	r7, #32
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	b088      	sub	sp, #32
 8001572:	af02      	add	r7, sp, #8
 8001574:	60f8      	str	r0, [r7, #12]
 8001576:	60b9      	str	r1, [r7, #8]
 8001578:	607a      	str	r2, [r7, #4]
 800157a:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800157c:	f7fe fe8c 	bl	8000298 <HAL_GetTick>
 8001580:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001588:	b2db      	uxtb	r3, r3
 800158a:	2b01      	cmp	r3, #1
 800158c:	d101      	bne.n	8001592 <HAL_QSPI_AutoPolling+0x24>
 800158e:	2302      	movs	r3, #2
 8001590:	e060      	b.n	8001654 <HAL_QSPI_AutoPolling+0xe6>
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	2201      	movs	r2, #1
 8001596:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d14f      	bne.n	8001646 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	2200      	movs	r2, #0
 80015aa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	2242      	movs	r2, #66	; 0x42
 80015b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	9300      	str	r3, [sp, #0]
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	2200      	movs	r2, #0
 80015bc:	2120      	movs	r1, #32
 80015be:	68f8      	ldr	r0, [r7, #12]
 80015c0:	f000 f8c7 	bl	8001752 <QSPI_WaitFlagStateUntilTimeout>
 80015c4:	4603      	mov	r3, r0
 80015c6:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 80015c8:	7dfb      	ldrb	r3, [r7, #23]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d13d      	bne.n	800164a <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	6812      	ldr	r2, [r2, #0]
 80015d6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	6852      	ldr	r2, [r2, #4]
 80015e0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	6892      	ldr	r2, [r2, #8]
 80015ea:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	691b      	ldr	r3, [r3, #16]
 80015fa:	431a      	orrs	r2, r3
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001604:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	68da      	ldr	r2, [r3, #12]
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800160e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001612:	68b9      	ldr	r1, [r7, #8]
 8001614:	68f8      	ldr	r0, [r7, #12]
 8001616:	f000 f8d3 	bl	80017c0 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	9300      	str	r3, [sp, #0]
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	2201      	movs	r2, #1
 8001622:	2108      	movs	r1, #8
 8001624:	68f8      	ldr	r0, [r7, #12]
 8001626:	f000 f894 	bl	8001752 <QSPI_WaitFlagStateUntilTimeout>
 800162a:	4603      	mov	r3, r0
 800162c:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800162e:	7dfb      	ldrb	r3, [r7, #23]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d10a      	bne.n	800164a <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2208      	movs	r2, #8
 800163a:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	2201      	movs	r2, #1
 8001640:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8001644:	e001      	b.n	800164a <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8001646:	2302      	movs	r3, #2
 8001648:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	2200      	movs	r2, #0
 800164e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8001652:	7dfb      	ldrb	r3, [r7, #23]
}
 8001654:	4618      	mov	r0, r3
 8001656:	3718      	adds	r7, #24
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}

0800165c <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af02      	add	r7, sp, #8
 8001662:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001664:	2300      	movs	r3, #0
 8001666:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8001668:	f7fe fe16 	bl	8000298 <HAL_GetTick>
 800166c:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001674:	b2db      	uxtb	r3, r3
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	2b00      	cmp	r3, #0
 800167c:	d056      	beq.n	800172c <HAL_QSPI_Abort+0xd0>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0304 	and.w	r3, r3, #4
 8001690:	2b00      	cmp	r3, #0
 8001692:	d017      	beq.n	80016c4 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f022 0204 	bic.w	r2, r2, #4
 80016a2:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff f929 	bl	8000900 <HAL_DMA_Abort>
 80016ae:	4603      	mov	r3, r0
 80016b0:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 80016b2:	7bfb      	ldrb	r3, [r7, #15]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d005      	beq.n	80016c4 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016bc:	f043 0204 	orr.w	r2, r3, #4
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f042 0202 	orr.w	r2, r2, #2
 80016d2:	601a      	str	r2, [r3, #0]

    /* Wait until TC flag is set to go back in idle state */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d8:	9300      	str	r3, [sp, #0]
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	2201      	movs	r2, #1
 80016de:	2102      	movs	r1, #2
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f000 f836 	bl	8001752 <QSPI_WaitFlagStateUntilTimeout>
 80016e6:	4603      	mov	r3, r0
 80016e8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80016ea:	7bfb      	ldrb	r3, [r7, #15]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d10e      	bne.n	800170e <HAL_QSPI_Abort+0xb2>
    {
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2202      	movs	r2, #2
 80016f6:	60da      	str	r2, [r3, #12]

      /* Wait until BUSY flag is reset */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fc:	9300      	str	r3, [sp, #0]
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	2200      	movs	r2, #0
 8001702:	2120      	movs	r1, #32
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f000 f824 	bl	8001752 <QSPI_WaitFlagStateUntilTimeout>
 800170a:	4603      	mov	r3, r0
 800170c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800170e:	7bfb      	ldrb	r3, [r7, #15]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d10b      	bne.n	800172c <HAL_QSPI_Abort+0xd0>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	695a      	ldr	r2, [r3, #20]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8001722:	615a      	str	r2, [r3, #20]

      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2201      	movs	r2, #1
 8001728:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
  }

  return status;
 800172c:	7bfb      	ldrb	r3, [r7, #15]
}
 800172e:	4618      	mov	r0, r3
 8001730:	3710      	adds	r7, #16
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}

08001736 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8001736:	b480      	push	{r7}
 8001738:	b083      	sub	sp, #12
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
 800173e:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	683a      	ldr	r2, [r7, #0]
 8001744:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001746:	bf00      	nop
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr

08001752 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8001752:	b580      	push	{r7, lr}
 8001754:	b084      	sub	sp, #16
 8001756:	af00      	add	r7, sp, #0
 8001758:	60f8      	str	r0, [r7, #12]
 800175a:	60b9      	str	r1, [r7, #8]
 800175c:	603b      	str	r3, [r7, #0]
 800175e:	4613      	mov	r3, r2
 8001760:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8001762:	e01a      	b.n	800179a <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800176a:	d016      	beq.n	800179a <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800176c:	f7fe fd94 	bl	8000298 <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	69ba      	ldr	r2, [r7, #24]
 8001778:	429a      	cmp	r2, r3
 800177a:	d302      	bcc.n	8001782 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d10b      	bne.n	800179a <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	2204      	movs	r2, #4
 8001786:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800178e:	f043 0201 	orr.w	r2, r3, #1
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e00e      	b.n	80017b8 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	689a      	ldr	r2, [r3, #8]
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	4013      	ands	r3, r2
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	bf14      	ite	ne
 80017a8:	2301      	movne	r3, #1
 80017aa:	2300      	moveq	r3, #0
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	461a      	mov	r2, r3
 80017b0:	79fb      	ldrb	r3, [r7, #7]
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d1d6      	bne.n	8001764 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80017b6:	2300      	movs	r3, #0
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3710      	adds	r7, #16
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}

080017c0 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	60b9      	str	r1, [r7, #8]
 80017ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d009      	beq.n	80017e8 <QSPI_Config+0x28>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80017da:	d005      	beq.n	80017e8 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	3a01      	subs	r2, #1
 80017e6:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	f000 80b9 	beq.w	8001964 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	6a1b      	ldr	r3, [r3, #32]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d05f      	beq.n	80018ba <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	68ba      	ldr	r2, [r7, #8]
 8001800:	6892      	ldr	r2, [r2, #8]
 8001802:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	69db      	ldr	r3, [r3, #28]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d031      	beq.n	8001870 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001814:	431a      	orrs	r2, r3
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800181a:	431a      	orrs	r2, r3
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001820:	431a      	orrs	r2, r3
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	695b      	ldr	r3, [r3, #20]
 8001826:	049b      	lsls	r3, r3, #18
 8001828:	431a      	orrs	r2, r3
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	691b      	ldr	r3, [r3, #16]
 800182e:	431a      	orrs	r2, r3
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	6a1b      	ldr	r3, [r3, #32]
 8001834:	431a      	orrs	r2, r3
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	431a      	orrs	r2, r3
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	69db      	ldr	r3, [r3, #28]
 8001840:	431a      	orrs	r2, r3
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	699b      	ldr	r3, [r3, #24]
 8001846:	431a      	orrs	r2, r3
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	ea42 0103 	orr.w	r1, r2, r3
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	430a      	orrs	r2, r1
 8001858:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8001860:	f000 812e 	beq.w	8001ac0 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	68ba      	ldr	r2, [r7, #8]
 800186a:	6852      	ldr	r2, [r2, #4]
 800186c:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800186e:	e127      	b.n	8001ac0 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001878:	431a      	orrs	r2, r3
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800187e:	431a      	orrs	r2, r3
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001884:	431a      	orrs	r2, r3
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	695b      	ldr	r3, [r3, #20]
 800188a:	049b      	lsls	r3, r3, #18
 800188c:	431a      	orrs	r2, r3
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	691b      	ldr	r3, [r3, #16]
 8001892:	431a      	orrs	r2, r3
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	6a1b      	ldr	r3, [r3, #32]
 8001898:	431a      	orrs	r2, r3
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	69db      	ldr	r3, [r3, #28]
 800189e:	431a      	orrs	r2, r3
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	699b      	ldr	r3, [r3, #24]
 80018a4:	431a      	orrs	r2, r3
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	ea42 0103 	orr.w	r1, r2, r3
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	430a      	orrs	r2, r1
 80018b6:	615a      	str	r2, [r3, #20]
}
 80018b8:	e102      	b.n	8001ac0 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	69db      	ldr	r3, [r3, #28]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d02e      	beq.n	8001920 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ca:	431a      	orrs	r2, r3
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018d0:	431a      	orrs	r2, r3
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d6:	431a      	orrs	r2, r3
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	695b      	ldr	r3, [r3, #20]
 80018dc:	049b      	lsls	r3, r3, #18
 80018de:	431a      	orrs	r2, r3
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	6a1b      	ldr	r3, [r3, #32]
 80018e4:	431a      	orrs	r2, r3
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	68db      	ldr	r3, [r3, #12]
 80018ea:	431a      	orrs	r2, r3
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	69db      	ldr	r3, [r3, #28]
 80018f0:	431a      	orrs	r2, r3
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	699b      	ldr	r3, [r3, #24]
 80018f6:	431a      	orrs	r2, r3
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	ea42 0103 	orr.w	r1, r2, r3
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	430a      	orrs	r2, r1
 8001908:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8001910:	f000 80d6 	beq.w	8001ac0 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	68ba      	ldr	r2, [r7, #8]
 800191a:	6852      	ldr	r2, [r2, #4]
 800191c:	619a      	str	r2, [r3, #24]
}
 800191e:	e0cf      	b.n	8001ac0 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001928:	431a      	orrs	r2, r3
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800192e:	431a      	orrs	r2, r3
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001934:	431a      	orrs	r2, r3
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	695b      	ldr	r3, [r3, #20]
 800193a:	049b      	lsls	r3, r3, #18
 800193c:	431a      	orrs	r2, r3
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	6a1b      	ldr	r3, [r3, #32]
 8001942:	431a      	orrs	r2, r3
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	69db      	ldr	r3, [r3, #28]
 8001948:	431a      	orrs	r2, r3
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	699b      	ldr	r3, [r3, #24]
 800194e:	431a      	orrs	r2, r3
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	ea42 0103 	orr.w	r1, r2, r3
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	430a      	orrs	r2, r1
 8001960:	615a      	str	r2, [r3, #20]
}
 8001962:	e0ad      	b.n	8001ac0 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	6a1b      	ldr	r3, [r3, #32]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d058      	beq.n	8001a1e <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	68ba      	ldr	r2, [r7, #8]
 8001972:	6892      	ldr	r2, [r2, #8]
 8001974:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	69db      	ldr	r3, [r3, #28]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d02d      	beq.n	80019da <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001986:	431a      	orrs	r2, r3
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800198c:	431a      	orrs	r2, r3
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001992:	431a      	orrs	r2, r3
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	695b      	ldr	r3, [r3, #20]
 8001998:	049b      	lsls	r3, r3, #18
 800199a:	431a      	orrs	r2, r3
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	691b      	ldr	r3, [r3, #16]
 80019a0:	431a      	orrs	r2, r3
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	6a1b      	ldr	r3, [r3, #32]
 80019a6:	431a      	orrs	r2, r3
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	431a      	orrs	r2, r3
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	69db      	ldr	r3, [r3, #28]
 80019b2:	431a      	orrs	r2, r3
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	ea42 0103 	orr.w	r1, r2, r3
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	430a      	orrs	r2, r1
 80019c4:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80019cc:	d078      	beq.n	8001ac0 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	68ba      	ldr	r2, [r7, #8]
 80019d4:	6852      	ldr	r2, [r2, #4]
 80019d6:	619a      	str	r2, [r3, #24]
}
 80019d8:	e072      	b.n	8001ac0 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	431a      	orrs	r2, r3
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019e8:	431a      	orrs	r2, r3
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ee:	431a      	orrs	r2, r3
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	695b      	ldr	r3, [r3, #20]
 80019f4:	049b      	lsls	r3, r3, #18
 80019f6:	431a      	orrs	r2, r3
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	691b      	ldr	r3, [r3, #16]
 80019fc:	431a      	orrs	r2, r3
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	6a1b      	ldr	r3, [r3, #32]
 8001a02:	431a      	orrs	r2, r3
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	69db      	ldr	r3, [r3, #28]
 8001a08:	431a      	orrs	r2, r3
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	699b      	ldr	r3, [r3, #24]
 8001a0e:	ea42 0103 	orr.w	r1, r2, r3
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	615a      	str	r2, [r3, #20]
}
 8001a1c:	e050      	b.n	8001ac0 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	69db      	ldr	r3, [r3, #28]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d02a      	beq.n	8001a7c <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2e:	431a      	orrs	r2, r3
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a34:	431a      	orrs	r2, r3
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3a:	431a      	orrs	r2, r3
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	695b      	ldr	r3, [r3, #20]
 8001a40:	049b      	lsls	r3, r3, #18
 8001a42:	431a      	orrs	r2, r3
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	6a1b      	ldr	r3, [r3, #32]
 8001a48:	431a      	orrs	r2, r3
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	68db      	ldr	r3, [r3, #12]
 8001a4e:	431a      	orrs	r2, r3
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	69db      	ldr	r3, [r3, #28]
 8001a54:	431a      	orrs	r2, r3
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	699b      	ldr	r3, [r3, #24]
 8001a5a:	ea42 0103 	orr.w	r1, r2, r3
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	430a      	orrs	r2, r1
 8001a66:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8001a6e:	d027      	beq.n	8001ac0 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	68ba      	ldr	r2, [r7, #8]
 8001a76:	6852      	ldr	r2, [r2, #4]
 8001a78:	619a      	str	r2, [r3, #24]
}
 8001a7a:	e021      	b.n	8001ac0 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d01d      	beq.n	8001ac0 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8c:	431a      	orrs	r2, r3
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a92:	431a      	orrs	r2, r3
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a98:	431a      	orrs	r2, r3
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	695b      	ldr	r3, [r3, #20]
 8001a9e:	049b      	lsls	r3, r3, #18
 8001aa0:	431a      	orrs	r2, r3
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	6a1b      	ldr	r3, [r3, #32]
 8001aa6:	431a      	orrs	r2, r3
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	69db      	ldr	r3, [r3, #28]
 8001aac:	431a      	orrs	r2, r3
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	699b      	ldr	r3, [r3, #24]
 8001ab2:	ea42 0103 	orr.w	r1, r2, r3
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	430a      	orrs	r2, r1
 8001abe:	615a      	str	r2, [r3, #20]
}
 8001ac0:	bf00      	nop
 8001ac2:	3714      	adds	r7, #20
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b088      	sub	sp, #32
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d101      	bne.n	8001ade <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e3d4      	b.n	8002288 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ade:	4ba1      	ldr	r3, [pc, #644]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	f003 030c 	and.w	r3, r3, #12
 8001ae6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ae8:	4b9e      	ldr	r3, [pc, #632]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	f003 0303 	and.w	r3, r3, #3
 8001af0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0310 	and.w	r3, r3, #16
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f000 80e4 	beq.w	8001cc8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d007      	beq.n	8001b16 <HAL_RCC_OscConfig+0x4a>
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	2b0c      	cmp	r3, #12
 8001b0a:	f040 808b 	bne.w	8001c24 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	f040 8087 	bne.w	8001c24 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b16:	4b93      	ldr	r3, [pc, #588]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d005      	beq.n	8001b2e <HAL_RCC_OscConfig+0x62>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	699b      	ldr	r3, [r3, #24]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d101      	bne.n	8001b2e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e3ac      	b.n	8002288 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6a1a      	ldr	r2, [r3, #32]
 8001b32:	4b8c      	ldr	r3, [pc, #560]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0308 	and.w	r3, r3, #8
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d004      	beq.n	8001b48 <HAL_RCC_OscConfig+0x7c>
 8001b3e:	4b89      	ldr	r3, [pc, #548]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b46:	e005      	b.n	8001b54 <HAL_RCC_OscConfig+0x88>
 8001b48:	4b86      	ldr	r3, [pc, #536]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001b4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b4e:	091b      	lsrs	r3, r3, #4
 8001b50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d223      	bcs.n	8001ba0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6a1b      	ldr	r3, [r3, #32]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f000 fd07 	bl	8002570 <RCC_SetFlashLatencyFromMSIRange>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e38d      	b.n	8002288 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b6c:	4b7d      	ldr	r3, [pc, #500]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a7c      	ldr	r2, [pc, #496]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001b72:	f043 0308 	orr.w	r3, r3, #8
 8001b76:	6013      	str	r3, [r2, #0]
 8001b78:	4b7a      	ldr	r3, [pc, #488]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6a1b      	ldr	r3, [r3, #32]
 8001b84:	4977      	ldr	r1, [pc, #476]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001b86:	4313      	orrs	r3, r2
 8001b88:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b8a:	4b76      	ldr	r3, [pc, #472]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	69db      	ldr	r3, [r3, #28]
 8001b96:	021b      	lsls	r3, r3, #8
 8001b98:	4972      	ldr	r1, [pc, #456]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	604b      	str	r3, [r1, #4]
 8001b9e:	e025      	b.n	8001bec <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ba0:	4b70      	ldr	r3, [pc, #448]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a6f      	ldr	r2, [pc, #444]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001ba6:	f043 0308 	orr.w	r3, r3, #8
 8001baa:	6013      	str	r3, [r2, #0]
 8001bac:	4b6d      	ldr	r3, [pc, #436]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6a1b      	ldr	r3, [r3, #32]
 8001bb8:	496a      	ldr	r1, [pc, #424]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bbe:	4b69      	ldr	r3, [pc, #420]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	69db      	ldr	r3, [r3, #28]
 8001bca:	021b      	lsls	r3, r3, #8
 8001bcc:	4965      	ldr	r1, [pc, #404]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d109      	bne.n	8001bec <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6a1b      	ldr	r3, [r3, #32]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f000 fcc7 	bl	8002570 <RCC_SetFlashLatencyFromMSIRange>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e34d      	b.n	8002288 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bec:	f000 fc36 	bl	800245c <HAL_RCC_GetSysClockFreq>
 8001bf0:	4601      	mov	r1, r0
 8001bf2:	4b5c      	ldr	r3, [pc, #368]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	091b      	lsrs	r3, r3, #4
 8001bf8:	f003 030f 	and.w	r3, r3, #15
 8001bfc:	4a5a      	ldr	r2, [pc, #360]	; (8001d68 <HAL_RCC_OscConfig+0x29c>)
 8001bfe:	5cd3      	ldrb	r3, [r2, r3]
 8001c00:	f003 031f 	and.w	r3, r3, #31
 8001c04:	fa21 f303 	lsr.w	r3, r1, r3
 8001c08:	4a58      	ldr	r2, [pc, #352]	; (8001d6c <HAL_RCC_OscConfig+0x2a0>)
 8001c0a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001c0c:	4b58      	ldr	r3, [pc, #352]	; (8001d70 <HAL_RCC_OscConfig+0x2a4>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7fe faf1 	bl	80001f8 <HAL_InitTick>
 8001c16:	4603      	mov	r3, r0
 8001c18:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001c1a:	7bfb      	ldrb	r3, [r7, #15]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d052      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001c20:	7bfb      	ldrb	r3, [r7, #15]
 8001c22:	e331      	b.n	8002288 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d032      	beq.n	8001c92 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001c2c:	4b4d      	ldr	r3, [pc, #308]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a4c      	ldr	r2, [pc, #304]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001c32:	f043 0301 	orr.w	r3, r3, #1
 8001c36:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c38:	f7fe fb2e 	bl	8000298 <HAL_GetTick>
 8001c3c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c3e:	e008      	b.n	8001c52 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c40:	f7fe fb2a 	bl	8000298 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e31a      	b.n	8002288 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c52:	4b44      	ldr	r3, [pc, #272]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d0f0      	beq.n	8001c40 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c5e:	4b41      	ldr	r3, [pc, #260]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a40      	ldr	r2, [pc, #256]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001c64:	f043 0308 	orr.w	r3, r3, #8
 8001c68:	6013      	str	r3, [r2, #0]
 8001c6a:	4b3e      	ldr	r3, [pc, #248]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6a1b      	ldr	r3, [r3, #32]
 8001c76:	493b      	ldr	r1, [pc, #236]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c7c:	4b39      	ldr	r3, [pc, #228]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	69db      	ldr	r3, [r3, #28]
 8001c88:	021b      	lsls	r3, r3, #8
 8001c8a:	4936      	ldr	r1, [pc, #216]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	604b      	str	r3, [r1, #4]
 8001c90:	e01a      	b.n	8001cc8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c92:	4b34      	ldr	r3, [pc, #208]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a33      	ldr	r2, [pc, #204]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001c98:	f023 0301 	bic.w	r3, r3, #1
 8001c9c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c9e:	f7fe fafb 	bl	8000298 <HAL_GetTick>
 8001ca2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ca4:	e008      	b.n	8001cb8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ca6:	f7fe faf7 	bl	8000298 <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d901      	bls.n	8001cb8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e2e7      	b.n	8002288 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001cb8:	4b2a      	ldr	r3, [pc, #168]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0302 	and.w	r3, r3, #2
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d1f0      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x1da>
 8001cc4:	e000      	b.n	8001cc8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001cc6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0301 	and.w	r3, r3, #1
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d074      	beq.n	8001dbe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	2b08      	cmp	r3, #8
 8001cd8:	d005      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x21a>
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	2b0c      	cmp	r3, #12
 8001cde:	d10e      	bne.n	8001cfe <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	2b03      	cmp	r3, #3
 8001ce4:	d10b      	bne.n	8001cfe <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ce6:	4b1f      	ldr	r3, [pc, #124]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d064      	beq.n	8001dbc <HAL_RCC_OscConfig+0x2f0>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d160      	bne.n	8001dbc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e2c4      	b.n	8002288 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d06:	d106      	bne.n	8001d16 <HAL_RCC_OscConfig+0x24a>
 8001d08:	4b16      	ldr	r3, [pc, #88]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a15      	ldr	r2, [pc, #84]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001d0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d12:	6013      	str	r3, [r2, #0]
 8001d14:	e01d      	b.n	8001d52 <HAL_RCC_OscConfig+0x286>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d1e:	d10c      	bne.n	8001d3a <HAL_RCC_OscConfig+0x26e>
 8001d20:	4b10      	ldr	r3, [pc, #64]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a0f      	ldr	r2, [pc, #60]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001d26:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d2a:	6013      	str	r3, [r2, #0]
 8001d2c:	4b0d      	ldr	r3, [pc, #52]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a0c      	ldr	r2, [pc, #48]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001d32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d36:	6013      	str	r3, [r2, #0]
 8001d38:	e00b      	b.n	8001d52 <HAL_RCC_OscConfig+0x286>
 8001d3a:	4b0a      	ldr	r3, [pc, #40]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a09      	ldr	r2, [pc, #36]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001d40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d44:	6013      	str	r3, [r2, #0]
 8001d46:	4b07      	ldr	r3, [pc, #28]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a06      	ldr	r2, [pc, #24]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001d4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d50:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d01c      	beq.n	8001d94 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d5a:	f7fe fa9d 	bl	8000298 <HAL_GetTick>
 8001d5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d60:	e011      	b.n	8001d86 <HAL_RCC_OscConfig+0x2ba>
 8001d62:	bf00      	nop
 8001d64:	40021000 	.word	0x40021000
 8001d68:	08003e04 	.word	0x08003e04
 8001d6c:	20000014 	.word	0x20000014
 8001d70:	20000000 	.word	0x20000000
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d74:	f7fe fa90 	bl	8000298 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	2b64      	cmp	r3, #100	; 0x64
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e280      	b.n	8002288 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d86:	4baf      	ldr	r3, [pc, #700]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d0f0      	beq.n	8001d74 <HAL_RCC_OscConfig+0x2a8>
 8001d92:	e014      	b.n	8001dbe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d94:	f7fe fa80 	bl	8000298 <HAL_GetTick>
 8001d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d9a:	e008      	b.n	8001dae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d9c:	f7fe fa7c 	bl	8000298 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b64      	cmp	r3, #100	; 0x64
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e26c      	b.n	8002288 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001dae:	4ba5      	ldr	r3, [pc, #660]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d1f0      	bne.n	8001d9c <HAL_RCC_OscConfig+0x2d0>
 8001dba:	e000      	b.n	8001dbe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0302 	and.w	r3, r3, #2
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d060      	beq.n	8001e8c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	2b04      	cmp	r3, #4
 8001dce:	d005      	beq.n	8001ddc <HAL_RCC_OscConfig+0x310>
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	2b0c      	cmp	r3, #12
 8001dd4:	d119      	bne.n	8001e0a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d116      	bne.n	8001e0a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ddc:	4b99      	ldr	r3, [pc, #612]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d005      	beq.n	8001df4 <HAL_RCC_OscConfig+0x328>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d101      	bne.n	8001df4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e249      	b.n	8002288 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001df4:	4b93      	ldr	r3, [pc, #588]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	691b      	ldr	r3, [r3, #16]
 8001e00:	061b      	lsls	r3, r3, #24
 8001e02:	4990      	ldr	r1, [pc, #576]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001e04:	4313      	orrs	r3, r2
 8001e06:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e08:	e040      	b.n	8001e8c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d023      	beq.n	8001e5a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e12:	4b8c      	ldr	r3, [pc, #560]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a8b      	ldr	r2, [pc, #556]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001e18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e1e:	f7fe fa3b 	bl	8000298 <HAL_GetTick>
 8001e22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e24:	e008      	b.n	8001e38 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e26:	f7fe fa37 	bl	8000298 <HAL_GetTick>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d901      	bls.n	8001e38 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e227      	b.n	8002288 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e38:	4b82      	ldr	r3, [pc, #520]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d0f0      	beq.n	8001e26 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e44:	4b7f      	ldr	r3, [pc, #508]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	691b      	ldr	r3, [r3, #16]
 8001e50:	061b      	lsls	r3, r3, #24
 8001e52:	497c      	ldr	r1, [pc, #496]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001e54:	4313      	orrs	r3, r2
 8001e56:	604b      	str	r3, [r1, #4]
 8001e58:	e018      	b.n	8001e8c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e5a:	4b7a      	ldr	r3, [pc, #488]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a79      	ldr	r2, [pc, #484]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001e60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e66:	f7fe fa17 	bl	8000298 <HAL_GetTick>
 8001e6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e6c:	e008      	b.n	8001e80 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e6e:	f7fe fa13 	bl	8000298 <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d901      	bls.n	8001e80 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e203      	b.n	8002288 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e80:	4b70      	ldr	r3, [pc, #448]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d1f0      	bne.n	8001e6e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0308 	and.w	r3, r3, #8
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d03c      	beq.n	8001f12 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	695b      	ldr	r3, [r3, #20]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d01c      	beq.n	8001eda <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ea0:	4b68      	ldr	r3, [pc, #416]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001ea2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ea6:	4a67      	ldr	r2, [pc, #412]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001ea8:	f043 0301 	orr.w	r3, r3, #1
 8001eac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eb0:	f7fe f9f2 	bl	8000298 <HAL_GetTick>
 8001eb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001eb6:	e008      	b.n	8001eca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001eb8:	f7fe f9ee 	bl	8000298 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e1de      	b.n	8002288 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001eca:	4b5e      	ldr	r3, [pc, #376]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001ecc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ed0:	f003 0302 	and.w	r3, r3, #2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d0ef      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x3ec>
 8001ed8:	e01b      	b.n	8001f12 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001eda:	4b5a      	ldr	r3, [pc, #360]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001edc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ee0:	4a58      	ldr	r2, [pc, #352]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001ee2:	f023 0301 	bic.w	r3, r3, #1
 8001ee6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eea:	f7fe f9d5 	bl	8000298 <HAL_GetTick>
 8001eee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ef0:	e008      	b.n	8001f04 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ef2:	f7fe f9d1 	bl	8000298 <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d901      	bls.n	8001f04 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e1c1      	b.n	8002288 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f04:	4b4f      	ldr	r3, [pc, #316]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001f06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d1ef      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0304 	and.w	r3, r3, #4
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	f000 80a6 	beq.w	800206c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f20:	2300      	movs	r3, #0
 8001f22:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001f24:	4b47      	ldr	r3, [pc, #284]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d10d      	bne.n	8001f4c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f30:	4b44      	ldr	r3, [pc, #272]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001f32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f34:	4a43      	ldr	r2, [pc, #268]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001f36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f3a:	6593      	str	r3, [r2, #88]	; 0x58
 8001f3c:	4b41      	ldr	r3, [pc, #260]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f44:	60bb      	str	r3, [r7, #8]
 8001f46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f4c:	4b3e      	ldr	r3, [pc, #248]	; (8002048 <HAL_RCC_OscConfig+0x57c>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d118      	bne.n	8001f8a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f58:	4b3b      	ldr	r3, [pc, #236]	; (8002048 <HAL_RCC_OscConfig+0x57c>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a3a      	ldr	r2, [pc, #232]	; (8002048 <HAL_RCC_OscConfig+0x57c>)
 8001f5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f62:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f64:	f7fe f998 	bl	8000298 <HAL_GetTick>
 8001f68:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f6a:	e008      	b.n	8001f7e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f6c:	f7fe f994 	bl	8000298 <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e184      	b.n	8002288 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f7e:	4b32      	ldr	r3, [pc, #200]	; (8002048 <HAL_RCC_OscConfig+0x57c>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d0f0      	beq.n	8001f6c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d108      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x4d8>
 8001f92:	4b2c      	ldr	r3, [pc, #176]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f98:	4a2a      	ldr	r2, [pc, #168]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001f9a:	f043 0301 	orr.w	r3, r3, #1
 8001f9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fa2:	e024      	b.n	8001fee <HAL_RCC_OscConfig+0x522>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	2b05      	cmp	r3, #5
 8001faa:	d110      	bne.n	8001fce <HAL_RCC_OscConfig+0x502>
 8001fac:	4b25      	ldr	r3, [pc, #148]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fb2:	4a24      	ldr	r2, [pc, #144]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001fb4:	f043 0304 	orr.w	r3, r3, #4
 8001fb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fbc:	4b21      	ldr	r3, [pc, #132]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fc2:	4a20      	ldr	r2, [pc, #128]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001fc4:	f043 0301 	orr.w	r3, r3, #1
 8001fc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fcc:	e00f      	b.n	8001fee <HAL_RCC_OscConfig+0x522>
 8001fce:	4b1d      	ldr	r3, [pc, #116]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fd4:	4a1b      	ldr	r2, [pc, #108]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001fd6:	f023 0301 	bic.w	r3, r3, #1
 8001fda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fde:	4b19      	ldr	r3, [pc, #100]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fe4:	4a17      	ldr	r2, [pc, #92]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001fe6:	f023 0304 	bic.w	r3, r3, #4
 8001fea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d016      	beq.n	8002024 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ff6:	f7fe f94f 	bl	8000298 <HAL_GetTick>
 8001ffa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ffc:	e00a      	b.n	8002014 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ffe:	f7fe f94b 	bl	8000298 <HAL_GetTick>
 8002002:	4602      	mov	r2, r0
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	f241 3288 	movw	r2, #5000	; 0x1388
 800200c:	4293      	cmp	r3, r2
 800200e:	d901      	bls.n	8002014 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e139      	b.n	8002288 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002014:	4b0b      	ldr	r3, [pc, #44]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8002016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d0ed      	beq.n	8001ffe <HAL_RCC_OscConfig+0x532>
 8002022:	e01a      	b.n	800205a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002024:	f7fe f938 	bl	8000298 <HAL_GetTick>
 8002028:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800202a:	e00f      	b.n	800204c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800202c:	f7fe f934 	bl	8000298 <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	f241 3288 	movw	r2, #5000	; 0x1388
 800203a:	4293      	cmp	r3, r2
 800203c:	d906      	bls.n	800204c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e122      	b.n	8002288 <HAL_RCC_OscConfig+0x7bc>
 8002042:	bf00      	nop
 8002044:	40021000 	.word	0x40021000
 8002048:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800204c:	4b90      	ldr	r3, [pc, #576]	; (8002290 <HAL_RCC_OscConfig+0x7c4>)
 800204e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1e8      	bne.n	800202c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800205a:	7ffb      	ldrb	r3, [r7, #31]
 800205c:	2b01      	cmp	r3, #1
 800205e:	d105      	bne.n	800206c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002060:	4b8b      	ldr	r3, [pc, #556]	; (8002290 <HAL_RCC_OscConfig+0x7c4>)
 8002062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002064:	4a8a      	ldr	r2, [pc, #552]	; (8002290 <HAL_RCC_OscConfig+0x7c4>)
 8002066:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800206a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002070:	2b00      	cmp	r3, #0
 8002072:	f000 8108 	beq.w	8002286 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800207a:	2b02      	cmp	r3, #2
 800207c:	f040 80d0 	bne.w	8002220 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002080:	4b83      	ldr	r3, [pc, #524]	; (8002290 <HAL_RCC_OscConfig+0x7c4>)
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	f003 0203 	and.w	r2, r3, #3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002090:	429a      	cmp	r2, r3
 8002092:	d130      	bne.n	80020f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209e:	3b01      	subs	r3, #1
 80020a0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d127      	bne.n	80020f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020b0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d11f      	bne.n	80020f6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80020c0:	2a07      	cmp	r2, #7
 80020c2:	bf14      	ite	ne
 80020c4:	2201      	movne	r2, #1
 80020c6:	2200      	moveq	r2, #0
 80020c8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d113      	bne.n	80020f6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020d8:	085b      	lsrs	r3, r3, #1
 80020da:	3b01      	subs	r3, #1
 80020dc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80020de:	429a      	cmp	r2, r3
 80020e0:	d109      	bne.n	80020f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ec:	085b      	lsrs	r3, r3, #1
 80020ee:	3b01      	subs	r3, #1
 80020f0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d06e      	beq.n	80021d4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	2b0c      	cmp	r3, #12
 80020fa:	d069      	beq.n	80021d0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80020fc:	4b64      	ldr	r3, [pc, #400]	; (8002290 <HAL_RCC_OscConfig+0x7c4>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d105      	bne.n	8002114 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002108:	4b61      	ldr	r3, [pc, #388]	; (8002290 <HAL_RCC_OscConfig+0x7c4>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d001      	beq.n	8002118 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e0b7      	b.n	8002288 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002118:	4b5d      	ldr	r3, [pc, #372]	; (8002290 <HAL_RCC_OscConfig+0x7c4>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a5c      	ldr	r2, [pc, #368]	; (8002290 <HAL_RCC_OscConfig+0x7c4>)
 800211e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002122:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002124:	f7fe f8b8 	bl	8000298 <HAL_GetTick>
 8002128:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800212a:	e008      	b.n	800213e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800212c:	f7fe f8b4 	bl	8000298 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	2b02      	cmp	r3, #2
 8002138:	d901      	bls.n	800213e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e0a4      	b.n	8002288 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800213e:	4b54      	ldr	r3, [pc, #336]	; (8002290 <HAL_RCC_OscConfig+0x7c4>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d1f0      	bne.n	800212c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800214a:	4b51      	ldr	r3, [pc, #324]	; (8002290 <HAL_RCC_OscConfig+0x7c4>)
 800214c:	68da      	ldr	r2, [r3, #12]
 800214e:	4b51      	ldr	r3, [pc, #324]	; (8002294 <HAL_RCC_OscConfig+0x7c8>)
 8002150:	4013      	ands	r3, r2
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800215a:	3a01      	subs	r2, #1
 800215c:	0112      	lsls	r2, r2, #4
 800215e:	4311      	orrs	r1, r2
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002164:	0212      	lsls	r2, r2, #8
 8002166:	4311      	orrs	r1, r2
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800216c:	0852      	lsrs	r2, r2, #1
 800216e:	3a01      	subs	r2, #1
 8002170:	0552      	lsls	r2, r2, #21
 8002172:	4311      	orrs	r1, r2
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002178:	0852      	lsrs	r2, r2, #1
 800217a:	3a01      	subs	r2, #1
 800217c:	0652      	lsls	r2, r2, #25
 800217e:	4311      	orrs	r1, r2
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002184:	0912      	lsrs	r2, r2, #4
 8002186:	0452      	lsls	r2, r2, #17
 8002188:	430a      	orrs	r2, r1
 800218a:	4941      	ldr	r1, [pc, #260]	; (8002290 <HAL_RCC_OscConfig+0x7c4>)
 800218c:	4313      	orrs	r3, r2
 800218e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002190:	4b3f      	ldr	r3, [pc, #252]	; (8002290 <HAL_RCC_OscConfig+0x7c4>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a3e      	ldr	r2, [pc, #248]	; (8002290 <HAL_RCC_OscConfig+0x7c4>)
 8002196:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800219a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800219c:	4b3c      	ldr	r3, [pc, #240]	; (8002290 <HAL_RCC_OscConfig+0x7c4>)
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	4a3b      	ldr	r2, [pc, #236]	; (8002290 <HAL_RCC_OscConfig+0x7c4>)
 80021a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021a6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80021a8:	f7fe f876 	bl	8000298 <HAL_GetTick>
 80021ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021b0:	f7fe f872 	bl	8000298 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e062      	b.n	8002288 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021c2:	4b33      	ldr	r3, [pc, #204]	; (8002290 <HAL_RCC_OscConfig+0x7c4>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d0f0      	beq.n	80021b0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021ce:	e05a      	b.n	8002286 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e059      	b.n	8002288 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021d4:	4b2e      	ldr	r3, [pc, #184]	; (8002290 <HAL_RCC_OscConfig+0x7c4>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d152      	bne.n	8002286 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80021e0:	4b2b      	ldr	r3, [pc, #172]	; (8002290 <HAL_RCC_OscConfig+0x7c4>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a2a      	ldr	r2, [pc, #168]	; (8002290 <HAL_RCC_OscConfig+0x7c4>)
 80021e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021ea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021ec:	4b28      	ldr	r3, [pc, #160]	; (8002290 <HAL_RCC_OscConfig+0x7c4>)
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	4a27      	ldr	r2, [pc, #156]	; (8002290 <HAL_RCC_OscConfig+0x7c4>)
 80021f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021f6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80021f8:	f7fe f84e 	bl	8000298 <HAL_GetTick>
 80021fc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021fe:	e008      	b.n	8002212 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002200:	f7fe f84a 	bl	8000298 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b02      	cmp	r3, #2
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e03a      	b.n	8002288 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002212:	4b1f      	ldr	r3, [pc, #124]	; (8002290 <HAL_RCC_OscConfig+0x7c4>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d0f0      	beq.n	8002200 <HAL_RCC_OscConfig+0x734>
 800221e:	e032      	b.n	8002286 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	2b0c      	cmp	r3, #12
 8002224:	d02d      	beq.n	8002282 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002226:	4b1a      	ldr	r3, [pc, #104]	; (8002290 <HAL_RCC_OscConfig+0x7c4>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a19      	ldr	r2, [pc, #100]	; (8002290 <HAL_RCC_OscConfig+0x7c4>)
 800222c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002230:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002232:	4b17      	ldr	r3, [pc, #92]	; (8002290 <HAL_RCC_OscConfig+0x7c4>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d105      	bne.n	800224a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800223e:	4b14      	ldr	r3, [pc, #80]	; (8002290 <HAL_RCC_OscConfig+0x7c4>)
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	4a13      	ldr	r2, [pc, #76]	; (8002290 <HAL_RCC_OscConfig+0x7c4>)
 8002244:	f023 0303 	bic.w	r3, r3, #3
 8002248:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800224a:	4b11      	ldr	r3, [pc, #68]	; (8002290 <HAL_RCC_OscConfig+0x7c4>)
 800224c:	68db      	ldr	r3, [r3, #12]
 800224e:	4a10      	ldr	r2, [pc, #64]	; (8002290 <HAL_RCC_OscConfig+0x7c4>)
 8002250:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002254:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002258:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800225a:	f7fe f81d 	bl	8000298 <HAL_GetTick>
 800225e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002260:	e008      	b.n	8002274 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002262:	f7fe f819 	bl	8000298 <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	2b02      	cmp	r3, #2
 800226e:	d901      	bls.n	8002274 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e009      	b.n	8002288 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002274:	4b06      	ldr	r3, [pc, #24]	; (8002290 <HAL_RCC_OscConfig+0x7c4>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d1f0      	bne.n	8002262 <HAL_RCC_OscConfig+0x796>
 8002280:	e001      	b.n	8002286 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e000      	b.n	8002288 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002286:	2300      	movs	r3, #0
}
 8002288:	4618      	mov	r0, r3
 800228a:	3720      	adds	r7, #32
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	40021000 	.word	0x40021000
 8002294:	f99d808c 	.word	0xf99d808c

08002298 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d101      	bne.n	80022ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e0c8      	b.n	800243e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022ac:	4b66      	ldr	r3, [pc, #408]	; (8002448 <HAL_RCC_ClockConfig+0x1b0>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0307 	and.w	r3, r3, #7
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d910      	bls.n	80022dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ba:	4b63      	ldr	r3, [pc, #396]	; (8002448 <HAL_RCC_ClockConfig+0x1b0>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f023 0207 	bic.w	r2, r3, #7
 80022c2:	4961      	ldr	r1, [pc, #388]	; (8002448 <HAL_RCC_ClockConfig+0x1b0>)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ca:	4b5f      	ldr	r3, [pc, #380]	; (8002448 <HAL_RCC_ClockConfig+0x1b0>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0307 	and.w	r3, r3, #7
 80022d2:	683a      	ldr	r2, [r7, #0]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d001      	beq.n	80022dc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e0b0      	b.n	800243e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0301 	and.w	r3, r3, #1
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d04c      	beq.n	8002382 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	2b03      	cmp	r3, #3
 80022ee:	d107      	bne.n	8002300 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022f0:	4b56      	ldr	r3, [pc, #344]	; (800244c <HAL_RCC_ClockConfig+0x1b4>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d121      	bne.n	8002340 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e09e      	b.n	800243e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	2b02      	cmp	r3, #2
 8002306:	d107      	bne.n	8002318 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002308:	4b50      	ldr	r3, [pc, #320]	; (800244c <HAL_RCC_ClockConfig+0x1b4>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d115      	bne.n	8002340 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e092      	b.n	800243e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d107      	bne.n	8002330 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002320:	4b4a      	ldr	r3, [pc, #296]	; (800244c <HAL_RCC_ClockConfig+0x1b4>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0302 	and.w	r3, r3, #2
 8002328:	2b00      	cmp	r3, #0
 800232a:	d109      	bne.n	8002340 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e086      	b.n	800243e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002330:	4b46      	ldr	r3, [pc, #280]	; (800244c <HAL_RCC_ClockConfig+0x1b4>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002338:	2b00      	cmp	r3, #0
 800233a:	d101      	bne.n	8002340 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e07e      	b.n	800243e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002340:	4b42      	ldr	r3, [pc, #264]	; (800244c <HAL_RCC_ClockConfig+0x1b4>)
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f023 0203 	bic.w	r2, r3, #3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	493f      	ldr	r1, [pc, #252]	; (800244c <HAL_RCC_ClockConfig+0x1b4>)
 800234e:	4313      	orrs	r3, r2
 8002350:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002352:	f7fd ffa1 	bl	8000298 <HAL_GetTick>
 8002356:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002358:	e00a      	b.n	8002370 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800235a:	f7fd ff9d 	bl	8000298 <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	f241 3288 	movw	r2, #5000	; 0x1388
 8002368:	4293      	cmp	r3, r2
 800236a:	d901      	bls.n	8002370 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e066      	b.n	800243e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002370:	4b36      	ldr	r3, [pc, #216]	; (800244c <HAL_RCC_ClockConfig+0x1b4>)
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f003 020c 	and.w	r2, r3, #12
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	429a      	cmp	r2, r3
 8002380:	d1eb      	bne.n	800235a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	2b00      	cmp	r3, #0
 800238c:	d008      	beq.n	80023a0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800238e:	4b2f      	ldr	r3, [pc, #188]	; (800244c <HAL_RCC_ClockConfig+0x1b4>)
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	492c      	ldr	r1, [pc, #176]	; (800244c <HAL_RCC_ClockConfig+0x1b4>)
 800239c:	4313      	orrs	r3, r2
 800239e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023a0:	4b29      	ldr	r3, [pc, #164]	; (8002448 <HAL_RCC_ClockConfig+0x1b0>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0307 	and.w	r3, r3, #7
 80023a8:	683a      	ldr	r2, [r7, #0]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d210      	bcs.n	80023d0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ae:	4b26      	ldr	r3, [pc, #152]	; (8002448 <HAL_RCC_ClockConfig+0x1b0>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f023 0207 	bic.w	r2, r3, #7
 80023b6:	4924      	ldr	r1, [pc, #144]	; (8002448 <HAL_RCC_ClockConfig+0x1b0>)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023be:	4b22      	ldr	r3, [pc, #136]	; (8002448 <HAL_RCC_ClockConfig+0x1b0>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0307 	and.w	r3, r3, #7
 80023c6:	683a      	ldr	r2, [r7, #0]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d001      	beq.n	80023d0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e036      	b.n	800243e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0304 	and.w	r3, r3, #4
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d008      	beq.n	80023ee <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023dc:	4b1b      	ldr	r3, [pc, #108]	; (800244c <HAL_RCC_ClockConfig+0x1b4>)
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	4918      	ldr	r1, [pc, #96]	; (800244c <HAL_RCC_ClockConfig+0x1b4>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0308 	and.w	r3, r3, #8
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d009      	beq.n	800240e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023fa:	4b14      	ldr	r3, [pc, #80]	; (800244c <HAL_RCC_ClockConfig+0x1b4>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	691b      	ldr	r3, [r3, #16]
 8002406:	00db      	lsls	r3, r3, #3
 8002408:	4910      	ldr	r1, [pc, #64]	; (800244c <HAL_RCC_ClockConfig+0x1b4>)
 800240a:	4313      	orrs	r3, r2
 800240c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800240e:	f000 f825 	bl	800245c <HAL_RCC_GetSysClockFreq>
 8002412:	4601      	mov	r1, r0
 8002414:	4b0d      	ldr	r3, [pc, #52]	; (800244c <HAL_RCC_ClockConfig+0x1b4>)
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	091b      	lsrs	r3, r3, #4
 800241a:	f003 030f 	and.w	r3, r3, #15
 800241e:	4a0c      	ldr	r2, [pc, #48]	; (8002450 <HAL_RCC_ClockConfig+0x1b8>)
 8002420:	5cd3      	ldrb	r3, [r2, r3]
 8002422:	f003 031f 	and.w	r3, r3, #31
 8002426:	fa21 f303 	lsr.w	r3, r1, r3
 800242a:	4a0a      	ldr	r2, [pc, #40]	; (8002454 <HAL_RCC_ClockConfig+0x1bc>)
 800242c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800242e:	4b0a      	ldr	r3, [pc, #40]	; (8002458 <HAL_RCC_ClockConfig+0x1c0>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4618      	mov	r0, r3
 8002434:	f7fd fee0 	bl	80001f8 <HAL_InitTick>
 8002438:	4603      	mov	r3, r0
 800243a:	72fb      	strb	r3, [r7, #11]

  return status;
 800243c:	7afb      	ldrb	r3, [r7, #11]
}
 800243e:	4618      	mov	r0, r3
 8002440:	3710      	adds	r7, #16
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	40022000 	.word	0x40022000
 800244c:	40021000 	.word	0x40021000
 8002450:	08003e04 	.word	0x08003e04
 8002454:	20000014 	.word	0x20000014
 8002458:	20000000 	.word	0x20000000

0800245c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800245c:	b480      	push	{r7}
 800245e:	b089      	sub	sp, #36	; 0x24
 8002460:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002462:	2300      	movs	r3, #0
 8002464:	61fb      	str	r3, [r7, #28]
 8002466:	2300      	movs	r3, #0
 8002468:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800246a:	4b3d      	ldr	r3, [pc, #244]	; (8002560 <HAL_RCC_GetSysClockFreq+0x104>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f003 030c 	and.w	r3, r3, #12
 8002472:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002474:	4b3a      	ldr	r3, [pc, #232]	; (8002560 <HAL_RCC_GetSysClockFreq+0x104>)
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	f003 0303 	and.w	r3, r3, #3
 800247c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d005      	beq.n	8002490 <HAL_RCC_GetSysClockFreq+0x34>
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	2b0c      	cmp	r3, #12
 8002488:	d121      	bne.n	80024ce <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2b01      	cmp	r3, #1
 800248e:	d11e      	bne.n	80024ce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002490:	4b33      	ldr	r3, [pc, #204]	; (8002560 <HAL_RCC_GetSysClockFreq+0x104>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0308 	and.w	r3, r3, #8
 8002498:	2b00      	cmp	r3, #0
 800249a:	d107      	bne.n	80024ac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800249c:	4b30      	ldr	r3, [pc, #192]	; (8002560 <HAL_RCC_GetSysClockFreq+0x104>)
 800249e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024a2:	0a1b      	lsrs	r3, r3, #8
 80024a4:	f003 030f 	and.w	r3, r3, #15
 80024a8:	61fb      	str	r3, [r7, #28]
 80024aa:	e005      	b.n	80024b8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80024ac:	4b2c      	ldr	r3, [pc, #176]	; (8002560 <HAL_RCC_GetSysClockFreq+0x104>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	091b      	lsrs	r3, r3, #4
 80024b2:	f003 030f 	and.w	r3, r3, #15
 80024b6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80024b8:	4a2a      	ldr	r2, [pc, #168]	; (8002564 <HAL_RCC_GetSysClockFreq+0x108>)
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024c0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d10d      	bne.n	80024e4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024cc:	e00a      	b.n	80024e4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	2b04      	cmp	r3, #4
 80024d2:	d102      	bne.n	80024da <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80024d4:	4b24      	ldr	r3, [pc, #144]	; (8002568 <HAL_RCC_GetSysClockFreq+0x10c>)
 80024d6:	61bb      	str	r3, [r7, #24]
 80024d8:	e004      	b.n	80024e4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	2b08      	cmp	r3, #8
 80024de:	d101      	bne.n	80024e4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80024e0:	4b22      	ldr	r3, [pc, #136]	; (800256c <HAL_RCC_GetSysClockFreq+0x110>)
 80024e2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	2b0c      	cmp	r3, #12
 80024e8:	d133      	bne.n	8002552 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80024ea:	4b1d      	ldr	r3, [pc, #116]	; (8002560 <HAL_RCC_GetSysClockFreq+0x104>)
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	f003 0303 	and.w	r3, r3, #3
 80024f2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d002      	beq.n	8002500 <HAL_RCC_GetSysClockFreq+0xa4>
 80024fa:	2b03      	cmp	r3, #3
 80024fc:	d003      	beq.n	8002506 <HAL_RCC_GetSysClockFreq+0xaa>
 80024fe:	e005      	b.n	800250c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002500:	4b19      	ldr	r3, [pc, #100]	; (8002568 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002502:	617b      	str	r3, [r7, #20]
      break;
 8002504:	e005      	b.n	8002512 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002506:	4b19      	ldr	r3, [pc, #100]	; (800256c <HAL_RCC_GetSysClockFreq+0x110>)
 8002508:	617b      	str	r3, [r7, #20]
      break;
 800250a:	e002      	b.n	8002512 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	617b      	str	r3, [r7, #20]
      break;
 8002510:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002512:	4b13      	ldr	r3, [pc, #76]	; (8002560 <HAL_RCC_GetSysClockFreq+0x104>)
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	091b      	lsrs	r3, r3, #4
 8002518:	f003 0307 	and.w	r3, r3, #7
 800251c:	3301      	adds	r3, #1
 800251e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002520:	4b0f      	ldr	r3, [pc, #60]	; (8002560 <HAL_RCC_GetSysClockFreq+0x104>)
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	0a1b      	lsrs	r3, r3, #8
 8002526:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800252a:	697a      	ldr	r2, [r7, #20]
 800252c:	fb02 f203 	mul.w	r2, r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	fbb2 f3f3 	udiv	r3, r2, r3
 8002536:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002538:	4b09      	ldr	r3, [pc, #36]	; (8002560 <HAL_RCC_GetSysClockFreq+0x104>)
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	0e5b      	lsrs	r3, r3, #25
 800253e:	f003 0303 	and.w	r3, r3, #3
 8002542:	3301      	adds	r3, #1
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002548:	697a      	ldr	r2, [r7, #20]
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002550:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002552:	69bb      	ldr	r3, [r7, #24]
}
 8002554:	4618      	mov	r0, r3
 8002556:	3724      	adds	r7, #36	; 0x24
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr
 8002560:	40021000 	.word	0x40021000
 8002564:	08003e14 	.word	0x08003e14
 8002568:	00f42400 	.word	0x00f42400
 800256c:	007a1200 	.word	0x007a1200

08002570 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b086      	sub	sp, #24
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002578:	2300      	movs	r3, #0
 800257a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800257c:	4b2a      	ldr	r3, [pc, #168]	; (8002628 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800257e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d003      	beq.n	8002590 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002588:	f7fe fd5c 	bl	8001044 <HAL_PWREx_GetVoltageRange>
 800258c:	6178      	str	r0, [r7, #20]
 800258e:	e014      	b.n	80025ba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002590:	4b25      	ldr	r3, [pc, #148]	; (8002628 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002594:	4a24      	ldr	r2, [pc, #144]	; (8002628 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002596:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800259a:	6593      	str	r3, [r2, #88]	; 0x58
 800259c:	4b22      	ldr	r3, [pc, #136]	; (8002628 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800259e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025a4:	60fb      	str	r3, [r7, #12]
 80025a6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80025a8:	f7fe fd4c 	bl	8001044 <HAL_PWREx_GetVoltageRange>
 80025ac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80025ae:	4b1e      	ldr	r3, [pc, #120]	; (8002628 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025b2:	4a1d      	ldr	r2, [pc, #116]	; (8002628 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025b8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025c0:	d10b      	bne.n	80025da <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2b80      	cmp	r3, #128	; 0x80
 80025c6:	d919      	bls.n	80025fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2ba0      	cmp	r3, #160	; 0xa0
 80025cc:	d902      	bls.n	80025d4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80025ce:	2302      	movs	r3, #2
 80025d0:	613b      	str	r3, [r7, #16]
 80025d2:	e013      	b.n	80025fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80025d4:	2301      	movs	r3, #1
 80025d6:	613b      	str	r3, [r7, #16]
 80025d8:	e010      	b.n	80025fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2b80      	cmp	r3, #128	; 0x80
 80025de:	d902      	bls.n	80025e6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80025e0:	2303      	movs	r3, #3
 80025e2:	613b      	str	r3, [r7, #16]
 80025e4:	e00a      	b.n	80025fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2b80      	cmp	r3, #128	; 0x80
 80025ea:	d102      	bne.n	80025f2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80025ec:	2302      	movs	r3, #2
 80025ee:	613b      	str	r3, [r7, #16]
 80025f0:	e004      	b.n	80025fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2b70      	cmp	r3, #112	; 0x70
 80025f6:	d101      	bne.n	80025fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80025f8:	2301      	movs	r3, #1
 80025fa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80025fc:	4b0b      	ldr	r3, [pc, #44]	; (800262c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f023 0207 	bic.w	r2, r3, #7
 8002604:	4909      	ldr	r1, [pc, #36]	; (800262c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	4313      	orrs	r3, r2
 800260a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800260c:	4b07      	ldr	r3, [pc, #28]	; (800262c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0307 	and.w	r3, r3, #7
 8002614:	693a      	ldr	r2, [r7, #16]
 8002616:	429a      	cmp	r2, r3
 8002618:	d001      	beq.n	800261e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e000      	b.n	8002620 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800261e:	2300      	movs	r3, #0
}
 8002620:	4618      	mov	r0, r3
 8002622:	3718      	adds	r7, #24
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	40021000 	.word	0x40021000
 800262c:	40022000 	.word	0x40022000

08002630 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d101      	bne.n	8002642 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e049      	b.n	80026d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b00      	cmp	r3, #0
 800264c:	d106      	bne.n	800265c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f001 fad6 	bl	8003c08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2202      	movs	r2, #2
 8002660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	3304      	adds	r3, #4
 800266c:	4619      	mov	r1, r3
 800266e:	4610      	mov	r0, r2
 8002670:	f000 fa40 	bl	8002af4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80026de:	b580      	push	{r7, lr}
 80026e0:	b082      	sub	sp, #8
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	691b      	ldr	r3, [r3, #16]
 80026ec:	f003 0302 	and.w	r3, r3, #2
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d122      	bne.n	800273a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d11b      	bne.n	800273a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f06f 0202 	mvn.w	r2, #2
 800270a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2201      	movs	r2, #1
 8002710:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	f003 0303 	and.w	r3, r3, #3
 800271c:	2b00      	cmp	r3, #0
 800271e:	d003      	beq.n	8002728 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f000 f9c8 	bl	8002ab6 <HAL_TIM_IC_CaptureCallback>
 8002726:	e005      	b.n	8002734 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f000 f9ba 	bl	8002aa2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f000 f9cb 	bl	8002aca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	691b      	ldr	r3, [r3, #16]
 8002740:	f003 0304 	and.w	r3, r3, #4
 8002744:	2b04      	cmp	r3, #4
 8002746:	d122      	bne.n	800278e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	f003 0304 	and.w	r3, r3, #4
 8002752:	2b04      	cmp	r3, #4
 8002754:	d11b      	bne.n	800278e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f06f 0204 	mvn.w	r2, #4
 800275e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2202      	movs	r2, #2
 8002764:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	699b      	ldr	r3, [r3, #24]
 800276c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002770:	2b00      	cmp	r3, #0
 8002772:	d003      	beq.n	800277c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f000 f99e 	bl	8002ab6 <HAL_TIM_IC_CaptureCallback>
 800277a:	e005      	b.n	8002788 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f000 f990 	bl	8002aa2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f000 f9a1 	bl	8002aca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	691b      	ldr	r3, [r3, #16]
 8002794:	f003 0308 	and.w	r3, r3, #8
 8002798:	2b08      	cmp	r3, #8
 800279a:	d122      	bne.n	80027e2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	f003 0308 	and.w	r3, r3, #8
 80027a6:	2b08      	cmp	r3, #8
 80027a8:	d11b      	bne.n	80027e2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f06f 0208 	mvn.w	r2, #8
 80027b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2204      	movs	r2, #4
 80027b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	69db      	ldr	r3, [r3, #28]
 80027c0:	f003 0303 	and.w	r3, r3, #3
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d003      	beq.n	80027d0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f000 f974 	bl	8002ab6 <HAL_TIM_IC_CaptureCallback>
 80027ce:	e005      	b.n	80027dc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f000 f966 	bl	8002aa2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f000 f977 	bl	8002aca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	691b      	ldr	r3, [r3, #16]
 80027e8:	f003 0310 	and.w	r3, r3, #16
 80027ec:	2b10      	cmp	r3, #16
 80027ee:	d122      	bne.n	8002836 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	f003 0310 	and.w	r3, r3, #16
 80027fa:	2b10      	cmp	r3, #16
 80027fc:	d11b      	bne.n	8002836 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f06f 0210 	mvn.w	r2, #16
 8002806:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2208      	movs	r2, #8
 800280c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	69db      	ldr	r3, [r3, #28]
 8002814:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002818:	2b00      	cmp	r3, #0
 800281a:	d003      	beq.n	8002824 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f000 f94a 	bl	8002ab6 <HAL_TIM_IC_CaptureCallback>
 8002822:	e005      	b.n	8002830 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f000 f93c 	bl	8002aa2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f000 f94d 	bl	8002aca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	691b      	ldr	r3, [r3, #16]
 800283c:	f003 0301 	and.w	r3, r3, #1
 8002840:	2b01      	cmp	r3, #1
 8002842:	d10e      	bne.n	8002862 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	2b01      	cmp	r3, #1
 8002850:	d107      	bne.n	8002862 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f06f 0201 	mvn.w	r2, #1
 800285a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f000 f916 	bl	8002a8e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	691b      	ldr	r3, [r3, #16]
 8002868:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800286c:	2b80      	cmp	r3, #128	; 0x80
 800286e:	d10e      	bne.n	800288e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800287a:	2b80      	cmp	r3, #128	; 0x80
 800287c:	d107      	bne.n	800288e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002886:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f000 faf9 	bl	8002e80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	691b      	ldr	r3, [r3, #16]
 8002894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002898:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800289c:	d10e      	bne.n	80028bc <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028a8:	2b80      	cmp	r3, #128	; 0x80
 80028aa:	d107      	bne.n	80028bc <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80028b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f000 faec 	bl	8002e94 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028c6:	2b40      	cmp	r3, #64	; 0x40
 80028c8:	d10e      	bne.n	80028e8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028d4:	2b40      	cmp	r3, #64	; 0x40
 80028d6:	d107      	bne.n	80028e8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80028e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f000 f8fb 	bl	8002ade <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	f003 0320 	and.w	r3, r3, #32
 80028f2:	2b20      	cmp	r3, #32
 80028f4:	d10e      	bne.n	8002914 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	f003 0320 	and.w	r3, r3, #32
 8002900:	2b20      	cmp	r3, #32
 8002902:	d107      	bne.n	8002914 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f06f 0220 	mvn.w	r2, #32
 800290c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f000 faac 	bl	8002e6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002914:	bf00      	nop
 8002916:	3708      	adds	r7, #8
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800292c:	2b01      	cmp	r3, #1
 800292e:	d101      	bne.n	8002934 <HAL_TIM_ConfigClockSource+0x18>
 8002930:	2302      	movs	r3, #2
 8002932:	e0a8      	b.n	8002a86 <HAL_TIM_ConfigClockSource+0x16a>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2202      	movs	r2, #2
 8002940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002952:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002956:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800295e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	68fa      	ldr	r2, [r7, #12]
 8002966:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2b40      	cmp	r3, #64	; 0x40
 800296e:	d067      	beq.n	8002a40 <HAL_TIM_ConfigClockSource+0x124>
 8002970:	2b40      	cmp	r3, #64	; 0x40
 8002972:	d80b      	bhi.n	800298c <HAL_TIM_ConfigClockSource+0x70>
 8002974:	2b10      	cmp	r3, #16
 8002976:	d073      	beq.n	8002a60 <HAL_TIM_ConfigClockSource+0x144>
 8002978:	2b10      	cmp	r3, #16
 800297a:	d802      	bhi.n	8002982 <HAL_TIM_ConfigClockSource+0x66>
 800297c:	2b00      	cmp	r3, #0
 800297e:	d06f      	beq.n	8002a60 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002980:	e078      	b.n	8002a74 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002982:	2b20      	cmp	r3, #32
 8002984:	d06c      	beq.n	8002a60 <HAL_TIM_ConfigClockSource+0x144>
 8002986:	2b30      	cmp	r3, #48	; 0x30
 8002988:	d06a      	beq.n	8002a60 <HAL_TIM_ConfigClockSource+0x144>
      break;
 800298a:	e073      	b.n	8002a74 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800298c:	2b70      	cmp	r3, #112	; 0x70
 800298e:	d00d      	beq.n	80029ac <HAL_TIM_ConfigClockSource+0x90>
 8002990:	2b70      	cmp	r3, #112	; 0x70
 8002992:	d804      	bhi.n	800299e <HAL_TIM_ConfigClockSource+0x82>
 8002994:	2b50      	cmp	r3, #80	; 0x50
 8002996:	d033      	beq.n	8002a00 <HAL_TIM_ConfigClockSource+0xe4>
 8002998:	2b60      	cmp	r3, #96	; 0x60
 800299a:	d041      	beq.n	8002a20 <HAL_TIM_ConfigClockSource+0x104>
      break;
 800299c:	e06a      	b.n	8002a74 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800299e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029a2:	d066      	beq.n	8002a72 <HAL_TIM_ConfigClockSource+0x156>
 80029a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029a8:	d017      	beq.n	80029da <HAL_TIM_ConfigClockSource+0xbe>
      break;
 80029aa:	e063      	b.n	8002a74 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6818      	ldr	r0, [r3, #0]
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	6899      	ldr	r1, [r3, #8]
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	685a      	ldr	r2, [r3, #4]
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	f000 f9ae 	bl	8002d1c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80029ce:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	68fa      	ldr	r2, [r7, #12]
 80029d6:	609a      	str	r2, [r3, #8]
      break;
 80029d8:	e04c      	b.n	8002a74 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6818      	ldr	r0, [r3, #0]
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	6899      	ldr	r1, [r3, #8]
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	685a      	ldr	r2, [r3, #4]
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	f000 f997 	bl	8002d1c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	689a      	ldr	r2, [r3, #8]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029fc:	609a      	str	r2, [r3, #8]
      break;
 80029fe:	e039      	b.n	8002a74 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6818      	ldr	r0, [r3, #0]
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	6859      	ldr	r1, [r3, #4]
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	f000 f90b 	bl	8002c28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2150      	movs	r1, #80	; 0x50
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f000 f964 	bl	8002ce6 <TIM_ITRx_SetConfig>
      break;
 8002a1e:	e029      	b.n	8002a74 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6818      	ldr	r0, [r3, #0]
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	6859      	ldr	r1, [r3, #4]
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	f000 f92a 	bl	8002c86 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2160      	movs	r1, #96	; 0x60
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f000 f954 	bl	8002ce6 <TIM_ITRx_SetConfig>
      break;
 8002a3e:	e019      	b.n	8002a74 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6818      	ldr	r0, [r3, #0]
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	6859      	ldr	r1, [r3, #4]
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	f000 f8eb 	bl	8002c28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2140      	movs	r1, #64	; 0x40
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f000 f944 	bl	8002ce6 <TIM_ITRx_SetConfig>
      break;
 8002a5e:	e009      	b.n	8002a74 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4619      	mov	r1, r3
 8002a6a:	4610      	mov	r0, r2
 8002a6c:	f000 f93b 	bl	8002ce6 <TIM_ITRx_SetConfig>
        break;
 8002a70:	e000      	b.n	8002a74 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8002a72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3710      	adds	r7, #16
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a8e:	b480      	push	{r7}
 8002a90:	b083      	sub	sp, #12
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002a96:	bf00      	nop
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr

08002aa2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	b083      	sub	sp, #12
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002aaa:	bf00      	nop
 8002aac:	370c      	adds	r7, #12
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr

08002ab6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	b083      	sub	sp, #12
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002abe:	bf00      	nop
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr

08002aca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002aca:	b480      	push	{r7}
 8002acc:	b083      	sub	sp, #12
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ad2:	bf00      	nop
 8002ad4:	370c      	adds	r7, #12
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr

08002ade <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ade:	b480      	push	{r7}
 8002ae0:	b083      	sub	sp, #12
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ae6:	bf00      	nop
 8002ae8:	370c      	adds	r7, #12
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
	...

08002af4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b085      	sub	sp, #20
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	4a40      	ldr	r2, [pc, #256]	; (8002c08 <TIM_Base_SetConfig+0x114>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d013      	beq.n	8002b34 <TIM_Base_SetConfig+0x40>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b12:	d00f      	beq.n	8002b34 <TIM_Base_SetConfig+0x40>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	4a3d      	ldr	r2, [pc, #244]	; (8002c0c <TIM_Base_SetConfig+0x118>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d00b      	beq.n	8002b34 <TIM_Base_SetConfig+0x40>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	4a3c      	ldr	r2, [pc, #240]	; (8002c10 <TIM_Base_SetConfig+0x11c>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d007      	beq.n	8002b34 <TIM_Base_SetConfig+0x40>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	4a3b      	ldr	r2, [pc, #236]	; (8002c14 <TIM_Base_SetConfig+0x120>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d003      	beq.n	8002b34 <TIM_Base_SetConfig+0x40>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	4a3a      	ldr	r2, [pc, #232]	; (8002c18 <TIM_Base_SetConfig+0x124>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d108      	bne.n	8002b46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	68fa      	ldr	r2, [r7, #12]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a2f      	ldr	r2, [pc, #188]	; (8002c08 <TIM_Base_SetConfig+0x114>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d01f      	beq.n	8002b8e <TIM_Base_SetConfig+0x9a>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b54:	d01b      	beq.n	8002b8e <TIM_Base_SetConfig+0x9a>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a2c      	ldr	r2, [pc, #176]	; (8002c0c <TIM_Base_SetConfig+0x118>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d017      	beq.n	8002b8e <TIM_Base_SetConfig+0x9a>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a2b      	ldr	r2, [pc, #172]	; (8002c10 <TIM_Base_SetConfig+0x11c>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d013      	beq.n	8002b8e <TIM_Base_SetConfig+0x9a>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a2a      	ldr	r2, [pc, #168]	; (8002c14 <TIM_Base_SetConfig+0x120>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d00f      	beq.n	8002b8e <TIM_Base_SetConfig+0x9a>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a29      	ldr	r2, [pc, #164]	; (8002c18 <TIM_Base_SetConfig+0x124>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d00b      	beq.n	8002b8e <TIM_Base_SetConfig+0x9a>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a28      	ldr	r2, [pc, #160]	; (8002c1c <TIM_Base_SetConfig+0x128>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d007      	beq.n	8002b8e <TIM_Base_SetConfig+0x9a>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a27      	ldr	r2, [pc, #156]	; (8002c20 <TIM_Base_SetConfig+0x12c>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d003      	beq.n	8002b8e <TIM_Base_SetConfig+0x9a>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a26      	ldr	r2, [pc, #152]	; (8002c24 <TIM_Base_SetConfig+0x130>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d108      	bne.n	8002ba0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	68fa      	ldr	r2, [r7, #12]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	695b      	ldr	r3, [r3, #20]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	68fa      	ldr	r2, [r7, #12]
 8002bb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	689a      	ldr	r2, [r3, #8]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	4a10      	ldr	r2, [pc, #64]	; (8002c08 <TIM_Base_SetConfig+0x114>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d00f      	beq.n	8002bec <TIM_Base_SetConfig+0xf8>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	4a12      	ldr	r2, [pc, #72]	; (8002c18 <TIM_Base_SetConfig+0x124>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d00b      	beq.n	8002bec <TIM_Base_SetConfig+0xf8>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	4a11      	ldr	r2, [pc, #68]	; (8002c1c <TIM_Base_SetConfig+0x128>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d007      	beq.n	8002bec <TIM_Base_SetConfig+0xf8>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	4a10      	ldr	r2, [pc, #64]	; (8002c20 <TIM_Base_SetConfig+0x12c>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d003      	beq.n	8002bec <TIM_Base_SetConfig+0xf8>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	4a0f      	ldr	r2, [pc, #60]	; (8002c24 <TIM_Base_SetConfig+0x130>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d103      	bne.n	8002bf4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	691a      	ldr	r2, [r3, #16]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	615a      	str	r2, [r3, #20]
}
 8002bfa:	bf00      	nop
 8002bfc:	3714      	adds	r7, #20
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	40012c00 	.word	0x40012c00
 8002c0c:	40000400 	.word	0x40000400
 8002c10:	40000800 	.word	0x40000800
 8002c14:	40000c00 	.word	0x40000c00
 8002c18:	40013400 	.word	0x40013400
 8002c1c:	40014000 	.word	0x40014000
 8002c20:	40014400 	.word	0x40014400
 8002c24:	40014800 	.word	0x40014800

08002c28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b087      	sub	sp, #28
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6a1b      	ldr	r3, [r3, #32]
 8002c38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6a1b      	ldr	r3, [r3, #32]
 8002c3e:	f023 0201 	bic.w	r2, r3, #1
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	011b      	lsls	r3, r3, #4
 8002c58:	693a      	ldr	r2, [r7, #16]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	f023 030a 	bic.w	r3, r3, #10
 8002c64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c66:	697a      	ldr	r2, [r7, #20]
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	693a      	ldr	r2, [r7, #16]
 8002c72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	697a      	ldr	r2, [r7, #20]
 8002c78:	621a      	str	r2, [r3, #32]
}
 8002c7a:	bf00      	nop
 8002c7c:	371c      	adds	r7, #28
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr

08002c86 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c86:	b480      	push	{r7}
 8002c88:	b087      	sub	sp, #28
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	60f8      	str	r0, [r7, #12]
 8002c8e:	60b9      	str	r1, [r7, #8]
 8002c90:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6a1b      	ldr	r3, [r3, #32]
 8002c96:	f023 0210 	bic.w	r2, r3, #16
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	699b      	ldr	r3, [r3, #24]
 8002ca2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6a1b      	ldr	r3, [r3, #32]
 8002ca8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002cb0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	031b      	lsls	r3, r3, #12
 8002cb6:	697a      	ldr	r2, [r7, #20]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002cc2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	011b      	lsls	r3, r3, #4
 8002cc8:	693a      	ldr	r2, [r7, #16]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	697a      	ldr	r2, [r7, #20]
 8002cd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	693a      	ldr	r2, [r7, #16]
 8002cd8:	621a      	str	r2, [r3, #32]
}
 8002cda:	bf00      	nop
 8002cdc:	371c      	adds	r7, #28
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr

08002ce6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	b085      	sub	sp, #20
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
 8002cee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cfc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002cfe:	683a      	ldr	r2, [r7, #0]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	f043 0307 	orr.w	r3, r3, #7
 8002d08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	68fa      	ldr	r2, [r7, #12]
 8002d0e:	609a      	str	r2, [r3, #8]
}
 8002d10:	bf00      	nop
 8002d12:	3714      	adds	r7, #20
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b087      	sub	sp, #28
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	60b9      	str	r1, [r7, #8]
 8002d26:	607a      	str	r2, [r7, #4]
 8002d28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	021a      	lsls	r2, r3, #8
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	431a      	orrs	r2, r3
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	697a      	ldr	r2, [r7, #20]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	697a      	ldr	r2, [r7, #20]
 8002d4e:	609a      	str	r2, [r3, #8]
}
 8002d50:	bf00      	nop
 8002d52:	371c      	adds	r7, #28
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b085      	sub	sp, #20
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d101      	bne.n	8002d74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d70:	2302      	movs	r3, #2
 8002d72:	e068      	b.n	8002e46 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2202      	movs	r2, #2
 8002d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a2e      	ldr	r2, [pc, #184]	; (8002e54 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d004      	beq.n	8002da8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a2d      	ldr	r2, [pc, #180]	; (8002e58 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d108      	bne.n	8002dba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002dae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	68fa      	ldr	r2, [r7, #12]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dc0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	68fa      	ldr	r2, [r7, #12]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	68fa      	ldr	r2, [r7, #12]
 8002dd2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a1e      	ldr	r2, [pc, #120]	; (8002e54 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d01d      	beq.n	8002e1a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002de6:	d018      	beq.n	8002e1a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a1b      	ldr	r2, [pc, #108]	; (8002e5c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d013      	beq.n	8002e1a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a1a      	ldr	r2, [pc, #104]	; (8002e60 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d00e      	beq.n	8002e1a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a18      	ldr	r2, [pc, #96]	; (8002e64 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d009      	beq.n	8002e1a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a13      	ldr	r2, [pc, #76]	; (8002e58 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d004      	beq.n	8002e1a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a14      	ldr	r2, [pc, #80]	; (8002e68 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d10c      	bne.n	8002e34 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	68ba      	ldr	r2, [r7, #8]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	68ba      	ldr	r2, [r7, #8]
 8002e32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3714      	adds	r7, #20
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	40012c00 	.word	0x40012c00
 8002e58:	40013400 	.word	0x40013400
 8002e5c:	40000400 	.word	0x40000400
 8002e60:	40000800 	.word	0x40000800
 8002e64:	40000c00 	.word	0x40000c00
 8002e68:	40014000 	.word	0x40014000

08002e6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e74:	bf00      	nop
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e88:	bf00      	nop
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002eac:	f7fd f98c 	bl	80001c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002eb0:	f000 f838 	bl	8002f24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002eb4:	f000 f94c 	bl	8003150 <MX_GPIO_Init>
  MX_DMA_Init();
 8002eb8:	f000 f92c 	bl	8003114 <MX_DMA_Init>
  MX_DAC1_Init();
 8002ebc:	f000 f884 	bl	8002fc8 <MX_DAC1_Init>
  MX_TIM2_Init();
 8002ec0:	f000 f8da 	bl	8003078 <MX_TIM2_Init>
  MX_QUADSPI_Init();
 8002ec4:	f000 f8b2 	bl	800302c <MX_QUADSPI_Init>
  /* USER CODE BEGIN 2 */
  BSP_QSPI_Init();
 8002ec8:	f000 f9ba 	bl	8003240 <BSP_QSPI_Init>


  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8002ecc:	2201      	movs	r2, #1
 8002ece:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002ed2:	4810      	ldr	r0, [pc, #64]	; (8002f14 <main+0x6c>)
 8002ed4:	f7fe f89e 	bl	8001014 <HAL_GPIO_WritePin>

  // test
  if (BSP_QSPI_Erase_Block((uint32_t) 0x08080000) != QSPI_OK)
 8002ed8:	480f      	ldr	r0, [pc, #60]	; (8002f18 <main+0x70>)
 8002eda:	f000 fae1 	bl	80034a0 <BSP_QSPI_Erase_Block>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d001      	beq.n	8002ee8 <main+0x40>
	  Error_Handler();
 8002ee4:	f000 f99e 	bl	8003224 <Error_Handler>
  if (BSP_QSPI_Write(original, (uint32_t) 0x08080000, sizeof(original)) != QSPI_OK)
 8002ee8:	220a      	movs	r2, #10
 8002eea:	490b      	ldr	r1, [pc, #44]	; (8002f18 <main+0x70>)
 8002eec:	480b      	ldr	r0, [pc, #44]	; (8002f1c <main+0x74>)
 8002eee:	f000 fa59 	bl	80033a4 <BSP_QSPI_Write>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d001      	beq.n	8002efc <main+0x54>
	  Error_Handler();
 8002ef8:	f000 f994 	bl	8003224 <Error_Handler>
  if (BSP_QSPI_Read(copy, (uint32_t) 0x08080000, sizeof(original)) != QSPI_OK)
 8002efc:	220a      	movs	r2, #10
 8002efe:	4906      	ldr	r1, [pc, #24]	; (8002f18 <main+0x70>)
 8002f00:	4807      	ldr	r0, [pc, #28]	; (8002f20 <main+0x78>)
 8002f02:	f000 fa09 	bl	8003318 <BSP_QSPI_Read>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d001      	beq.n	8002f10 <main+0x68>
	  Error_Handler();
 8002f0c:	f000 f98a 	bl	8003224 <Error_Handler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002f10:	e7fe      	b.n	8002f10 <main+0x68>
 8002f12:	bf00      	nop
 8002f14:	48000400 	.word	0x48000400
 8002f18:	08080000 	.word	0x08080000
 8002f1c:	20000008 	.word	0x20000008
 8002f20:	2000004c 	.word	0x2000004c

08002f24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b096      	sub	sp, #88	; 0x58
 8002f28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f2a:	f107 0314 	add.w	r3, r7, #20
 8002f2e:	2244      	movs	r2, #68	; 0x44
 8002f30:	2100      	movs	r1, #0
 8002f32:	4618      	mov	r0, r3
 8002f34:	f000 ff52 	bl	8003ddc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f38:	463b      	mov	r3, r7
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	601a      	str	r2, [r3, #0]
 8002f3e:	605a      	str	r2, [r3, #4]
 8002f40:	609a      	str	r2, [r3, #8]
 8002f42:	60da      	str	r2, [r3, #12]
 8002f44:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002f46:	2310      	movs	r3, #16
 8002f48:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002f52:	2360      	movs	r3, #96	; 0x60
 8002f54:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f56:	2302      	movs	r3, #2
 8002f58:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8002f62:	2328      	movs	r3, #40	; 0x28
 8002f64:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002f66:	2307      	movs	r3, #7
 8002f68:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002f6a:	2302      	movs	r3, #2
 8002f6c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002f6e:	2302      	movs	r3, #2
 8002f70:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f72:	f107 0314 	add.w	r3, r7, #20
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7fe fda8 	bl	8001acc <HAL_RCC_OscConfig>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8002f82:	f000 f94f 	bl	8003224 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f86:	230f      	movs	r3, #15
 8002f88:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002f92:	2300      	movs	r3, #0
 8002f94:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002f96:	2300      	movs	r3, #0
 8002f98:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002f9a:	463b      	mov	r3, r7
 8002f9c:	2104      	movs	r1, #4
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7ff f97a 	bl	8002298 <HAL_RCC_ClockConfig>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d001      	beq.n	8002fae <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8002faa:	f000 f93b 	bl	8003224 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002fae:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002fb2:	f7fe f855 	bl	8001060 <HAL_PWREx_ControlVoltageScaling>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d001      	beq.n	8002fc0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8002fbc:	f000 f932 	bl	8003224 <Error_Handler>
  }
}
 8002fc0:	bf00      	nop
 8002fc2:	3758      	adds	r7, #88	; 0x58
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b08a      	sub	sp, #40	; 0x28
 8002fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002fce:	1d3b      	adds	r3, r7, #4
 8002fd0:	2224      	movs	r2, #36	; 0x24
 8002fd2:	2100      	movs	r1, #0
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f000 ff01 	bl	8003ddc <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8002fda:	4b12      	ldr	r3, [pc, #72]	; (8003024 <MX_DAC1_Init+0x5c>)
 8002fdc:	4a12      	ldr	r2, [pc, #72]	; (8003028 <MX_DAC1_Init+0x60>)
 8002fde:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8002fe0:	4810      	ldr	r0, [pc, #64]	; (8003024 <MX_DAC1_Init+0x5c>)
 8002fe2:	f7fd fa98 	bl	8000516 <HAL_DAC_Init>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d001      	beq.n	8002ff0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8002fec:	f000 f91a 	bl	8003224 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8002ff4:	2324      	movs	r3, #36	; 0x24
 8002ff6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8003000:	2300      	movs	r3, #0
 8003002:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003004:	1d3b      	adds	r3, r7, #4
 8003006:	2200      	movs	r2, #0
 8003008:	4619      	mov	r1, r3
 800300a:	4806      	ldr	r0, [pc, #24]	; (8003024 <MX_DAC1_Init+0x5c>)
 800300c:	f7fd faa5 	bl	800055a <HAL_DAC_ConfigChannel>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d001      	beq.n	800301a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8003016:	f000 f905 	bl	8003224 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800301a:	bf00      	nop
 800301c:	3728      	adds	r7, #40	; 0x28
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	20000038 	.word	0x20000038
 8003028:	40007400 	.word	0x40007400

0800302c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8003030:	4b0f      	ldr	r3, [pc, #60]	; (8003070 <MX_QUADSPI_Init+0x44>)
 8003032:	4a10      	ldr	r2, [pc, #64]	; (8003074 <MX_QUADSPI_Init+0x48>)
 8003034:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8003036:	4b0e      	ldr	r3, [pc, #56]	; (8003070 <MX_QUADSPI_Init+0x44>)
 8003038:	22ff      	movs	r2, #255	; 0xff
 800303a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 800303c:	4b0c      	ldr	r3, [pc, #48]	; (8003070 <MX_QUADSPI_Init+0x44>)
 800303e:	2201      	movs	r2, #1
 8003040:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8003042:	4b0b      	ldr	r3, [pc, #44]	; (8003070 <MX_QUADSPI_Init+0x44>)
 8003044:	2200      	movs	r2, #0
 8003046:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8003048:	4b09      	ldr	r3, [pc, #36]	; (8003070 <MX_QUADSPI_Init+0x44>)
 800304a:	2201      	movs	r2, #1
 800304c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800304e:	4b08      	ldr	r3, [pc, #32]	; (8003070 <MX_QUADSPI_Init+0x44>)
 8003050:	2200      	movs	r2, #0
 8003052:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8003054:	4b06      	ldr	r3, [pc, #24]	; (8003070 <MX_QUADSPI_Init+0x44>)
 8003056:	2200      	movs	r2, #0
 8003058:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800305a:	4805      	ldr	r0, [pc, #20]	; (8003070 <MX_QUADSPI_Init+0x44>)
 800305c:	f7fe f856 	bl	800110c <HAL_QSPI_Init>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d001      	beq.n	800306a <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8003066:	f000 f8dd 	bl	8003224 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800306a:	bf00      	nop
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	200000ec 	.word	0x200000ec
 8003074:	a0001000 	.word	0xa0001000

08003078 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b088      	sub	sp, #32
 800307c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800307e:	f107 0310 	add.w	r3, r7, #16
 8003082:	2200      	movs	r2, #0
 8003084:	601a      	str	r2, [r3, #0]
 8003086:	605a      	str	r2, [r3, #4]
 8003088:	609a      	str	r2, [r3, #8]
 800308a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800308c:	1d3b      	adds	r3, r7, #4
 800308e:	2200      	movs	r2, #0
 8003090:	601a      	str	r2, [r3, #0]
 8003092:	605a      	str	r2, [r3, #4]
 8003094:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003096:	4b1e      	ldr	r3, [pc, #120]	; (8003110 <MX_TIM2_Init+0x98>)
 8003098:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800309c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800309e:	4b1c      	ldr	r3, [pc, #112]	; (8003110 <MX_TIM2_Init+0x98>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030a4:	4b1a      	ldr	r3, [pc, #104]	; (8003110 <MX_TIM2_Init+0x98>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1815;
 80030aa:	4b19      	ldr	r3, [pc, #100]	; (8003110 <MX_TIM2_Init+0x98>)
 80030ac:	f240 7217 	movw	r2, #1815	; 0x717
 80030b0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030b2:	4b17      	ldr	r3, [pc, #92]	; (8003110 <MX_TIM2_Init+0x98>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030b8:	4b15      	ldr	r3, [pc, #84]	; (8003110 <MX_TIM2_Init+0x98>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80030be:	4814      	ldr	r0, [pc, #80]	; (8003110 <MX_TIM2_Init+0x98>)
 80030c0:	f7ff fab6 	bl	8002630 <HAL_TIM_Base_Init>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d001      	beq.n	80030ce <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80030ca:	f000 f8ab 	bl	8003224 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030d2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80030d4:	f107 0310 	add.w	r3, r7, #16
 80030d8:	4619      	mov	r1, r3
 80030da:	480d      	ldr	r0, [pc, #52]	; (8003110 <MX_TIM2_Init+0x98>)
 80030dc:	f7ff fc1e 	bl	800291c <HAL_TIM_ConfigClockSource>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80030e6:	f000 f89d 	bl	8003224 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80030ea:	2320      	movs	r3, #32
 80030ec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030ee:	2300      	movs	r3, #0
 80030f0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80030f2:	1d3b      	adds	r3, r7, #4
 80030f4:	4619      	mov	r1, r3
 80030f6:	4806      	ldr	r0, [pc, #24]	; (8003110 <MX_TIM2_Init+0x98>)
 80030f8:	f7ff fe30 	bl	8002d5c <HAL_TIMEx_MasterConfigSynchronization>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d001      	beq.n	8003106 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8003102:	f000 f88f 	bl	8003224 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003106:	bf00      	nop
 8003108:	3720      	adds	r7, #32
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	200000a0 	.word	0x200000a0

08003114 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800311a:	4b0c      	ldr	r3, [pc, #48]	; (800314c <MX_DMA_Init+0x38>)
 800311c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800311e:	4a0b      	ldr	r2, [pc, #44]	; (800314c <MX_DMA_Init+0x38>)
 8003120:	f043 0301 	orr.w	r3, r3, #1
 8003124:	6493      	str	r3, [r2, #72]	; 0x48
 8003126:	4b09      	ldr	r3, [pc, #36]	; (800314c <MX_DMA_Init+0x38>)
 8003128:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800312a:	f003 0301 	and.w	r3, r3, #1
 800312e:	607b      	str	r3, [r7, #4]
 8003130:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8003132:	2200      	movs	r2, #0
 8003134:	2100      	movs	r1, #0
 8003136:	200d      	movs	r0, #13
 8003138:	f7fd f9b7 	bl	80004aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800313c:	200d      	movs	r0, #13
 800313e:	f7fd f9d0 	bl	80004e2 <HAL_NVIC_EnableIRQ>

}
 8003142:	bf00      	nop
 8003144:	3708      	adds	r7, #8
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	40021000 	.word	0x40021000

08003150 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b08a      	sub	sp, #40	; 0x28
 8003154:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003156:	f107 0314 	add.w	r3, r7, #20
 800315a:	2200      	movs	r2, #0
 800315c:	601a      	str	r2, [r3, #0]
 800315e:	605a      	str	r2, [r3, #4]
 8003160:	609a      	str	r2, [r3, #8]
 8003162:	60da      	str	r2, [r3, #12]
 8003164:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003166:	4b2b      	ldr	r3, [pc, #172]	; (8003214 <MX_GPIO_Init+0xc4>)
 8003168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800316a:	4a2a      	ldr	r2, [pc, #168]	; (8003214 <MX_GPIO_Init+0xc4>)
 800316c:	f043 0304 	orr.w	r3, r3, #4
 8003170:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003172:	4b28      	ldr	r3, [pc, #160]	; (8003214 <MX_GPIO_Init+0xc4>)
 8003174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003176:	f003 0304 	and.w	r3, r3, #4
 800317a:	613b      	str	r3, [r7, #16]
 800317c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800317e:	4b25      	ldr	r3, [pc, #148]	; (8003214 <MX_GPIO_Init+0xc4>)
 8003180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003182:	4a24      	ldr	r2, [pc, #144]	; (8003214 <MX_GPIO_Init+0xc4>)
 8003184:	f043 0301 	orr.w	r3, r3, #1
 8003188:	64d3      	str	r3, [r2, #76]	; 0x4c
 800318a:	4b22      	ldr	r3, [pc, #136]	; (8003214 <MX_GPIO_Init+0xc4>)
 800318c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	60fb      	str	r3, [r7, #12]
 8003194:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003196:	4b1f      	ldr	r3, [pc, #124]	; (8003214 <MX_GPIO_Init+0xc4>)
 8003198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800319a:	4a1e      	ldr	r2, [pc, #120]	; (8003214 <MX_GPIO_Init+0xc4>)
 800319c:	f043 0310 	orr.w	r3, r3, #16
 80031a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80031a2:	4b1c      	ldr	r3, [pc, #112]	; (8003214 <MX_GPIO_Init+0xc4>)
 80031a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031a6:	f003 0310 	and.w	r3, r3, #16
 80031aa:	60bb      	str	r3, [r7, #8]
 80031ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80031ae:	4b19      	ldr	r3, [pc, #100]	; (8003214 <MX_GPIO_Init+0xc4>)
 80031b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031b2:	4a18      	ldr	r2, [pc, #96]	; (8003214 <MX_GPIO_Init+0xc4>)
 80031b4:	f043 0302 	orr.w	r3, r3, #2
 80031b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80031ba:	4b16      	ldr	r3, [pc, #88]	; (8003214 <MX_GPIO_Init+0xc4>)
 80031bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031be:	f003 0302 	and.w	r3, r3, #2
 80031c2:	607b      	str	r3, [r7, #4]
 80031c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80031c6:	2200      	movs	r2, #0
 80031c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80031cc:	4812      	ldr	r0, [pc, #72]	; (8003218 <MX_GPIO_Init+0xc8>)
 80031ce:	f7fd ff21 	bl	8001014 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80031d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80031d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80031d8:	4b10      	ldr	r3, [pc, #64]	; (800321c <MX_GPIO_Init+0xcc>)
 80031da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031dc:	2300      	movs	r3, #0
 80031de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80031e0:	f107 0314 	add.w	r3, r7, #20
 80031e4:	4619      	mov	r1, r3
 80031e6:	480e      	ldr	r0, [pc, #56]	; (8003220 <MX_GPIO_Init+0xd0>)
 80031e8:	f7fd fc78 	bl	8000adc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80031ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80031f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031f2:	2301      	movs	r3, #1
 80031f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f6:	2300      	movs	r3, #0
 80031f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031fa:	2300      	movs	r3, #0
 80031fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80031fe:	f107 0314 	add.w	r3, r7, #20
 8003202:	4619      	mov	r1, r3
 8003204:	4804      	ldr	r0, [pc, #16]	; (8003218 <MX_GPIO_Init+0xc8>)
 8003206:	f7fd fc69 	bl	8000adc <HAL_GPIO_Init>

}
 800320a:	bf00      	nop
 800320c:	3728      	adds	r7, #40	; 0x28
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	40021000 	.word	0x40021000
 8003218:	48000400 	.word	0x48000400
 800321c:	10110000 	.word	0x10110000
 8003220:	48000800 	.word	0x48000800

08003224 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003228:	2200      	movs	r2, #0
 800322a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800322e:	4803      	ldr	r0, [pc, #12]	; (800323c <Error_Handler+0x18>)
 8003230:	f7fd fef0 	bl	8001014 <HAL_GPIO_WritePin>
	__BKPT();
 8003234:	be00      	bkpt	0x0000
  /* USER CODE END Error_Handler_Debug */
}
 8003236:	bf00      	nop
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	48000400 	.word	0x48000400

08003240 <BSP_QSPI_Init>:
/**
  * @brief  Initializes the QSPI interface.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Init(void)
{ 
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
  QSPIHandle.Instance = QUADSPI;
 8003246:	4b32      	ldr	r3, [pc, #200]	; (8003310 <BSP_QSPI_Init+0xd0>)
 8003248:	4a32      	ldr	r2, [pc, #200]	; (8003314 <BSP_QSPI_Init+0xd4>)
 800324a:	601a      	str	r2, [r3, #0]

  /* Call the DeInit function to reset the driver */
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 800324c:	4830      	ldr	r0, [pc, #192]	; (8003310 <BSP_QSPI_Init+0xd0>)
 800324e:	f7fd ffd3 	bl	80011f8 <HAL_QSPI_DeInit>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d001      	beq.n	800325c <BSP_QSPI_Init+0x1c>
  {
    return QSPI_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e054      	b.n	8003306 <BSP_QSPI_Init+0xc6>
  }
        
  /* System level initialization */
  BSP_QSPI_MspInit();
 800325c:	f000 f964 	bl	8003528 <BSP_QSPI_MspInit>
  
  /* QSPI initialization */
  QSPIHandle.Init.ClockPrescaler     = 2; /* QSPI clock = 80MHz / (ClockPrescaler+1) = 26.67MHz */
 8003260:	4b2b      	ldr	r3, [pc, #172]	; (8003310 <BSP_QSPI_Init+0xd0>)
 8003262:	2202      	movs	r2, #2
 8003264:	605a      	str	r2, [r3, #4]
  QSPIHandle.Init.FifoThreshold      = 4;
 8003266:	4b2a      	ldr	r3, [pc, #168]	; (8003310 <BSP_QSPI_Init+0xd0>)
 8003268:	2204      	movs	r2, #4
 800326a:	609a      	str	r2, [r3, #8]
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800326c:	4b28      	ldr	r3, [pc, #160]	; (8003310 <BSP_QSPI_Init+0xd0>)
 800326e:	2210      	movs	r2, #16
 8003270:	60da      	str	r2, [r3, #12]
 8003272:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8003276:	60bb      	str	r3, [r7, #8]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	fa93 f3a3 	rbit	r3, r3
 800327e:	607b      	str	r3, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	60fb      	str	r3, [r7, #12]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d101      	bne.n	800328e <BSP_QSPI_Init+0x4e>
  {
    return 32U;
 800328a:	2320      	movs	r3, #32
 800328c:	e003      	b.n	8003296 <BSP_QSPI_Init+0x56>
  }
  return __builtin_clz(value);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	fab3 f383 	clz	r3, r3
 8003294:	b2db      	uxtb	r3, r3
  QSPIHandle.Init.FlashSize          = POSITION_VAL(MX25R6435F_FLASH_SIZE) - 1;
 8003296:	3b01      	subs	r3, #1
 8003298:	461a      	mov	r2, r3
 800329a:	4b1d      	ldr	r3, [pc, #116]	; (8003310 <BSP_QSPI_Init+0xd0>)
 800329c:	611a      	str	r2, [r3, #16]
  QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800329e:	4b1c      	ldr	r3, [pc, #112]	; (8003310 <BSP_QSPI_Init+0xd0>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	615a      	str	r2, [r3, #20]
  QSPIHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 80032a4:	4b1a      	ldr	r3, [pc, #104]	; (8003310 <BSP_QSPI_Init+0xd0>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	619a      	str	r2, [r3, #24]

  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 80032aa:	4819      	ldr	r0, [pc, #100]	; (8003310 <BSP_QSPI_Init+0xd0>)
 80032ac:	f7fd ff2e 	bl	800110c <HAL_QSPI_Init>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d001      	beq.n	80032ba <BSP_QSPI_Init+0x7a>
  {
    return QSPI_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e025      	b.n	8003306 <BSP_QSPI_Init+0xc6>
  }

  /* QSPI memory reset */
  if (QSPI_ResetMemory(&QSPIHandle) != QSPI_OK)
 80032ba:	4815      	ldr	r0, [pc, #84]	; (8003310 <BSP_QSPI_Init+0xd0>)
 80032bc:	f000 f974 	bl	80035a8 <QSPI_ResetMemory>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d001      	beq.n	80032ca <BSP_QSPI_Init+0x8a>
  {
    return QSPI_NOT_SUPPORTED;
 80032c6:	2304      	movs	r3, #4
 80032c8:	e01d      	b.n	8003306 <BSP_QSPI_Init+0xc6>
  }
 
  /* QSPI quad enable */
  if (QSPI_QuadMode(&QSPIHandle, QSPI_QUAD_ENABLE) != QSPI_OK)
 80032ca:	2101      	movs	r1, #1
 80032cc:	4810      	ldr	r0, [pc, #64]	; (8003310 <BSP_QSPI_Init+0xd0>)
 80032ce:	f000 fa35 	bl	800373c <QSPI_QuadMode>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d001      	beq.n	80032dc <BSP_QSPI_Init+0x9c>
  {
    return QSPI_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e014      	b.n	8003306 <BSP_QSPI_Init+0xc6>
  }
 
  /* High performance mode enable */
  if (QSPI_HighPerfMode(&QSPIHandle, QSPI_HIGH_PERF_ENABLE) != QSPI_OK)
 80032dc:	2101      	movs	r1, #1
 80032de:	480c      	ldr	r0, [pc, #48]	; (8003310 <BSP_QSPI_Init+0xd0>)
 80032e0:	f000 fad4 	bl	800388c <QSPI_HighPerfMode>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d001      	beq.n	80032ee <BSP_QSPI_Init+0xae>
  {
    return QSPI_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e00b      	b.n	8003306 <BSP_QSPI_Init+0xc6>
  }
  
  /* Re-configure the clock for the high performance mode */
  QSPIHandle.Init.ClockPrescaler = 1; /* QSPI clock = 80MHz / (ClockPrescaler+1) = 40MHz */
 80032ee:	4b08      	ldr	r3, [pc, #32]	; (8003310 <BSP_QSPI_Init+0xd0>)
 80032f0:	2201      	movs	r2, #1
 80032f2:	605a      	str	r2, [r3, #4]

  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 80032f4:	4806      	ldr	r0, [pc, #24]	; (8003310 <BSP_QSPI_Init+0xd0>)
 80032f6:	f7fd ff09 	bl	800110c <HAL_QSPI_Init>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d001      	beq.n	8003304 <BSP_QSPI_Init+0xc4>
  {
    return QSPI_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e000      	b.n	8003306 <BSP_QSPI_Init+0xc6>
  }

  return QSPI_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3710      	adds	r7, #16
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	20000130 	.word	0x20000130
 8003314:	a0001000 	.word	0xa0001000

08003318 <BSP_QSPI_Read>:
  * @param  ReadAddr : Read start address
  * @param  Size     : Size of data to read    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b092      	sub	sp, #72	; 0x48
 800331c:	af00      	add	r7, sp, #0
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the read command */
  sCommand.InstructionMode    = QSPI_INSTRUCTION_1_LINE;
 8003324:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003328:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.Instruction        = QUAD_INOUT_READ_CMD;
 800332a:	23eb      	movs	r3, #235	; 0xeb
 800332c:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode        = QSPI_ADDRESS_4_LINES;
 800332e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003332:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AddressSize        = QSPI_ADDRESS_24_BITS;
 8003334:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003338:	61fb      	str	r3, [r7, #28]
  sCommand.Address            = ReadAddr;
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	617b      	str	r3, [r7, #20]
  sCommand.AlternateByteMode  = QSPI_ALTERNATE_BYTES_4_LINES;
 800333e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003342:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AlternateBytesSize = QSPI_ALTERNATE_BYTES_8_BITS;
 8003344:	2300      	movs	r3, #0
 8003346:	623b      	str	r3, [r7, #32]
  sCommand.AlternateBytes     = MX25R6435F_ALT_BYTES_NO_PE_MODE;
 8003348:	23aa      	movs	r3, #170	; 0xaa
 800334a:	61bb      	str	r3, [r7, #24]
  sCommand.DataMode           = QSPI_DATA_4_LINES;
 800334c:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8003350:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DummyCycles        = MX25R6435F_DUMMY_CYCLES_READ_QUAD;
 8003352:	2304      	movs	r3, #4
 8003354:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.NbData             = Size;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrMode            = QSPI_DDR_MODE_DISABLE;
 800335a:	2300      	movs	r3, #0
 800335c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DdrHoldHalfCycle   = QSPI_DDR_HHC_ANALOG_DELAY;
 800335e:	2300      	movs	r3, #0
 8003360:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.SIOOMode           = QSPI_SIOO_INST_EVERY_CMD;
 8003362:	2300      	movs	r3, #0
 8003364:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* Configure the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003366:	f107 0310 	add.w	r3, r7, #16
 800336a:	f241 3288 	movw	r2, #5000	; 0x1388
 800336e:	4619      	mov	r1, r3
 8003370:	480b      	ldr	r0, [pc, #44]	; (80033a0 <BSP_QSPI_Read+0x88>)
 8003372:	f7fd ff65 	bl	8001240 <HAL_QSPI_Command>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d001      	beq.n	8003380 <BSP_QSPI_Read+0x68>
  {
    return QSPI_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e00b      	b.n	8003398 <BSP_QSPI_Read+0x80>
  }
  
  /* Reception of the data */
  if (HAL_QSPI_Receive(&QSPIHandle, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003380:	f241 3288 	movw	r2, #5000	; 0x1388
 8003384:	68f9      	ldr	r1, [r7, #12]
 8003386:	4806      	ldr	r0, [pc, #24]	; (80033a0 <BSP_QSPI_Read+0x88>)
 8003388:	f7fe f84f 	bl	800142a <HAL_QSPI_Receive>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d001      	beq.n	8003396 <BSP_QSPI_Read+0x7e>
  {
    return QSPI_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e000      	b.n	8003398 <BSP_QSPI_Read+0x80>
  }

  return QSPI_OK;
 8003396:	2300      	movs	r3, #0
}
 8003398:	4618      	mov	r0, r3
 800339a:	3748      	adds	r7, #72	; 0x48
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	20000130 	.word	0x20000130

080033a4 <BSP_QSPI_Write>:
  * @param  WriteAddr : Write start address
  * @param  Size      : Size of data to write    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Write(uint8_t* pData, uint32_t WriteAddr, uint32_t Size)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b096      	sub	sp, #88	; 0x58
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef sCommand;
  uint32_t end_addr, current_size, current_addr;

  /* Calculation of the size between the write address and the end of the page */
  current_size = MX25R6435F_PAGE_SIZE - (WriteAddr % MX25R6435F_PAGE_SIZE);
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80033b8:	657b      	str	r3, [r7, #84]	; 0x54

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
 80033ba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	429a      	cmp	r2, r3
 80033c0:	d901      	bls.n	80033c6 <BSP_QSPI_Write+0x22>
  {
    current_size = Size;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	657b      	str	r3, [r7, #84]	; 0x54
  }

  /* Initialize the adress variables */
  current_addr = WriteAddr;
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	653b      	str	r3, [r7, #80]	; 0x50
  end_addr = WriteAddr + Size;
 80033ca:	68ba      	ldr	r2, [r7, #8]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	4413      	add	r3, r2
 80033d0:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Initialize the program command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80033d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.Instruction       = QUAD_PAGE_PROG_CMD;
 80033d8:	2338      	movs	r3, #56	; 0x38
 80033da:	617b      	str	r3, [r7, #20]
  sCommand.AddressMode       = QSPI_ADDRESS_4_LINES;
 80033dc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80033e0:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 80033e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80033e6:	623b      	str	r3, [r7, #32]
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80033e8:	2300      	movs	r3, #0
 80033ea:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode          = QSPI_DATA_4_LINES;
 80033ec:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80033f0:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DummyCycles       = 0;
 80033f2:	2300      	movs	r3, #0
 80033f4:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80033f6:	2300      	movs	r3, #0
 80033f8:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80033fa:	2300      	movs	r3, #0
 80033fc:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80033fe:	2300      	movs	r3, #0
 8003400:	64bb      	str	r3, [r7, #72]	; 0x48
  
  /* Perform the write page by page */
  do
  {
    sCommand.Address = current_addr;
 8003402:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003404:	61bb      	str	r3, [r7, #24]
    sCommand.NbData  = current_size;
 8003406:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003408:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Enable write operations */
    if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 800340a:	4824      	ldr	r0, [pc, #144]	; (800349c <BSP_QSPI_Write+0xf8>)
 800340c:	f000 f910 	bl	8003630 <QSPI_WriteEnable>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d001      	beq.n	800341a <BSP_QSPI_Write+0x76>
    {
      return QSPI_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e03b      	b.n	8003492 <BSP_QSPI_Write+0xee>
    }
    
    /* Configure the command */
    if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800341a:	f107 0314 	add.w	r3, r7, #20
 800341e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003422:	4619      	mov	r1, r3
 8003424:	481d      	ldr	r0, [pc, #116]	; (800349c <BSP_QSPI_Write+0xf8>)
 8003426:	f7fd ff0b 	bl	8001240 <HAL_QSPI_Command>
 800342a:	4603      	mov	r3, r0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d001      	beq.n	8003434 <BSP_QSPI_Write+0x90>
    {
      return QSPI_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e02e      	b.n	8003492 <BSP_QSPI_Write+0xee>
    }
    
    /* Transmission of the data */
    if (HAL_QSPI_Transmit(&QSPIHandle, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003434:	f241 3288 	movw	r2, #5000	; 0x1388
 8003438:	68f9      	ldr	r1, [r7, #12]
 800343a:	4818      	ldr	r0, [pc, #96]	; (800349c <BSP_QSPI_Write+0xf8>)
 800343c:	f7fd ff5e 	bl	80012fc <HAL_QSPI_Transmit>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <BSP_QSPI_Write+0xa6>
    {
      return QSPI_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e023      	b.n	8003492 <BSP_QSPI_Write+0xee>
    }
    
    /* Configure automatic polling mode to wait for end of program */  
    if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 800344a:	f241 3188 	movw	r1, #5000	; 0x1388
 800344e:	4813      	ldr	r0, [pc, #76]	; (800349c <BSP_QSPI_Write+0xf8>)
 8003450:	f000 f93a 	bl	80036c8 <QSPI_AutoPollingMemReady>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d001      	beq.n	800345e <BSP_QSPI_Write+0xba>
    {
      return QSPI_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e019      	b.n	8003492 <BSP_QSPI_Write+0xee>
    }
    
    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 800345e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003460:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003462:	4413      	add	r3, r2
 8003464:	653b      	str	r3, [r7, #80]	; 0x50
    pData += current_size;
 8003466:	68fa      	ldr	r2, [r7, #12]
 8003468:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800346a:	4413      	add	r3, r2
 800346c:	60fb      	str	r3, [r7, #12]
    current_size = ((current_addr + MX25R6435F_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : MX25R6435F_PAGE_SIZE;
 800346e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003470:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003474:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003476:	429a      	cmp	r2, r3
 8003478:	d203      	bcs.n	8003482 <BSP_QSPI_Write+0xde>
 800347a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800347c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	e001      	b.n	8003486 <BSP_QSPI_Write+0xe2>
 8003482:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003486:	657b      	str	r3, [r7, #84]	; 0x54
  } while (current_addr < end_addr);
 8003488:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800348a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800348c:	429a      	cmp	r2, r3
 800348e:	d3b8      	bcc.n	8003402 <BSP_QSPI_Write+0x5e>
  
  return QSPI_OK;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3758      	adds	r7, #88	; 0x58
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	20000130 	.word	0x20000130

080034a0 <BSP_QSPI_Erase_Block>:
  * @brief  Erases the specified block of the QSPI memory. 
  * @param  BlockAddress : Block address to erase  
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Erase_Block(uint32_t BlockAddress)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b090      	sub	sp, #64	; 0x40
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the erase command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80034a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034ac:	623b      	str	r3, [r7, #32]
  sCommand.Instruction       = BLOCK_ERASE_CMD;
 80034ae:	23d8      	movs	r3, #216	; 0xd8
 80034b0:	60bb      	str	r3, [r7, #8]
  sCommand.AddressMode       = QSPI_ADDRESS_1_LINE;
 80034b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034b6:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 80034b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80034bc:	617b      	str	r3, [r7, #20]
  sCommand.Address           = BlockAddress;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	60fb      	str	r3, [r7, #12]
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80034c2:	2300      	movs	r3, #0
 80034c4:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode          = QSPI_DATA_NONE;
 80034c6:	2300      	movs	r3, #0
 80034c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DummyCycles       = 0;
 80034ca:	2300      	movs	r3, #0
 80034cc:	61fb      	str	r3, [r7, #28]
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80034ce:	2300      	movs	r3, #0
 80034d0:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80034d2:	2300      	movs	r3, #0
 80034d4:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80034d6:	2300      	movs	r3, #0
 80034d8:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 80034da:	4812      	ldr	r0, [pc, #72]	; (8003524 <BSP_QSPI_Erase_Block+0x84>)
 80034dc:	f000 f8a8 	bl	8003630 <QSPI_WriteEnable>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d001      	beq.n	80034ea <BSP_QSPI_Erase_Block+0x4a>
  {
    return QSPI_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e017      	b.n	800351a <BSP_QSPI_Erase_Block+0x7a>
  }

  /* Send the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80034ea:	f107 0308 	add.w	r3, r7, #8
 80034ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80034f2:	4619      	mov	r1, r3
 80034f4:	480b      	ldr	r0, [pc, #44]	; (8003524 <BSP_QSPI_Erase_Block+0x84>)
 80034f6:	f7fd fea3 	bl	8001240 <HAL_QSPI_Command>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d001      	beq.n	8003504 <BSP_QSPI_Erase_Block+0x64>
  {
    return QSPI_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e00a      	b.n	800351a <BSP_QSPI_Erase_Block+0x7a>
  }
  
  /* Configure automatic polling mode to wait for end of erase */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, MX25R6435F_BLOCK_ERASE_MAX_TIME) != QSPI_OK)
 8003504:	f640 51ac 	movw	r1, #3500	; 0xdac
 8003508:	4806      	ldr	r0, [pc, #24]	; (8003524 <BSP_QSPI_Erase_Block+0x84>)
 800350a:	f000 f8dd 	bl	80036c8 <QSPI_AutoPollingMemReady>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d001      	beq.n	8003518 <BSP_QSPI_Erase_Block+0x78>
  {
    return QSPI_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e000      	b.n	800351a <BSP_QSPI_Erase_Block+0x7a>
  }

  return QSPI_OK;
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3740      	adds	r7, #64	; 0x40
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	20000130 	.word	0x20000130

08003528 <BSP_QSPI_MspInit>:
/**
  * @brief  Initializes the QSPI MSP.
  * @retval None
  */
__weak void BSP_QSPI_MspInit(void)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b088      	sub	sp, #32
 800352c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the QuadSPI memory interface clock */
  __HAL_RCC_QSPI_CLK_ENABLE();
 800352e:	4b1c      	ldr	r3, [pc, #112]	; (80035a0 <BSP_QSPI_MspInit+0x78>)
 8003530:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003532:	4a1b      	ldr	r2, [pc, #108]	; (80035a0 <BSP_QSPI_MspInit+0x78>)
 8003534:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003538:	6513      	str	r3, [r2, #80]	; 0x50
 800353a:	4b19      	ldr	r3, [pc, #100]	; (80035a0 <BSP_QSPI_MspInit+0x78>)
 800353c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800353e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003542:	60bb      	str	r3, [r7, #8]
 8003544:	68bb      	ldr	r3, [r7, #8]

  /* Reset the QuadSPI memory interface */
  __HAL_RCC_QSPI_FORCE_RESET();
 8003546:	4b16      	ldr	r3, [pc, #88]	; (80035a0 <BSP_QSPI_MspInit+0x78>)
 8003548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354a:	4a15      	ldr	r2, [pc, #84]	; (80035a0 <BSP_QSPI_MspInit+0x78>)
 800354c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003550:	6313      	str	r3, [r2, #48]	; 0x30
  __HAL_RCC_QSPI_RELEASE_RESET();
 8003552:	4b13      	ldr	r3, [pc, #76]	; (80035a0 <BSP_QSPI_MspInit+0x78>)
 8003554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003556:	4a12      	ldr	r2, [pc, #72]	; (80035a0 <BSP_QSPI_MspInit+0x78>)
 8003558:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800355c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable GPIO clocks */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800355e:	4b10      	ldr	r3, [pc, #64]	; (80035a0 <BSP_QSPI_MspInit+0x78>)
 8003560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003562:	4a0f      	ldr	r2, [pc, #60]	; (80035a0 <BSP_QSPI_MspInit+0x78>)
 8003564:	f043 0310 	orr.w	r3, r3, #16
 8003568:	64d3      	str	r3, [r2, #76]	; 0x4c
 800356a:	4b0d      	ldr	r3, [pc, #52]	; (80035a0 <BSP_QSPI_MspInit+0x78>)
 800356c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800356e:	f003 0310 	and.w	r3, r3, #16
 8003572:	607b      	str	r3, [r7, #4]
 8003574:	687b      	ldr	r3, [r7, #4]

  /* QSPI CLK, CS, D0, D1, D2 and D3 GPIO pins configuration  */
  GPIO_InitStruct.Pin       = GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 |\
 8003576:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800357a:	60fb      	str	r3, [r7, #12]
                              GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800357c:	2302      	movs	r3, #2
 800357e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8003580:	2300      	movs	r3, #0
 8003582:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8003584:	2303      	movs	r3, #3
 8003586:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8003588:	230a      	movs	r3, #10
 800358a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800358c:	f107 030c 	add.w	r3, r7, #12
 8003590:	4619      	mov	r1, r3
 8003592:	4804      	ldr	r0, [pc, #16]	; (80035a4 <BSP_QSPI_MspInit+0x7c>)
 8003594:	f7fd faa2 	bl	8000adc <HAL_GPIO_Init>
}
 8003598:	bf00      	nop
 800359a:	3720      	adds	r7, #32
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	40021000 	.word	0x40021000
 80035a4:	48001000 	.word	0x48001000

080035a8 <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b090      	sub	sp, #64	; 0x40
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the reset enable command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80035b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035b4:	623b      	str	r3, [r7, #32]
  sCommand.Instruction       = RESET_ENABLE_CMD;
 80035b6:	2366      	movs	r3, #102	; 0x66
 80035b8:	60bb      	str	r3, [r7, #8]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 80035ba:	2300      	movs	r3, #0
 80035bc:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80035be:	2300      	movs	r3, #0
 80035c0:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode          = QSPI_DATA_NONE;
 80035c2:	2300      	movs	r3, #0
 80035c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DummyCycles       = 0;
 80035c6:	2300      	movs	r3, #0
 80035c8:	61fb      	str	r3, [r7, #28]
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80035ca:	2300      	movs	r3, #0
 80035cc:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80035ce:	2300      	movs	r3, #0
 80035d0:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80035d2:	2300      	movs	r3, #0
 80035d4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80035d6:	f107 0308 	add.w	r3, r7, #8
 80035da:	f241 3288 	movw	r2, #5000	; 0x1388
 80035de:	4619      	mov	r1, r3
 80035e0:	4812      	ldr	r0, [pc, #72]	; (800362c <QSPI_ResetMemory+0x84>)
 80035e2:	f7fd fe2d 	bl	8001240 <HAL_QSPI_Command>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d001      	beq.n	80035f0 <QSPI_ResetMemory+0x48>
  {
    return QSPI_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e019      	b.n	8003624 <QSPI_ResetMemory+0x7c>
  }

  /* Send the reset memory command */
  sCommand.Instruction = RESET_MEMORY_CMD;
 80035f0:	2399      	movs	r3, #153	; 0x99
 80035f2:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80035f4:	f107 0308 	add.w	r3, r7, #8
 80035f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80035fc:	4619      	mov	r1, r3
 80035fe:	480b      	ldr	r0, [pc, #44]	; (800362c <QSPI_ResetMemory+0x84>)
 8003600:	f7fd fe1e 	bl	8001240 <HAL_QSPI_Command>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d001      	beq.n	800360e <QSPI_ResetMemory+0x66>
  {
    return QSPI_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e00a      	b.n	8003624 <QSPI_ResetMemory+0x7c>
  }

  /* Configure automatic polling mode to wait the memory is ready */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 800360e:	f241 3188 	movw	r1, #5000	; 0x1388
 8003612:	4806      	ldr	r0, [pc, #24]	; (800362c <QSPI_ResetMemory+0x84>)
 8003614:	f000 f858 	bl	80036c8 <QSPI_AutoPollingMemReady>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d001      	beq.n	8003622 <QSPI_ResetMemory+0x7a>
  {
    return QSPI_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e000      	b.n	8003624 <QSPI_ResetMemory+0x7c>
  }

  return QSPI_OK;
 8003622:	2300      	movs	r3, #0
}
 8003624:	4618      	mov	r0, r3
 8003626:	3740      	adds	r7, #64	; 0x40
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	20000130 	.word	0x20000130

08003630 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b096      	sub	sp, #88	; 0x58
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     sCommand;
  QSPI_AutoPollingTypeDef sConfig;

  /* Enable write operations */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003638:	f44f 7380 	mov.w	r3, #256	; 0x100
 800363c:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.Instruction       = WRITE_ENABLE_CMD;
 800363e:	2306      	movs	r3, #6
 8003640:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8003642:	2300      	movs	r3, #0
 8003644:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003646:	2300      	movs	r3, #0
 8003648:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode          = QSPI_DATA_NONE;
 800364a:	2300      	movs	r3, #0
 800364c:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles       = 0;
 800364e:	2300      	movs	r3, #0
 8003650:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003652:	2300      	movs	r3, #0
 8003654:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003656:	2300      	movs	r3, #0
 8003658:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800365a:	2300      	movs	r3, #0
 800365c:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800365e:	f107 0320 	add.w	r3, r7, #32
 8003662:	f241 3288 	movw	r2, #5000	; 0x1388
 8003666:	4619      	mov	r1, r3
 8003668:	4816      	ldr	r0, [pc, #88]	; (80036c4 <QSPI_WriteEnable+0x94>)
 800366a:	f7fd fde9 	bl	8001240 <HAL_QSPI_Command>
 800366e:	4603      	mov	r3, r0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d001      	beq.n	8003678 <QSPI_WriteEnable+0x48>
  {
    return QSPI_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e020      	b.n	80036ba <QSPI_WriteEnable+0x8a>
  }
  
  /* Configure automatic polling mode to wait for write enabling */  
  sConfig.Match           = MX25R6435F_SR_WEL;
 8003678:	2302      	movs	r3, #2
 800367a:	60bb      	str	r3, [r7, #8]
  sConfig.Mask            = MX25R6435F_SR_WEL;
 800367c:	2302      	movs	r3, #2
 800367e:	60fb      	str	r3, [r7, #12]
  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 8003680:	2300      	movs	r3, #0
 8003682:	61bb      	str	r3, [r7, #24]
  sConfig.StatusBytesSize = 1;
 8003684:	2301      	movs	r3, #1
 8003686:	617b      	str	r3, [r7, #20]
  sConfig.Interval        = 0x10;
 8003688:	2310      	movs	r3, #16
 800368a:	613b      	str	r3, [r7, #16]
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800368c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003690:	61fb      	str	r3, [r7, #28]

  sCommand.Instruction    = READ_STATUS_REG_CMD;
 8003692:	2305      	movs	r3, #5
 8003694:	623b      	str	r3, [r7, #32]
  sCommand.DataMode       = QSPI_DATA_1_LINE;
 8003696:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800369a:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_AutoPolling(&QSPIHandle, &sCommand, &sConfig, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800369c:	f107 0208 	add.w	r2, r7, #8
 80036a0:	f107 0120 	add.w	r1, r7, #32
 80036a4:	f241 3388 	movw	r3, #5000	; 0x1388
 80036a8:	4806      	ldr	r0, [pc, #24]	; (80036c4 <QSPI_WriteEnable+0x94>)
 80036aa:	f7fd ff60 	bl	800156e <HAL_QSPI_AutoPolling>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d001      	beq.n	80036b8 <QSPI_WriteEnable+0x88>
  {
    return QSPI_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e000      	b.n	80036ba <QSPI_WriteEnable+0x8a>
  }

  return QSPI_OK;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3758      	adds	r7, #88	; 0x58
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	20000130 	.word	0x20000130

080036c8 <QSPI_AutoPollingMemReady>:
  * @param  hqspi   : QSPI handle
  * @param  Timeout : Timeout for auto-polling
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b096      	sub	sp, #88	; 0x58
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef     sCommand;
  QSPI_AutoPollingTypeDef sConfig;

  /* Configure automatic polling mode to wait for memory ready */  
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80036d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036d6:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 80036d8:	2305      	movs	r3, #5
 80036da:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 80036dc:	2300      	movs	r3, #0
 80036de:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80036e0:	2300      	movs	r3, #0
 80036e2:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 80036e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80036e8:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles       = 0;
 80036ea:	2300      	movs	r3, #0
 80036ec:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80036ee:	2300      	movs	r3, #0
 80036f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80036f2:	2300      	movs	r3, #0
 80036f4:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80036f6:	2300      	movs	r3, #0
 80036f8:	657b      	str	r3, [r7, #84]	; 0x54

  sConfig.Match           = 0;
 80036fa:	2300      	movs	r3, #0
 80036fc:	60bb      	str	r3, [r7, #8]
  sConfig.Mask            = MX25R6435F_SR_WIP;
 80036fe:	2301      	movs	r3, #1
 8003700:	60fb      	str	r3, [r7, #12]
  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 8003702:	2300      	movs	r3, #0
 8003704:	61bb      	str	r3, [r7, #24]
  sConfig.StatusBytesSize = 1;
 8003706:	2301      	movs	r3, #1
 8003708:	617b      	str	r3, [r7, #20]
  sConfig.Interval        = 0x10;
 800370a:	2310      	movs	r3, #16
 800370c:	613b      	str	r3, [r7, #16]
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800370e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003712:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(&QSPIHandle, &sCommand, &sConfig, Timeout) != HAL_OK)
 8003714:	f107 0208 	add.w	r2, r7, #8
 8003718:	f107 0120 	add.w	r1, r7, #32
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	4806      	ldr	r0, [pc, #24]	; (8003738 <QSPI_AutoPollingMemReady+0x70>)
 8003720:	f7fd ff25 	bl	800156e <HAL_QSPI_AutoPolling>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d001      	beq.n	800372e <QSPI_AutoPollingMemReady+0x66>
  {
    return QSPI_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e000      	b.n	8003730 <QSPI_AutoPollingMemReady+0x68>
  }

  return QSPI_OK;
 800372e:	2300      	movs	r3, #0
}
 8003730:	4618      	mov	r0, r3
 8003732:	3758      	adds	r7, #88	; 0x58
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	20000130 	.word	0x20000130

0800373c <QSPI_QuadMode>:
  * @param  hqspi     : QSPI handle
  * @param  Operation : QSPI_QUAD_ENABLE or QSPI_QUAD_DISABLE mode  
  * @retval None
  */
static uint8_t QSPI_QuadMode(QSPI_HandleTypeDef *hqspi, uint8_t Operation)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b092      	sub	sp, #72	; 0x48
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	460b      	mov	r3, r1
 8003746:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef sCommand;
  uint8_t reg;

  /* Read status register */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003748:	f44f 7380 	mov.w	r3, #256	; 0x100
 800374c:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 800374e:	2305      	movs	r3, #5
 8003750:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8003752:	2300      	movs	r3, #0
 8003754:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003756:	2300      	movs	r3, #0
 8003758:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 800375a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800375e:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DummyCycles       = 0;
 8003760:	2300      	movs	r3, #0
 8003762:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.NbData            = 1;
 8003764:	2301      	movs	r3, #1
 8003766:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003768:	2300      	movs	r3, #0
 800376a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800376c:	2300      	movs	r3, #0
 800376e:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003770:	2300      	movs	r3, #0
 8003772:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003774:	f107 0310 	add.w	r3, r7, #16
 8003778:	f241 3288 	movw	r2, #5000	; 0x1388
 800377c:	4619      	mov	r1, r3
 800377e:	4842      	ldr	r0, [pc, #264]	; (8003888 <QSPI_QuadMode+0x14c>)
 8003780:	f7fd fd5e 	bl	8001240 <HAL_QSPI_Command>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d001      	beq.n	800378e <QSPI_QuadMode+0x52>
  {
    return QSPI_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e077      	b.n	800387e <QSPI_QuadMode+0x142>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800378e:	f107 030f 	add.w	r3, r7, #15
 8003792:	f241 3288 	movw	r2, #5000	; 0x1388
 8003796:	4619      	mov	r1, r3
 8003798:	483b      	ldr	r0, [pc, #236]	; (8003888 <QSPI_QuadMode+0x14c>)
 800379a:	f7fd fe46 	bl	800142a <HAL_QSPI_Receive>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d001      	beq.n	80037a8 <QSPI_QuadMode+0x6c>
  {
    return QSPI_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e06a      	b.n	800387e <QSPI_QuadMode+0x142>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 80037a8:	4837      	ldr	r0, [pc, #220]	; (8003888 <QSPI_QuadMode+0x14c>)
 80037aa:	f7ff ff41 	bl	8003630 <QSPI_WriteEnable>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d001      	beq.n	80037b8 <QSPI_QuadMode+0x7c>
  {
    return QSPI_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e062      	b.n	800387e <QSPI_QuadMode+0x142>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_QUAD_ENABLE)
 80037b8:	78fb      	ldrb	r3, [r7, #3]
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d105      	bne.n	80037ca <QSPI_QuadMode+0x8e>
  {
    SET_BIT(reg, MX25R6435F_SR_QE);
 80037be:	7bfb      	ldrb	r3, [r7, #15]
 80037c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	73fb      	strb	r3, [r7, #15]
 80037c8:	e004      	b.n	80037d4 <QSPI_QuadMode+0x98>
  }
  else
  {
    CLEAR_BIT(reg, MX25R6435F_SR_QE);
 80037ca:	7bfb      	ldrb	r3, [r7, #15]
 80037cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	73fb      	strb	r3, [r7, #15]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 80037d4:	2301      	movs	r3, #1
 80037d6:	613b      	str	r3, [r7, #16]

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80037d8:	f107 0310 	add.w	r3, r7, #16
 80037dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80037e0:	4619      	mov	r1, r3
 80037e2:	4829      	ldr	r0, [pc, #164]	; (8003888 <QSPI_QuadMode+0x14c>)
 80037e4:	f7fd fd2c 	bl	8001240 <HAL_QSPI_Command>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d001      	beq.n	80037f2 <QSPI_QuadMode+0xb6>
  {
    return QSPI_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e045      	b.n	800387e <QSPI_QuadMode+0x142>
  }

  if (HAL_QSPI_Transmit(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80037f2:	f107 030f 	add.w	r3, r7, #15
 80037f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037fa:	4619      	mov	r1, r3
 80037fc:	4822      	ldr	r0, [pc, #136]	; (8003888 <QSPI_QuadMode+0x14c>)
 80037fe:	f7fd fd7d 	bl	80012fc <HAL_QSPI_Transmit>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d001      	beq.n	800380c <QSPI_QuadMode+0xd0>
  {
    return QSPI_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e038      	b.n	800387e <QSPI_QuadMode+0x142>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 800380c:	f241 3188 	movw	r1, #5000	; 0x1388
 8003810:	481d      	ldr	r0, [pc, #116]	; (8003888 <QSPI_QuadMode+0x14c>)
 8003812:	f7ff ff59 	bl	80036c8 <QSPI_AutoPollingMemReady>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d001      	beq.n	8003820 <QSPI_QuadMode+0xe4>
  {
    return QSPI_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e02e      	b.n	800387e <QSPI_QuadMode+0x142>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_STATUS_REG_CMD;
 8003820:	2305      	movs	r3, #5
 8003822:	613b      	str	r3, [r7, #16]

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003824:	f107 0310 	add.w	r3, r7, #16
 8003828:	f241 3288 	movw	r2, #5000	; 0x1388
 800382c:	4619      	mov	r1, r3
 800382e:	4816      	ldr	r0, [pc, #88]	; (8003888 <QSPI_QuadMode+0x14c>)
 8003830:	f7fd fd06 	bl	8001240 <HAL_QSPI_Command>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d001      	beq.n	800383e <QSPI_QuadMode+0x102>
  {
    return QSPI_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e01f      	b.n	800387e <QSPI_QuadMode+0x142>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800383e:	f107 030f 	add.w	r3, r7, #15
 8003842:	f241 3288 	movw	r2, #5000	; 0x1388
 8003846:	4619      	mov	r1, r3
 8003848:	480f      	ldr	r0, [pc, #60]	; (8003888 <QSPI_QuadMode+0x14c>)
 800384a:	f7fd fdee 	bl	800142a <HAL_QSPI_Receive>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d001      	beq.n	8003858 <QSPI_QuadMode+0x11c>
  {
    return QSPI_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e012      	b.n	800387e <QSPI_QuadMode+0x142>
  }
  
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 8003858:	7bfb      	ldrb	r3, [r7, #15]
 800385a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800385e:	2b00      	cmp	r3, #0
 8003860:	d102      	bne.n	8003868 <QSPI_QuadMode+0x12c>
 8003862:	78fb      	ldrb	r3, [r7, #3]
 8003864:	2b01      	cmp	r3, #1
 8003866:	d007      	beq.n	8003878 <QSPI_QuadMode+0x13c>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 8003868:	7bfb      	ldrb	r3, [r7, #15]
 800386a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 800386e:	2b00      	cmp	r3, #0
 8003870:	d004      	beq.n	800387c <QSPI_QuadMode+0x140>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 8003872:	78fb      	ldrb	r3, [r7, #3]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d101      	bne.n	800387c <QSPI_QuadMode+0x140>
  {
    return QSPI_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e000      	b.n	800387e <QSPI_QuadMode+0x142>
  }

  return QSPI_OK;
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	3748      	adds	r7, #72	; 0x48
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	20000130 	.word	0x20000130

0800388c <QSPI_HighPerfMode>:
  * @param  hqspi     : QSPI handle
  * @param  Operation : QSPI_HIGH_PERF_ENABLE or QSPI_HIGH_PERF_DISABLE high performance mode    
  * @retval None
  */
static uint8_t QSPI_HighPerfMode(QSPI_HandleTypeDef *hqspi, uint8_t Operation)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b092      	sub	sp, #72	; 0x48
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	460b      	mov	r3, r1
 8003896:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef sCommand;
  uint8_t reg[3];

  /* Read status register */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003898:	f44f 7380 	mov.w	r3, #256	; 0x100
 800389c:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 800389e:	2305      	movs	r3, #5
 80038a0:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 80038a2:	2300      	movs	r3, #0
 80038a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80038a6:	2300      	movs	r3, #0
 80038a8:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 80038aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80038ae:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DummyCycles       = 0;
 80038b0:	2300      	movs	r3, #0
 80038b2:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.NbData            = 1;
 80038b4:	2301      	movs	r3, #1
 80038b6:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80038b8:	2300      	movs	r3, #0
 80038ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80038bc:	2300      	movs	r3, #0
 80038be:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80038c0:	2300      	movs	r3, #0
 80038c2:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80038c4:	f107 0310 	add.w	r3, r7, #16
 80038c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80038cc:	4619      	mov	r1, r3
 80038ce:	4853      	ldr	r0, [pc, #332]	; (8003a1c <QSPI_HighPerfMode+0x190>)
 80038d0:	f7fd fcb6 	bl	8001240 <HAL_QSPI_Command>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d001      	beq.n	80038de <QSPI_HighPerfMode+0x52>
  {
    return QSPI_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e09a      	b.n	8003a14 <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80038de:	f107 030c 	add.w	r3, r7, #12
 80038e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80038e6:	4619      	mov	r1, r3
 80038e8:	484c      	ldr	r0, [pc, #304]	; (8003a1c <QSPI_HighPerfMode+0x190>)
 80038ea:	f7fd fd9e 	bl	800142a <HAL_QSPI_Receive>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d001      	beq.n	80038f8 <QSPI_HighPerfMode+0x6c>
  {
    return QSPI_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e08d      	b.n	8003a14 <QSPI_HighPerfMode+0x188>
  }

  /* Read configuration registers */
  sCommand.Instruction = READ_CFG_REG_CMD;
 80038f8:	2315      	movs	r3, #21
 80038fa:	613b      	str	r3, [r7, #16]
  sCommand.NbData      = 2;
 80038fc:	2302      	movs	r3, #2
 80038fe:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003900:	f107 0310 	add.w	r3, r7, #16
 8003904:	f241 3288 	movw	r2, #5000	; 0x1388
 8003908:	4619      	mov	r1, r3
 800390a:	4844      	ldr	r0, [pc, #272]	; (8003a1c <QSPI_HighPerfMode+0x190>)
 800390c:	f7fd fc98 	bl	8001240 <HAL_QSPI_Command>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d001      	beq.n	800391a <QSPI_HighPerfMode+0x8e>
  {
    return QSPI_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e07c      	b.n	8003a14 <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &(reg[1]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800391a:	f107 030c 	add.w	r3, r7, #12
 800391e:	3301      	adds	r3, #1
 8003920:	f241 3288 	movw	r2, #5000	; 0x1388
 8003924:	4619      	mov	r1, r3
 8003926:	483d      	ldr	r0, [pc, #244]	; (8003a1c <QSPI_HighPerfMode+0x190>)
 8003928:	f7fd fd7f 	bl	800142a <HAL_QSPI_Receive>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d001      	beq.n	8003936 <QSPI_HighPerfMode+0xaa>
  {
    return QSPI_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e06e      	b.n	8003a14 <QSPI_HighPerfMode+0x188>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 8003936:	4839      	ldr	r0, [pc, #228]	; (8003a1c <QSPI_HighPerfMode+0x190>)
 8003938:	f7ff fe7a 	bl	8003630 <QSPI_WriteEnable>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d001      	beq.n	8003946 <QSPI_HighPerfMode+0xba>
  {
    return QSPI_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e066      	b.n	8003a14 <QSPI_HighPerfMode+0x188>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_HIGH_PERF_ENABLE)
 8003946:	78fb      	ldrb	r3, [r7, #3]
 8003948:	2b01      	cmp	r3, #1
 800394a:	d105      	bne.n	8003958 <QSPI_HighPerfMode+0xcc>
  {
    SET_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 800394c:	7bbb      	ldrb	r3, [r7, #14]
 800394e:	f043 0302 	orr.w	r3, r3, #2
 8003952:	b2db      	uxtb	r3, r3
 8003954:	73bb      	strb	r3, [r7, #14]
 8003956:	e004      	b.n	8003962 <QSPI_HighPerfMode+0xd6>
  }
  else
  {
    CLEAR_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 8003958:	7bbb      	ldrb	r3, [r7, #14]
 800395a:	f023 0302 	bic.w	r3, r3, #2
 800395e:	b2db      	uxtb	r3, r3
 8003960:	73bb      	strb	r3, [r7, #14]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 8003962:	2301      	movs	r3, #1
 8003964:	613b      	str	r3, [r7, #16]
  sCommand.NbData      = 3;
 8003966:	2303      	movs	r3, #3
 8003968:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800396a:	f107 0310 	add.w	r3, r7, #16
 800396e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003972:	4619      	mov	r1, r3
 8003974:	4829      	ldr	r0, [pc, #164]	; (8003a1c <QSPI_HighPerfMode+0x190>)
 8003976:	f7fd fc63 	bl	8001240 <HAL_QSPI_Command>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d001      	beq.n	8003984 <QSPI_HighPerfMode+0xf8>
  {
    return QSPI_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e047      	b.n	8003a14 <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Transmit(&QSPIHandle, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003984:	f107 030c 	add.w	r3, r7, #12
 8003988:	f241 3288 	movw	r2, #5000	; 0x1388
 800398c:	4619      	mov	r1, r3
 800398e:	4823      	ldr	r0, [pc, #140]	; (8003a1c <QSPI_HighPerfMode+0x190>)
 8003990:	f7fd fcb4 	bl	80012fc <HAL_QSPI_Transmit>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d001      	beq.n	800399e <QSPI_HighPerfMode+0x112>
  {
    return QSPI_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e03a      	b.n	8003a14 <QSPI_HighPerfMode+0x188>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 800399e:	f241 3188 	movw	r1, #5000	; 0x1388
 80039a2:	481e      	ldr	r0, [pc, #120]	; (8003a1c <QSPI_HighPerfMode+0x190>)
 80039a4:	f7ff fe90 	bl	80036c8 <QSPI_AutoPollingMemReady>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d001      	beq.n	80039b2 <QSPI_HighPerfMode+0x126>
  {
    return QSPI_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e030      	b.n	8003a14 <QSPI_HighPerfMode+0x188>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_CFG_REG_CMD;
 80039b2:	2315      	movs	r3, #21
 80039b4:	613b      	str	r3, [r7, #16]
  sCommand.NbData      = 2;
 80039b6:	2302      	movs	r3, #2
 80039b8:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80039ba:	f107 0310 	add.w	r3, r7, #16
 80039be:	f241 3288 	movw	r2, #5000	; 0x1388
 80039c2:	4619      	mov	r1, r3
 80039c4:	4815      	ldr	r0, [pc, #84]	; (8003a1c <QSPI_HighPerfMode+0x190>)
 80039c6:	f7fd fc3b 	bl	8001240 <HAL_QSPI_Command>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d001      	beq.n	80039d4 <QSPI_HighPerfMode+0x148>
  {
    return QSPI_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e01f      	b.n	8003a14 <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80039d4:	f107 030c 	add.w	r3, r7, #12
 80039d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80039dc:	4619      	mov	r1, r3
 80039de:	480f      	ldr	r0, [pc, #60]	; (8003a1c <QSPI_HighPerfMode+0x190>)
 80039e0:	f7fd fd23 	bl	800142a <HAL_QSPI_Receive>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d001      	beq.n	80039ee <QSPI_HighPerfMode+0x162>
  {
    return QSPI_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e012      	b.n	8003a14 <QSPI_HighPerfMode+0x188>
  }
  
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 80039ee:	7b7b      	ldrb	r3, [r7, #13]
 80039f0:	f003 0302 	and.w	r3, r3, #2
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d102      	bne.n	80039fe <QSPI_HighPerfMode+0x172>
 80039f8:	78fb      	ldrb	r3, [r7, #3]
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d007      	beq.n	8003a0e <QSPI_HighPerfMode+0x182>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 80039fe:	7b7b      	ldrb	r3, [r7, #13]
 8003a00:	f003 0302 	and.w	r3, r3, #2
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d004      	beq.n	8003a12 <QSPI_HighPerfMode+0x186>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 8003a08:	78fb      	ldrb	r3, [r7, #3]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d101      	bne.n	8003a12 <QSPI_HighPerfMode+0x186>
  {
    return QSPI_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e000      	b.n	8003a14 <QSPI_HighPerfMode+0x188>
  }

  return QSPI_OK;
 8003a12:	2300      	movs	r3, #0
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3748      	adds	r7, #72	; 0x48
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	20000130 	.word	0x20000130

08003a20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a26:	4b0f      	ldr	r3, [pc, #60]	; (8003a64 <HAL_MspInit+0x44>)
 8003a28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a2a:	4a0e      	ldr	r2, [pc, #56]	; (8003a64 <HAL_MspInit+0x44>)
 8003a2c:	f043 0301 	orr.w	r3, r3, #1
 8003a30:	6613      	str	r3, [r2, #96]	; 0x60
 8003a32:	4b0c      	ldr	r3, [pc, #48]	; (8003a64 <HAL_MspInit+0x44>)
 8003a34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a36:	f003 0301 	and.w	r3, r3, #1
 8003a3a:	607b      	str	r3, [r7, #4]
 8003a3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a3e:	4b09      	ldr	r3, [pc, #36]	; (8003a64 <HAL_MspInit+0x44>)
 8003a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a42:	4a08      	ldr	r2, [pc, #32]	; (8003a64 <HAL_MspInit+0x44>)
 8003a44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a48:	6593      	str	r3, [r2, #88]	; 0x58
 8003a4a:	4b06      	ldr	r3, [pc, #24]	; (8003a64 <HAL_MspInit+0x44>)
 8003a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a52:	603b      	str	r3, [r7, #0]
 8003a54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a56:	bf00      	nop
 8003a58:	370c      	adds	r7, #12
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop
 8003a64:	40021000 	.word	0x40021000

08003a68 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b08a      	sub	sp, #40	; 0x28
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a70:	f107 0314 	add.w	r3, r7, #20
 8003a74:	2200      	movs	r2, #0
 8003a76:	601a      	str	r2, [r3, #0]
 8003a78:	605a      	str	r2, [r3, #4]
 8003a7a:	609a      	str	r2, [r3, #8]
 8003a7c:	60da      	str	r2, [r3, #12]
 8003a7e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a2b      	ldr	r2, [pc, #172]	; (8003b34 <HAL_DAC_MspInit+0xcc>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d14f      	bne.n	8003b2a <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8003a8a:	4b2b      	ldr	r3, [pc, #172]	; (8003b38 <HAL_DAC_MspInit+0xd0>)
 8003a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a8e:	4a2a      	ldr	r2, [pc, #168]	; (8003b38 <HAL_DAC_MspInit+0xd0>)
 8003a90:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003a94:	6593      	str	r3, [r2, #88]	; 0x58
 8003a96:	4b28      	ldr	r3, [pc, #160]	; (8003b38 <HAL_DAC_MspInit+0xd0>)
 8003a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a9e:	613b      	str	r3, [r7, #16]
 8003aa0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003aa2:	4b25      	ldr	r3, [pc, #148]	; (8003b38 <HAL_DAC_MspInit+0xd0>)
 8003aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aa6:	4a24      	ldr	r2, [pc, #144]	; (8003b38 <HAL_DAC_MspInit+0xd0>)
 8003aa8:	f043 0301 	orr.w	r3, r3, #1
 8003aac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003aae:	4b22      	ldr	r3, [pc, #136]	; (8003b38 <HAL_DAC_MspInit+0xd0>)
 8003ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ab2:	f003 0301 	and.w	r3, r3, #1
 8003ab6:	60fb      	str	r3, [r7, #12]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003aba:	2310      	movs	r3, #16
 8003abc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ac6:	f107 0314 	add.w	r3, r7, #20
 8003aca:	4619      	mov	r1, r3
 8003acc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ad0:	f7fd f804 	bl	8000adc <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8003ad4:	4b19      	ldr	r3, [pc, #100]	; (8003b3c <HAL_DAC_MspInit+0xd4>)
 8003ad6:	4a1a      	ldr	r2, [pc, #104]	; (8003b40 <HAL_DAC_MspInit+0xd8>)
 8003ad8:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8003ada:	4b18      	ldr	r3, [pc, #96]	; (8003b3c <HAL_DAC_MspInit+0xd4>)
 8003adc:	2206      	movs	r2, #6
 8003ade:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003ae0:	4b16      	ldr	r3, [pc, #88]	; (8003b3c <HAL_DAC_MspInit+0xd4>)
 8003ae2:	2210      	movs	r2, #16
 8003ae4:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ae6:	4b15      	ldr	r3, [pc, #84]	; (8003b3c <HAL_DAC_MspInit+0xd4>)
 8003ae8:	2200      	movs	r2, #0
 8003aea:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003aec:	4b13      	ldr	r3, [pc, #76]	; (8003b3c <HAL_DAC_MspInit+0xd4>)
 8003aee:	2280      	movs	r2, #128	; 0x80
 8003af0:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003af2:	4b12      	ldr	r3, [pc, #72]	; (8003b3c <HAL_DAC_MspInit+0xd4>)
 8003af4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003af8:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003afa:	4b10      	ldr	r3, [pc, #64]	; (8003b3c <HAL_DAC_MspInit+0xd4>)
 8003afc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b00:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8003b02:	4b0e      	ldr	r3, [pc, #56]	; (8003b3c <HAL_DAC_MspInit+0xd4>)
 8003b04:	2220      	movs	r2, #32
 8003b06:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003b08:	4b0c      	ldr	r3, [pc, #48]	; (8003b3c <HAL_DAC_MspInit+0xd4>)
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8003b0e:	480b      	ldr	r0, [pc, #44]	; (8003b3c <HAL_DAC_MspInit+0xd4>)
 8003b10:	f7fc fe3e 	bl	8000790 <HAL_DMA_Init>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d001      	beq.n	8003b1e <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8003b1a:	f7ff fb83 	bl	8003224 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a06      	ldr	r2, [pc, #24]	; (8003b3c <HAL_DAC_MspInit+0xd4>)
 8003b22:	609a      	str	r2, [r3, #8]
 8003b24:	4a05      	ldr	r2, [pc, #20]	; (8003b3c <HAL_DAC_MspInit+0xd4>)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8003b2a:	bf00      	nop
 8003b2c:	3728      	adds	r7, #40	; 0x28
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	40007400 	.word	0x40007400
 8003b38:	40021000 	.word	0x40021000
 8003b3c:	20000058 	.word	0x20000058
 8003b40:	40020030 	.word	0x40020030

08003b44 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b08a      	sub	sp, #40	; 0x28
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b4c:	f107 0314 	add.w	r3, r7, #20
 8003b50:	2200      	movs	r2, #0
 8003b52:	601a      	str	r2, [r3, #0]
 8003b54:	605a      	str	r2, [r3, #4]
 8003b56:	609a      	str	r2, [r3, #8]
 8003b58:	60da      	str	r2, [r3, #12]
 8003b5a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a17      	ldr	r2, [pc, #92]	; (8003bc0 <HAL_QSPI_MspInit+0x7c>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d128      	bne.n	8003bb8 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8003b66:	4b17      	ldr	r3, [pc, #92]	; (8003bc4 <HAL_QSPI_MspInit+0x80>)
 8003b68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b6a:	4a16      	ldr	r2, [pc, #88]	; (8003bc4 <HAL_QSPI_MspInit+0x80>)
 8003b6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b70:	6513      	str	r3, [r2, #80]	; 0x50
 8003b72:	4b14      	ldr	r3, [pc, #80]	; (8003bc4 <HAL_QSPI_MspInit+0x80>)
 8003b74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b7a:	613b      	str	r3, [r7, #16]
 8003b7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003b7e:	4b11      	ldr	r3, [pc, #68]	; (8003bc4 <HAL_QSPI_MspInit+0x80>)
 8003b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b82:	4a10      	ldr	r2, [pc, #64]	; (8003bc4 <HAL_QSPI_MspInit+0x80>)
 8003b84:	f043 0310 	orr.w	r3, r3, #16
 8003b88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b8a:	4b0e      	ldr	r3, [pc, #56]	; (8003bc4 <HAL_QSPI_MspInit+0x80>)
 8003b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b8e:	f003 0310 	and.w	r3, r3, #16
 8003b92:	60fb      	str	r3, [r7, #12]
 8003b94:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8003b96:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8003b9a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b9c:	2302      	movs	r3, #2
 8003b9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8003ba8:	230a      	movs	r3, #10
 8003baa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003bac:	f107 0314 	add.w	r3, r7, #20
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	4805      	ldr	r0, [pc, #20]	; (8003bc8 <HAL_QSPI_MspInit+0x84>)
 8003bb4:	f7fc ff92 	bl	8000adc <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8003bb8:	bf00      	nop
 8003bba:	3728      	adds	r7, #40	; 0x28
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	a0001000 	.word	0xa0001000
 8003bc4:	40021000 	.word	0x40021000
 8003bc8:	48001000 	.word	0x48001000

08003bcc <HAL_QSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* hqspi)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  if(hqspi->Instance==QUADSPI)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a08      	ldr	r2, [pc, #32]	; (8003bfc <HAL_QSPI_MspDeInit+0x30>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d10a      	bne.n	8003bf4 <HAL_QSPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 8003bde:	4b08      	ldr	r3, [pc, #32]	; (8003c00 <HAL_QSPI_MspDeInit+0x34>)
 8003be0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003be2:	4a07      	ldr	r2, [pc, #28]	; (8003c00 <HAL_QSPI_MspDeInit+0x34>)
 8003be4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003be8:	6513      	str	r3, [r2, #80]	; 0x50
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8003bea:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 8003bee:	4805      	ldr	r0, [pc, #20]	; (8003c04 <HAL_QSPI_MspDeInit+0x38>)
 8003bf0:	f7fd f91c 	bl	8000e2c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }

}
 8003bf4:	bf00      	nop
 8003bf6:	3708      	adds	r7, #8
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	a0001000 	.word	0xa0001000
 8003c00:	40021000 	.word	0x40021000
 8003c04:	48001000 	.word	0x48001000

08003c08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c18:	d113      	bne.n	8003c42 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003c1a:	4b0c      	ldr	r3, [pc, #48]	; (8003c4c <HAL_TIM_Base_MspInit+0x44>)
 8003c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c1e:	4a0b      	ldr	r2, [pc, #44]	; (8003c4c <HAL_TIM_Base_MspInit+0x44>)
 8003c20:	f043 0301 	orr.w	r3, r3, #1
 8003c24:	6593      	str	r3, [r2, #88]	; 0x58
 8003c26:	4b09      	ldr	r3, [pc, #36]	; (8003c4c <HAL_TIM_Base_MspInit+0x44>)
 8003c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c2a:	f003 0301 	and.w	r3, r3, #1
 8003c2e:	60fb      	str	r3, [r7, #12]
 8003c30:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003c32:	2200      	movs	r2, #0
 8003c34:	2100      	movs	r1, #0
 8003c36:	201c      	movs	r0, #28
 8003c38:	f7fc fc37 	bl	80004aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003c3c:	201c      	movs	r0, #28
 8003c3e:	f7fc fc50 	bl	80004e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003c42:	bf00      	nop
 8003c44:	3710      	adds	r7, #16
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	40021000 	.word	0x40021000

08003c50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c50:	b480      	push	{r7}
 8003c52:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003c54:	bf00      	nop
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr

08003c5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c5e:	b480      	push	{r7}
 8003c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c62:	e7fe      	b.n	8003c62 <HardFault_Handler+0x4>

08003c64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003c64:	b480      	push	{r7}
 8003c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003c68:	e7fe      	b.n	8003c68 <MemManage_Handler+0x4>

08003c6a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003c6a:	b480      	push	{r7}
 8003c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003c6e:	e7fe      	b.n	8003c6e <BusFault_Handler+0x4>

08003c70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003c70:	b480      	push	{r7}
 8003c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003c74:	e7fe      	b.n	8003c74 <UsageFault_Handler+0x4>

08003c76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003c76:	b480      	push	{r7}
 8003c78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003c7a:	bf00      	nop
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003c84:	b480      	push	{r7}
 8003c86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c88:	bf00      	nop
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr

08003c92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003c92:	b480      	push	{r7}
 8003c94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003c96:	bf00      	nop
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr

08003ca0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ca4:	f7fc fae4 	bl	8000270 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ca8:	bf00      	nop
 8003caa:	bd80      	pop	{r7, pc}

08003cac <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8003cb0:	4802      	ldr	r0, [pc, #8]	; (8003cbc <DMA1_Channel3_IRQHandler+0x10>)
 8003cb2:	f7fc fe63 	bl	800097c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003cb6:	bf00      	nop
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	20000058 	.word	0x20000058

08003cc0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003cc4:	4802      	ldr	r0, [pc, #8]	; (8003cd0 <TIM2_IRQHandler+0x10>)
 8003cc6:	f7fe fd0a 	bl	80026de <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003cca:	bf00      	nop
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	200000a0 	.word	0x200000a0

08003cd4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003cd8:	4b17      	ldr	r3, [pc, #92]	; (8003d38 <SystemInit+0x64>)
 8003cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cde:	4a16      	ldr	r2, [pc, #88]	; (8003d38 <SystemInit+0x64>)
 8003ce0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ce4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003ce8:	4b14      	ldr	r3, [pc, #80]	; (8003d3c <SystemInit+0x68>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a13      	ldr	r2, [pc, #76]	; (8003d3c <SystemInit+0x68>)
 8003cee:	f043 0301 	orr.w	r3, r3, #1
 8003cf2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8003cf4:	4b11      	ldr	r3, [pc, #68]	; (8003d3c <SystemInit+0x68>)
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8003cfa:	4b10      	ldr	r3, [pc, #64]	; (8003d3c <SystemInit+0x68>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a0f      	ldr	r2, [pc, #60]	; (8003d3c <SystemInit+0x68>)
 8003d00:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8003d04:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8003d08:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8003d0a:	4b0c      	ldr	r3, [pc, #48]	; (8003d3c <SystemInit+0x68>)
 8003d0c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003d10:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003d12:	4b0a      	ldr	r3, [pc, #40]	; (8003d3c <SystemInit+0x68>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a09      	ldr	r2, [pc, #36]	; (8003d3c <SystemInit+0x68>)
 8003d18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d1c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003d1e:	4b07      	ldr	r3, [pc, #28]	; (8003d3c <SystemInit+0x68>)
 8003d20:	2200      	movs	r2, #0
 8003d22:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003d24:	4b04      	ldr	r3, [pc, #16]	; (8003d38 <SystemInit+0x64>)
 8003d26:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003d2a:	609a      	str	r2, [r3, #8]
#endif
}
 8003d2c:	bf00      	nop
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	e000ed00 	.word	0xe000ed00
 8003d3c:	40021000 	.word	0x40021000

08003d40 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003d40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d78 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003d44:	f7ff ffc6 	bl	8003cd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003d48:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003d4a:	e003      	b.n	8003d54 <LoopCopyDataInit>

08003d4c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003d4c:	4b0b      	ldr	r3, [pc, #44]	; (8003d7c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003d4e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003d50:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003d52:	3104      	adds	r1, #4

08003d54 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003d54:	480a      	ldr	r0, [pc, #40]	; (8003d80 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003d56:	4b0b      	ldr	r3, [pc, #44]	; (8003d84 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003d58:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003d5a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003d5c:	d3f6      	bcc.n	8003d4c <CopyDataInit>
	ldr	r2, =_sbss
 8003d5e:	4a0a      	ldr	r2, [pc, #40]	; (8003d88 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003d60:	e002      	b.n	8003d68 <LoopFillZerobss>

08003d62 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003d62:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003d64:	f842 3b04 	str.w	r3, [r2], #4

08003d68 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003d68:	4b08      	ldr	r3, [pc, #32]	; (8003d8c <LoopForever+0x16>)
	cmp	r2, r3
 8003d6a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003d6c:	d3f9      	bcc.n	8003d62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003d6e:	f000 f811 	bl	8003d94 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003d72:	f7ff f899 	bl	8002ea8 <main>

08003d76 <LoopForever>:

LoopForever:
    b LoopForever
 8003d76:	e7fe      	b.n	8003d76 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003d78:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8003d7c:	08003e4c 	.word	0x08003e4c
	ldr	r0, =_sdata
 8003d80:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003d84:	20000018 	.word	0x20000018
	ldr	r2, =_sbss
 8003d88:	20000018 	.word	0x20000018
	ldr	r3, = _ebss
 8003d8c:	20000174 	.word	0x20000174

08003d90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003d90:	e7fe      	b.n	8003d90 <ADC1_2_IRQHandler>
	...

08003d94 <__libc_init_array>:
 8003d94:	b570      	push	{r4, r5, r6, lr}
 8003d96:	4e0d      	ldr	r6, [pc, #52]	; (8003dcc <__libc_init_array+0x38>)
 8003d98:	4c0d      	ldr	r4, [pc, #52]	; (8003dd0 <__libc_init_array+0x3c>)
 8003d9a:	1ba4      	subs	r4, r4, r6
 8003d9c:	10a4      	asrs	r4, r4, #2
 8003d9e:	2500      	movs	r5, #0
 8003da0:	42a5      	cmp	r5, r4
 8003da2:	d109      	bne.n	8003db8 <__libc_init_array+0x24>
 8003da4:	4e0b      	ldr	r6, [pc, #44]	; (8003dd4 <__libc_init_array+0x40>)
 8003da6:	4c0c      	ldr	r4, [pc, #48]	; (8003dd8 <__libc_init_array+0x44>)
 8003da8:	f000 f820 	bl	8003dec <_init>
 8003dac:	1ba4      	subs	r4, r4, r6
 8003dae:	10a4      	asrs	r4, r4, #2
 8003db0:	2500      	movs	r5, #0
 8003db2:	42a5      	cmp	r5, r4
 8003db4:	d105      	bne.n	8003dc2 <__libc_init_array+0x2e>
 8003db6:	bd70      	pop	{r4, r5, r6, pc}
 8003db8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003dbc:	4798      	blx	r3
 8003dbe:	3501      	adds	r5, #1
 8003dc0:	e7ee      	b.n	8003da0 <__libc_init_array+0xc>
 8003dc2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003dc6:	4798      	blx	r3
 8003dc8:	3501      	adds	r5, #1
 8003dca:	e7f2      	b.n	8003db2 <__libc_init_array+0x1e>
 8003dcc:	08003e44 	.word	0x08003e44
 8003dd0:	08003e44 	.word	0x08003e44
 8003dd4:	08003e44 	.word	0x08003e44
 8003dd8:	08003e48 	.word	0x08003e48

08003ddc <memset>:
 8003ddc:	4402      	add	r2, r0
 8003dde:	4603      	mov	r3, r0
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d100      	bne.n	8003de6 <memset+0xa>
 8003de4:	4770      	bx	lr
 8003de6:	f803 1b01 	strb.w	r1, [r3], #1
 8003dea:	e7f9      	b.n	8003de0 <memset+0x4>

08003dec <_init>:
 8003dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dee:	bf00      	nop
 8003df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003df2:	bc08      	pop	{r3}
 8003df4:	469e      	mov	lr, r3
 8003df6:	4770      	bx	lr

08003df8 <_fini>:
 8003df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dfa:	bf00      	nop
 8003dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dfe:	bc08      	pop	{r3}
 8003e00:	469e      	mov	lr, r3
 8003e02:	4770      	bx	lr
