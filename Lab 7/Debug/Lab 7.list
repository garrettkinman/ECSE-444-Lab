
Lab 7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005514  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  080056a4  080056a4  000156a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800579c  0800579c  00020118  2**0
                  CONTENTS
  4 .ARM          00000008  0800579c  0800579c  0001579c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080057a4  080057a4  00020118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057a4  080057a4  000157a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080057a8  080057a8  000157a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000118  20000000  080057ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001dc  20000118  080058c4  00020118  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002f4  080058c4  000202f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020118  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001147f  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000026ab  00000000  00000000  000315c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e78  00000000  00000000  00033c78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d10  00000000  00000000  00034af0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000274d0  00000000  00000000  00035800  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cadf  00000000  00000000  0005ccd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ed1f9  00000000  00000000  000697af  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001569a8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c6c  00000000  00000000  00156a24  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000118 	.word	0x20000118
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800568c 	.word	0x0800568c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000011c 	.word	0x2000011c
 80001cc:	0800568c 	.word	0x0800568c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000586:	2300      	movs	r3, #0
 8000588:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800058a:	2003      	movs	r0, #3
 800058c:	f000 f95e 	bl	800084c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000590:	2000      	movs	r0, #0
 8000592:	f000 f80d 	bl	80005b0 <HAL_InitTick>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d002      	beq.n	80005a2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800059c:	2301      	movs	r3, #1
 800059e:	71fb      	strb	r3, [r7, #7]
 80005a0:	e001      	b.n	80005a6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80005a2:	f004 fa9f 	bl	8004ae4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005a6:	79fb      	ldrb	r3, [r7, #7]
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	3708      	adds	r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}

080005b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80005b8:	2300      	movs	r3, #0
 80005ba:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80005bc:	4b17      	ldr	r3, [pc, #92]	; (800061c <HAL_InitTick+0x6c>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d023      	beq.n	800060c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80005c4:	4b16      	ldr	r3, [pc, #88]	; (8000620 <HAL_InitTick+0x70>)
 80005c6:	681a      	ldr	r2, [r3, #0]
 80005c8:	4b14      	ldr	r3, [pc, #80]	; (800061c <HAL_InitTick+0x6c>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	4619      	mov	r1, r3
 80005ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80005d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80005da:	4618      	mov	r0, r3
 80005dc:	f000 f96b 	bl	80008b6 <HAL_SYSTICK_Config>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d10f      	bne.n	8000606 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	2b0f      	cmp	r3, #15
 80005ea:	d809      	bhi.n	8000600 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005ec:	2200      	movs	r2, #0
 80005ee:	6879      	ldr	r1, [r7, #4]
 80005f0:	f04f 30ff 	mov.w	r0, #4294967295
 80005f4:	f000 f935 	bl	8000862 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80005f8:	4a0a      	ldr	r2, [pc, #40]	; (8000624 <HAL_InitTick+0x74>)
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	6013      	str	r3, [r2, #0]
 80005fe:	e007      	b.n	8000610 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000600:	2301      	movs	r3, #1
 8000602:	73fb      	strb	r3, [r7, #15]
 8000604:	e004      	b.n	8000610 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000606:	2301      	movs	r3, #1
 8000608:	73fb      	strb	r3, [r7, #15]
 800060a:	e001      	b.n	8000610 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800060c:	2301      	movs	r3, #1
 800060e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000610:	7bfb      	ldrb	r3, [r7, #15]
}
 8000612:	4618      	mov	r0, r3
 8000614:	3710      	adds	r7, #16
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	20000004 	.word	0x20000004
 8000620:	200000b0 	.word	0x200000b0
 8000624:	20000000 	.word	0x20000000

08000628 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800062c:	4b06      	ldr	r3, [pc, #24]	; (8000648 <HAL_IncTick+0x20>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	461a      	mov	r2, r3
 8000632:	4b06      	ldr	r3, [pc, #24]	; (800064c <HAL_IncTick+0x24>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4413      	add	r3, r2
 8000638:	4a04      	ldr	r2, [pc, #16]	; (800064c <HAL_IncTick+0x24>)
 800063a:	6013      	str	r3, [r2, #0]
}
 800063c:	bf00      	nop
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	20000004 	.word	0x20000004
 800064c:	20000154 	.word	0x20000154

08000650 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  return uwTick;
 8000654:	4b03      	ldr	r3, [pc, #12]	; (8000664 <HAL_GetTick+0x14>)
 8000656:	681b      	ldr	r3, [r3, #0]
}
 8000658:	4618      	mov	r0, r3
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	20000154 	.word	0x20000154

08000668 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000670:	f7ff ffee 	bl	8000650 <HAL_GetTick>
 8000674:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000680:	d005      	beq.n	800068e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000682:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <HAL_Delay+0x40>)
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	461a      	mov	r2, r3
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	4413      	add	r3, r2
 800068c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800068e:	bf00      	nop
 8000690:	f7ff ffde 	bl	8000650 <HAL_GetTick>
 8000694:	4602      	mov	r2, r0
 8000696:	68bb      	ldr	r3, [r7, #8]
 8000698:	1ad3      	subs	r3, r2, r3
 800069a:	68fa      	ldr	r2, [r7, #12]
 800069c:	429a      	cmp	r2, r3
 800069e:	d8f7      	bhi.n	8000690 <HAL_Delay+0x28>
  {
  }
}
 80006a0:	bf00      	nop
 80006a2:	3710      	adds	r7, #16
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	20000004 	.word	0x20000004

080006ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b085      	sub	sp, #20
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	f003 0307 	and.w	r3, r3, #7
 80006ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006bc:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <__NVIC_SetPriorityGrouping+0x44>)
 80006be:	68db      	ldr	r3, [r3, #12]
 80006c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006c2:	68ba      	ldr	r2, [r7, #8]
 80006c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006c8:	4013      	ands	r3, r2
 80006ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006de:	4a04      	ldr	r2, [pc, #16]	; (80006f0 <__NVIC_SetPriorityGrouping+0x44>)
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	60d3      	str	r3, [r2, #12]
}
 80006e4:	bf00      	nop
 80006e6:	3714      	adds	r7, #20
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr
 80006f0:	e000ed00 	.word	0xe000ed00

080006f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006f8:	4b04      	ldr	r3, [pc, #16]	; (800070c <__NVIC_GetPriorityGrouping+0x18>)
 80006fa:	68db      	ldr	r3, [r3, #12]
 80006fc:	0a1b      	lsrs	r3, r3, #8
 80006fe:	f003 0307 	and.w	r3, r3, #7
}
 8000702:	4618      	mov	r0, r3
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr
 800070c:	e000ed00 	.word	0xe000ed00

08000710 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	4603      	mov	r3, r0
 8000718:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800071a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071e:	2b00      	cmp	r3, #0
 8000720:	db0b      	blt.n	800073a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000722:	79fb      	ldrb	r3, [r7, #7]
 8000724:	f003 021f 	and.w	r2, r3, #31
 8000728:	4907      	ldr	r1, [pc, #28]	; (8000748 <__NVIC_EnableIRQ+0x38>)
 800072a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800072e:	095b      	lsrs	r3, r3, #5
 8000730:	2001      	movs	r0, #1
 8000732:	fa00 f202 	lsl.w	r2, r0, r2
 8000736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800073a:	bf00      	nop
 800073c:	370c      	adds	r7, #12
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	e000e100 	.word	0xe000e100

0800074c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	6039      	str	r1, [r7, #0]
 8000756:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075c:	2b00      	cmp	r3, #0
 800075e:	db0a      	blt.n	8000776 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	b2da      	uxtb	r2, r3
 8000764:	490c      	ldr	r1, [pc, #48]	; (8000798 <__NVIC_SetPriority+0x4c>)
 8000766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800076a:	0112      	lsls	r2, r2, #4
 800076c:	b2d2      	uxtb	r2, r2
 800076e:	440b      	add	r3, r1
 8000770:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000774:	e00a      	b.n	800078c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	b2da      	uxtb	r2, r3
 800077a:	4908      	ldr	r1, [pc, #32]	; (800079c <__NVIC_SetPriority+0x50>)
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	f003 030f 	and.w	r3, r3, #15
 8000782:	3b04      	subs	r3, #4
 8000784:	0112      	lsls	r2, r2, #4
 8000786:	b2d2      	uxtb	r2, r2
 8000788:	440b      	add	r3, r1
 800078a:	761a      	strb	r2, [r3, #24]
}
 800078c:	bf00      	nop
 800078e:	370c      	adds	r7, #12
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr
 8000798:	e000e100 	.word	0xe000e100
 800079c:	e000ed00 	.word	0xe000ed00

080007a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b089      	sub	sp, #36	; 0x24
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	60f8      	str	r0, [r7, #12]
 80007a8:	60b9      	str	r1, [r7, #8]
 80007aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	f003 0307 	and.w	r3, r3, #7
 80007b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007b4:	69fb      	ldr	r3, [r7, #28]
 80007b6:	f1c3 0307 	rsb	r3, r3, #7
 80007ba:	2b04      	cmp	r3, #4
 80007bc:	bf28      	it	cs
 80007be:	2304      	movcs	r3, #4
 80007c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007c2:	69fb      	ldr	r3, [r7, #28]
 80007c4:	3304      	adds	r3, #4
 80007c6:	2b06      	cmp	r3, #6
 80007c8:	d902      	bls.n	80007d0 <NVIC_EncodePriority+0x30>
 80007ca:	69fb      	ldr	r3, [r7, #28]
 80007cc:	3b03      	subs	r3, #3
 80007ce:	e000      	b.n	80007d2 <NVIC_EncodePriority+0x32>
 80007d0:	2300      	movs	r3, #0
 80007d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d4:	f04f 32ff 	mov.w	r2, #4294967295
 80007d8:	69bb      	ldr	r3, [r7, #24]
 80007da:	fa02 f303 	lsl.w	r3, r2, r3
 80007de:	43da      	mvns	r2, r3
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	401a      	ands	r2, r3
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007e8:	f04f 31ff 	mov.w	r1, #4294967295
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	fa01 f303 	lsl.w	r3, r1, r3
 80007f2:	43d9      	mvns	r1, r3
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007f8:	4313      	orrs	r3, r2
         );
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3724      	adds	r7, #36	; 0x24
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
	...

08000808 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	3b01      	subs	r3, #1
 8000814:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000818:	d301      	bcc.n	800081e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800081a:	2301      	movs	r3, #1
 800081c:	e00f      	b.n	800083e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800081e:	4a0a      	ldr	r2, [pc, #40]	; (8000848 <SysTick_Config+0x40>)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	3b01      	subs	r3, #1
 8000824:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000826:	210f      	movs	r1, #15
 8000828:	f04f 30ff 	mov.w	r0, #4294967295
 800082c:	f7ff ff8e 	bl	800074c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000830:	4b05      	ldr	r3, [pc, #20]	; (8000848 <SysTick_Config+0x40>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000836:	4b04      	ldr	r3, [pc, #16]	; (8000848 <SysTick_Config+0x40>)
 8000838:	2207      	movs	r2, #7
 800083a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800083c:	2300      	movs	r3, #0
}
 800083e:	4618      	mov	r0, r3
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	e000e010 	.word	0xe000e010

0800084c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000854:	6878      	ldr	r0, [r7, #4]
 8000856:	f7ff ff29 	bl	80006ac <__NVIC_SetPriorityGrouping>
}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}

08000862 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000862:	b580      	push	{r7, lr}
 8000864:	b086      	sub	sp, #24
 8000866:	af00      	add	r7, sp, #0
 8000868:	4603      	mov	r3, r0
 800086a:	60b9      	str	r1, [r7, #8]
 800086c:	607a      	str	r2, [r7, #4]
 800086e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000870:	2300      	movs	r3, #0
 8000872:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000874:	f7ff ff3e 	bl	80006f4 <__NVIC_GetPriorityGrouping>
 8000878:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800087a:	687a      	ldr	r2, [r7, #4]
 800087c:	68b9      	ldr	r1, [r7, #8]
 800087e:	6978      	ldr	r0, [r7, #20]
 8000880:	f7ff ff8e 	bl	80007a0 <NVIC_EncodePriority>
 8000884:	4602      	mov	r2, r0
 8000886:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800088a:	4611      	mov	r1, r2
 800088c:	4618      	mov	r0, r3
 800088e:	f7ff ff5d 	bl	800074c <__NVIC_SetPriority>
}
 8000892:	bf00      	nop
 8000894:	3718      	adds	r7, #24
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}

0800089a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800089a:	b580      	push	{r7, lr}
 800089c:	b082      	sub	sp, #8
 800089e:	af00      	add	r7, sp, #0
 80008a0:	4603      	mov	r3, r0
 80008a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a8:	4618      	mov	r0, r3
 80008aa:	f7ff ff31 	bl	8000710 <__NVIC_EnableIRQ>
}
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}

080008b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008b6:	b580      	push	{r7, lr}
 80008b8:	b082      	sub	sp, #8
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008be:	6878      	ldr	r0, [r7, #4]
 80008c0:	f7ff ffa2 	bl	8000808 <SysTick_Config>
 80008c4:	4603      	mov	r3, r0
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
	...

080008d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b087      	sub	sp, #28
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
 80008d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008da:	2300      	movs	r3, #0
 80008dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008de:	e17f      	b.n	8000be0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	681a      	ldr	r2, [r3, #0]
 80008e4:	2101      	movs	r1, #1
 80008e6:	697b      	ldr	r3, [r7, #20]
 80008e8:	fa01 f303 	lsl.w	r3, r1, r3
 80008ec:	4013      	ands	r3, r2
 80008ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	f000 8171 	beq.w	8000bda <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	685b      	ldr	r3, [r3, #4]
 80008fc:	2b01      	cmp	r3, #1
 80008fe:	d00b      	beq.n	8000918 <HAL_GPIO_Init+0x48>
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	685b      	ldr	r3, [r3, #4]
 8000904:	2b02      	cmp	r3, #2
 8000906:	d007      	beq.n	8000918 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800090c:	2b11      	cmp	r3, #17
 800090e:	d003      	beq.n	8000918 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	685b      	ldr	r3, [r3, #4]
 8000914:	2b12      	cmp	r3, #18
 8000916:	d130      	bne.n	800097a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	689b      	ldr	r3, [r3, #8]
 800091c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800091e:	697b      	ldr	r3, [r7, #20]
 8000920:	005b      	lsls	r3, r3, #1
 8000922:	2203      	movs	r2, #3
 8000924:	fa02 f303 	lsl.w	r3, r2, r3
 8000928:	43db      	mvns	r3, r3
 800092a:	693a      	ldr	r2, [r7, #16]
 800092c:	4013      	ands	r3, r2
 800092e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	68da      	ldr	r2, [r3, #12]
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	005b      	lsls	r3, r3, #1
 8000938:	fa02 f303 	lsl.w	r3, r2, r3
 800093c:	693a      	ldr	r2, [r7, #16]
 800093e:	4313      	orrs	r3, r2
 8000940:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	693a      	ldr	r2, [r7, #16]
 8000946:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800094e:	2201      	movs	r2, #1
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	fa02 f303 	lsl.w	r3, r2, r3
 8000956:	43db      	mvns	r3, r3
 8000958:	693a      	ldr	r2, [r7, #16]
 800095a:	4013      	ands	r3, r2
 800095c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	685b      	ldr	r3, [r3, #4]
 8000962:	091b      	lsrs	r3, r3, #4
 8000964:	f003 0201 	and.w	r2, r3, #1
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	fa02 f303 	lsl.w	r3, r2, r3
 800096e:	693a      	ldr	r2, [r7, #16]
 8000970:	4313      	orrs	r3, r2
 8000972:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	693a      	ldr	r2, [r7, #16]
 8000978:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	685b      	ldr	r3, [r3, #4]
 800097e:	f003 0303 	and.w	r3, r3, #3
 8000982:	2b03      	cmp	r3, #3
 8000984:	d118      	bne.n	80009b8 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800098a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800098c:	2201      	movs	r2, #1
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	fa02 f303 	lsl.w	r3, r2, r3
 8000994:	43db      	mvns	r3, r3
 8000996:	693a      	ldr	r2, [r7, #16]
 8000998:	4013      	ands	r3, r2
 800099a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	685b      	ldr	r3, [r3, #4]
 80009a0:	08db      	lsrs	r3, r3, #3
 80009a2:	f003 0201 	and.w	r2, r3, #1
 80009a6:	697b      	ldr	r3, [r7, #20]
 80009a8:	fa02 f303 	lsl.w	r3, r2, r3
 80009ac:	693a      	ldr	r2, [r7, #16]
 80009ae:	4313      	orrs	r3, r2
 80009b0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	693a      	ldr	r2, [r7, #16]
 80009b6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	68db      	ldr	r3, [r3, #12]
 80009bc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80009be:	697b      	ldr	r3, [r7, #20]
 80009c0:	005b      	lsls	r3, r3, #1
 80009c2:	2203      	movs	r2, #3
 80009c4:	fa02 f303 	lsl.w	r3, r2, r3
 80009c8:	43db      	mvns	r3, r3
 80009ca:	693a      	ldr	r2, [r7, #16]
 80009cc:	4013      	ands	r3, r2
 80009ce:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	689a      	ldr	r2, [r3, #8]
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	005b      	lsls	r3, r3, #1
 80009d8:	fa02 f303 	lsl.w	r3, r2, r3
 80009dc:	693a      	ldr	r2, [r7, #16]
 80009de:	4313      	orrs	r3, r2
 80009e0:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	693a      	ldr	r2, [r7, #16]
 80009e6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	685b      	ldr	r3, [r3, #4]
 80009ec:	2b02      	cmp	r3, #2
 80009ee:	d003      	beq.n	80009f8 <HAL_GPIO_Init+0x128>
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	2b12      	cmp	r3, #18
 80009f6:	d123      	bne.n	8000a40 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	08da      	lsrs	r2, r3, #3
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	3208      	adds	r2, #8
 8000a00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a04:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a06:	697b      	ldr	r3, [r7, #20]
 8000a08:	f003 0307 	and.w	r3, r3, #7
 8000a0c:	009b      	lsls	r3, r3, #2
 8000a0e:	220f      	movs	r2, #15
 8000a10:	fa02 f303 	lsl.w	r3, r2, r3
 8000a14:	43db      	mvns	r3, r3
 8000a16:	693a      	ldr	r2, [r7, #16]
 8000a18:	4013      	ands	r3, r2
 8000a1a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	691a      	ldr	r2, [r3, #16]
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	f003 0307 	and.w	r3, r3, #7
 8000a26:	009b      	lsls	r3, r3, #2
 8000a28:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2c:	693a      	ldr	r2, [r7, #16]
 8000a2e:	4313      	orrs	r3, r2
 8000a30:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	08da      	lsrs	r2, r3, #3
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	3208      	adds	r2, #8
 8000a3a:	6939      	ldr	r1, [r7, #16]
 8000a3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	005b      	lsls	r3, r3, #1
 8000a4a:	2203      	movs	r2, #3
 8000a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a50:	43db      	mvns	r3, r3
 8000a52:	693a      	ldr	r2, [r7, #16]
 8000a54:	4013      	ands	r3, r2
 8000a56:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	685b      	ldr	r3, [r3, #4]
 8000a5c:	f003 0203 	and.w	r2, r3, #3
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	005b      	lsls	r3, r3, #1
 8000a64:	fa02 f303 	lsl.w	r3, r2, r3
 8000a68:	693a      	ldr	r2, [r7, #16]
 8000a6a:	4313      	orrs	r3, r2
 8000a6c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	693a      	ldr	r2, [r7, #16]
 8000a72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	f000 80ac 	beq.w	8000bda <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a82:	4b5e      	ldr	r3, [pc, #376]	; (8000bfc <HAL_GPIO_Init+0x32c>)
 8000a84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a86:	4a5d      	ldr	r2, [pc, #372]	; (8000bfc <HAL_GPIO_Init+0x32c>)
 8000a88:	f043 0301 	orr.w	r3, r3, #1
 8000a8c:	6613      	str	r3, [r2, #96]	; 0x60
 8000a8e:	4b5b      	ldr	r3, [pc, #364]	; (8000bfc <HAL_GPIO_Init+0x32c>)
 8000a90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a92:	f003 0301 	and.w	r3, r3, #1
 8000a96:	60bb      	str	r3, [r7, #8]
 8000a98:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a9a:	4a59      	ldr	r2, [pc, #356]	; (8000c00 <HAL_GPIO_Init+0x330>)
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	089b      	lsrs	r3, r3, #2
 8000aa0:	3302      	adds	r3, #2
 8000aa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aa6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	f003 0303 	and.w	r3, r3, #3
 8000aae:	009b      	lsls	r3, r3, #2
 8000ab0:	220f      	movs	r2, #15
 8000ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab6:	43db      	mvns	r3, r3
 8000ab8:	693a      	ldr	r2, [r7, #16]
 8000aba:	4013      	ands	r3, r2
 8000abc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ac4:	d025      	beq.n	8000b12 <HAL_GPIO_Init+0x242>
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4a4e      	ldr	r2, [pc, #312]	; (8000c04 <HAL_GPIO_Init+0x334>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d01f      	beq.n	8000b0e <HAL_GPIO_Init+0x23e>
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4a4d      	ldr	r2, [pc, #308]	; (8000c08 <HAL_GPIO_Init+0x338>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d019      	beq.n	8000b0a <HAL_GPIO_Init+0x23a>
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	4a4c      	ldr	r2, [pc, #304]	; (8000c0c <HAL_GPIO_Init+0x33c>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d013      	beq.n	8000b06 <HAL_GPIO_Init+0x236>
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	4a4b      	ldr	r2, [pc, #300]	; (8000c10 <HAL_GPIO_Init+0x340>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d00d      	beq.n	8000b02 <HAL_GPIO_Init+0x232>
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4a4a      	ldr	r2, [pc, #296]	; (8000c14 <HAL_GPIO_Init+0x344>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d007      	beq.n	8000afe <HAL_GPIO_Init+0x22e>
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4a49      	ldr	r2, [pc, #292]	; (8000c18 <HAL_GPIO_Init+0x348>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d101      	bne.n	8000afa <HAL_GPIO_Init+0x22a>
 8000af6:	2306      	movs	r3, #6
 8000af8:	e00c      	b.n	8000b14 <HAL_GPIO_Init+0x244>
 8000afa:	2307      	movs	r3, #7
 8000afc:	e00a      	b.n	8000b14 <HAL_GPIO_Init+0x244>
 8000afe:	2305      	movs	r3, #5
 8000b00:	e008      	b.n	8000b14 <HAL_GPIO_Init+0x244>
 8000b02:	2304      	movs	r3, #4
 8000b04:	e006      	b.n	8000b14 <HAL_GPIO_Init+0x244>
 8000b06:	2303      	movs	r3, #3
 8000b08:	e004      	b.n	8000b14 <HAL_GPIO_Init+0x244>
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	e002      	b.n	8000b14 <HAL_GPIO_Init+0x244>
 8000b0e:	2301      	movs	r3, #1
 8000b10:	e000      	b.n	8000b14 <HAL_GPIO_Init+0x244>
 8000b12:	2300      	movs	r3, #0
 8000b14:	697a      	ldr	r2, [r7, #20]
 8000b16:	f002 0203 	and.w	r2, r2, #3
 8000b1a:	0092      	lsls	r2, r2, #2
 8000b1c:	4093      	lsls	r3, r2
 8000b1e:	693a      	ldr	r2, [r7, #16]
 8000b20:	4313      	orrs	r3, r2
 8000b22:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b24:	4936      	ldr	r1, [pc, #216]	; (8000c00 <HAL_GPIO_Init+0x330>)
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	089b      	lsrs	r3, r3, #2
 8000b2a:	3302      	adds	r3, #2
 8000b2c:	693a      	ldr	r2, [r7, #16]
 8000b2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000b32:	4b3a      	ldr	r3, [pc, #232]	; (8000c1c <HAL_GPIO_Init+0x34c>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	43db      	mvns	r3, r3
 8000b3c:	693a      	ldr	r2, [r7, #16]
 8000b3e:	4013      	ands	r3, r2
 8000b40:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d003      	beq.n	8000b56 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	4313      	orrs	r3, r2
 8000b54:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000b56:	4a31      	ldr	r2, [pc, #196]	; (8000c1c <HAL_GPIO_Init+0x34c>)
 8000b58:	693b      	ldr	r3, [r7, #16]
 8000b5a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000b5c:	4b2f      	ldr	r3, [pc, #188]	; (8000c1c <HAL_GPIO_Init+0x34c>)
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	43db      	mvns	r3, r3
 8000b66:	693a      	ldr	r2, [r7, #16]
 8000b68:	4013      	ands	r3, r2
 8000b6a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d003      	beq.n	8000b80 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000b78:	693a      	ldr	r2, [r7, #16]
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000b80:	4a26      	ldr	r2, [pc, #152]	; (8000c1c <HAL_GPIO_Init+0x34c>)
 8000b82:	693b      	ldr	r3, [r7, #16]
 8000b84:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b86:	4b25      	ldr	r3, [pc, #148]	; (8000c1c <HAL_GPIO_Init+0x34c>)
 8000b88:	689b      	ldr	r3, [r3, #8]
 8000b8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	43db      	mvns	r3, r3
 8000b90:	693a      	ldr	r2, [r7, #16]
 8000b92:	4013      	ands	r3, r2
 8000b94:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d003      	beq.n	8000baa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000ba2:	693a      	ldr	r2, [r7, #16]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	4313      	orrs	r3, r2
 8000ba8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000baa:	4a1c      	ldr	r2, [pc, #112]	; (8000c1c <HAL_GPIO_Init+0x34c>)
 8000bac:	693b      	ldr	r3, [r7, #16]
 8000bae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000bb0:	4b1a      	ldr	r3, [pc, #104]	; (8000c1c <HAL_GPIO_Init+0x34c>)
 8000bb2:	68db      	ldr	r3, [r3, #12]
 8000bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	43db      	mvns	r3, r3
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d003      	beq.n	8000bd4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000bcc:	693a      	ldr	r2, [r7, #16]
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000bd4:	4a11      	ldr	r2, [pc, #68]	; (8000c1c <HAL_GPIO_Init+0x34c>)
 8000bd6:	693b      	ldr	r3, [r7, #16]
 8000bd8:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	3301      	adds	r3, #1
 8000bde:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	fa22 f303 	lsr.w	r3, r2, r3
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	f47f ae78 	bne.w	80008e0 <HAL_GPIO_Init+0x10>
  }
}
 8000bf0:	bf00      	nop
 8000bf2:	371c      	adds	r7, #28
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr
 8000bfc:	40021000 	.word	0x40021000
 8000c00:	40010000 	.word	0x40010000
 8000c04:	48000400 	.word	0x48000400
 8000c08:	48000800 	.word	0x48000800
 8000c0c:	48000c00 	.word	0x48000c00
 8000c10:	48001000 	.word	0x48001000
 8000c14:	48001400 	.word	0x48001400
 8000c18:	48001800 	.word	0x48001800
 8000c1c:	40010400 	.word	0x40010400

08000c20 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b087      	sub	sp, #28
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8000c2e:	e0cd      	b.n	8000dcc <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8000c30:	2201      	movs	r2, #1
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	fa02 f303 	lsl.w	r3, r2, r3
 8000c38:	683a      	ldr	r2, [r7, #0]
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8000c3e:	693b      	ldr	r3, [r7, #16]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	f000 80c0 	beq.w	8000dc6 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8000c46:	4a68      	ldr	r2, [pc, #416]	; (8000de8 <HAL_GPIO_DeInit+0x1c8>)
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	089b      	lsrs	r3, r3, #2
 8000c4c:	3302      	adds	r3, #2
 8000c4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c52:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	f003 0303 	and.w	r3, r3, #3
 8000c5a:	009b      	lsls	r3, r3, #2
 8000c5c:	220f      	movs	r2, #15
 8000c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c62:	68fa      	ldr	r2, [r7, #12]
 8000c64:	4013      	ands	r3, r2
 8000c66:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c6e:	d025      	beq.n	8000cbc <HAL_GPIO_DeInit+0x9c>
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	4a5e      	ldr	r2, [pc, #376]	; (8000dec <HAL_GPIO_DeInit+0x1cc>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d01f      	beq.n	8000cb8 <HAL_GPIO_DeInit+0x98>
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	4a5d      	ldr	r2, [pc, #372]	; (8000df0 <HAL_GPIO_DeInit+0x1d0>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d019      	beq.n	8000cb4 <HAL_GPIO_DeInit+0x94>
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	4a5c      	ldr	r2, [pc, #368]	; (8000df4 <HAL_GPIO_DeInit+0x1d4>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d013      	beq.n	8000cb0 <HAL_GPIO_DeInit+0x90>
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	4a5b      	ldr	r2, [pc, #364]	; (8000df8 <HAL_GPIO_DeInit+0x1d8>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d00d      	beq.n	8000cac <HAL_GPIO_DeInit+0x8c>
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	4a5a      	ldr	r2, [pc, #360]	; (8000dfc <HAL_GPIO_DeInit+0x1dc>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d007      	beq.n	8000ca8 <HAL_GPIO_DeInit+0x88>
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	4a59      	ldr	r2, [pc, #356]	; (8000e00 <HAL_GPIO_DeInit+0x1e0>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d101      	bne.n	8000ca4 <HAL_GPIO_DeInit+0x84>
 8000ca0:	2306      	movs	r3, #6
 8000ca2:	e00c      	b.n	8000cbe <HAL_GPIO_DeInit+0x9e>
 8000ca4:	2307      	movs	r3, #7
 8000ca6:	e00a      	b.n	8000cbe <HAL_GPIO_DeInit+0x9e>
 8000ca8:	2305      	movs	r3, #5
 8000caa:	e008      	b.n	8000cbe <HAL_GPIO_DeInit+0x9e>
 8000cac:	2304      	movs	r3, #4
 8000cae:	e006      	b.n	8000cbe <HAL_GPIO_DeInit+0x9e>
 8000cb0:	2303      	movs	r3, #3
 8000cb2:	e004      	b.n	8000cbe <HAL_GPIO_DeInit+0x9e>
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	e002      	b.n	8000cbe <HAL_GPIO_DeInit+0x9e>
 8000cb8:	2301      	movs	r3, #1
 8000cba:	e000      	b.n	8000cbe <HAL_GPIO_DeInit+0x9e>
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	697a      	ldr	r2, [r7, #20]
 8000cc0:	f002 0203 	and.w	r2, r2, #3
 8000cc4:	0092      	lsls	r2, r2, #2
 8000cc6:	4093      	lsls	r3, r2
 8000cc8:	68fa      	ldr	r2, [r7, #12]
 8000cca:	429a      	cmp	r2, r3
 8000ccc:	d132      	bne.n	8000d34 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8000cce:	4b4d      	ldr	r3, [pc, #308]	; (8000e04 <HAL_GPIO_DeInit+0x1e4>)
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	693b      	ldr	r3, [r7, #16]
 8000cd4:	43db      	mvns	r3, r3
 8000cd6:	494b      	ldr	r1, [pc, #300]	; (8000e04 <HAL_GPIO_DeInit+0x1e4>)
 8000cd8:	4013      	ands	r3, r2
 8000cda:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8000cdc:	4b49      	ldr	r3, [pc, #292]	; (8000e04 <HAL_GPIO_DeInit+0x1e4>)
 8000cde:	685a      	ldr	r2, [r3, #4]
 8000ce0:	693b      	ldr	r3, [r7, #16]
 8000ce2:	43db      	mvns	r3, r3
 8000ce4:	4947      	ldr	r1, [pc, #284]	; (8000e04 <HAL_GPIO_DeInit+0x1e4>)
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8000cea:	4b46      	ldr	r3, [pc, #280]	; (8000e04 <HAL_GPIO_DeInit+0x1e4>)
 8000cec:	689a      	ldr	r2, [r3, #8]
 8000cee:	693b      	ldr	r3, [r7, #16]
 8000cf0:	43db      	mvns	r3, r3
 8000cf2:	4944      	ldr	r1, [pc, #272]	; (8000e04 <HAL_GPIO_DeInit+0x1e4>)
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8000cf8:	4b42      	ldr	r3, [pc, #264]	; (8000e04 <HAL_GPIO_DeInit+0x1e4>)
 8000cfa:	68da      	ldr	r2, [r3, #12]
 8000cfc:	693b      	ldr	r3, [r7, #16]
 8000cfe:	43db      	mvns	r3, r3
 8000d00:	4940      	ldr	r1, [pc, #256]	; (8000e04 <HAL_GPIO_DeInit+0x1e4>)
 8000d02:	4013      	ands	r3, r2
 8000d04:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	f003 0303 	and.w	r3, r3, #3
 8000d0c:	009b      	lsls	r3, r3, #2
 8000d0e:	220f      	movs	r2, #15
 8000d10:	fa02 f303 	lsl.w	r3, r2, r3
 8000d14:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8000d16:	4a34      	ldr	r2, [pc, #208]	; (8000de8 <HAL_GPIO_DeInit+0x1c8>)
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	089b      	lsrs	r3, r3, #2
 8000d1c:	3302      	adds	r3, #2
 8000d1e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	43da      	mvns	r2, r3
 8000d26:	4830      	ldr	r0, [pc, #192]	; (8000de8 <HAL_GPIO_DeInit+0x1c8>)
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	089b      	lsrs	r3, r3, #2
 8000d2c:	400a      	ands	r2, r1
 8000d2e:	3302      	adds	r3, #2
 8000d30:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	005b      	lsls	r3, r3, #1
 8000d3c:	2103      	movs	r1, #3
 8000d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d42:	431a      	orrs	r2, r3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	08da      	lsrs	r2, r3, #3
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	3208      	adds	r2, #8
 8000d50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	f003 0307 	and.w	r3, r3, #7
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	220f      	movs	r2, #15
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	43db      	mvns	r3, r3
 8000d64:	697a      	ldr	r2, [r7, #20]
 8000d66:	08d2      	lsrs	r2, r2, #3
 8000d68:	4019      	ands	r1, r3
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	3208      	adds	r2, #8
 8000d6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	689a      	ldr	r2, [r3, #8]
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	005b      	lsls	r3, r3, #1
 8000d7a:	2103      	movs	r1, #3
 8000d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d80:	43db      	mvns	r3, r3
 8000d82:	401a      	ands	r2, r3
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	685a      	ldr	r2, [r3, #4]
 8000d8c:	2101      	movs	r1, #1
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	fa01 f303 	lsl.w	r3, r1, r3
 8000d94:	43db      	mvns	r3, r3
 8000d96:	401a      	ands	r2, r3
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	68da      	ldr	r2, [r3, #12]
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	2103      	movs	r1, #3
 8000da6:	fa01 f303 	lsl.w	r3, r1, r3
 8000daa:	43db      	mvns	r3, r3
 8000dac:	401a      	ands	r2, r3
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000db6:	2101      	movs	r1, #1
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	fa01 f303 	lsl.w	r3, r1, r3
 8000dbe:	43db      	mvns	r3, r3
 8000dc0:	401a      	ands	r2, r3
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8000dcc:	683a      	ldr	r2, [r7, #0]
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	fa22 f303 	lsr.w	r3, r2, r3
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	f47f af2b 	bne.w	8000c30 <HAL_GPIO_DeInit+0x10>
  }
}
 8000dda:	bf00      	nop
 8000ddc:	371c      	adds	r7, #28
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	40010000 	.word	0x40010000
 8000dec:	48000400 	.word	0x48000400
 8000df0:	48000800 	.word	0x48000800
 8000df4:	48000c00 	.word	0x48000c00
 8000df8:	48001000 	.word	0x48001000
 8000dfc:	48001400 	.word	0x48001400
 8000e00:	48001800 	.word	0x48001800
 8000e04:	40010400 	.word	0x40010400

08000e08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
 8000e10:	460b      	mov	r3, r1
 8000e12:	807b      	strh	r3, [r7, #2]
 8000e14:	4613      	mov	r3, r2
 8000e16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e18:	787b      	ldrb	r3, [r7, #1]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d003      	beq.n	8000e26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e1e:	887a      	ldrh	r2, [r7, #2]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e24:	e002      	b.n	8000e2c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e26:	887a      	ldrh	r2, [r7, #2]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e2c:	bf00      	nop
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr

08000e38 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b085      	sub	sp, #20
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	460b      	mov	r3, r1
 8000e42:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	695b      	ldr	r3, [r3, #20]
 8000e48:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e4a:	887a      	ldrh	r2, [r7, #2]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	4013      	ands	r3, r2
 8000e50:	041a      	lsls	r2, r3, #16
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	43d9      	mvns	r1, r3
 8000e56:	887b      	ldrh	r3, [r7, #2]
 8000e58:	400b      	ands	r3, r1
 8000e5a:	431a      	orrs	r2, r3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	619a      	str	r2, [r3, #24]
}
 8000e60:	bf00      	nop
 8000e62:	3714      	adds	r7, #20
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr

08000e6c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000e76:	4b08      	ldr	r3, [pc, #32]	; (8000e98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e78:	695a      	ldr	r2, [r3, #20]
 8000e7a:	88fb      	ldrh	r3, [r7, #6]
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d006      	beq.n	8000e90 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000e82:	4a05      	ldr	r2, [pc, #20]	; (8000e98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e84:	88fb      	ldrh	r3, [r7, #6]
 8000e86:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000e88:	88fb      	ldrh	r3, [r7, #6]
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f003 fb90 	bl	80045b0 <HAL_GPIO_EXTI_Callback>
  }
}
 8000e90:	bf00      	nop
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	40010400 	.word	0x40010400

08000e9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d101      	bne.n	8000eae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e081      	b.n	8000fb2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d106      	bne.n	8000ec8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f003 fe32 	bl	8004b2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2224      	movs	r2, #36	; 0x24
 8000ecc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f022 0201 	bic.w	r2, r2, #1
 8000ede:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	685a      	ldr	r2, [r3, #4]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000eec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	689a      	ldr	r2, [r3, #8]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000efc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	68db      	ldr	r3, [r3, #12]
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d107      	bne.n	8000f16 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	689a      	ldr	r2, [r3, #8]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000f12:	609a      	str	r2, [r3, #8]
 8000f14:	e006      	b.n	8000f24 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	689a      	ldr	r2, [r3, #8]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000f22:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	2b02      	cmp	r3, #2
 8000f2a:	d104      	bne.n	8000f36 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f34:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	687a      	ldr	r2, [r7, #4]
 8000f3e:	6812      	ldr	r2, [r2, #0]
 8000f40:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f48:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	68da      	ldr	r2, [r3, #12]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000f58:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	691a      	ldr	r2, [r3, #16]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	695b      	ldr	r3, [r3, #20]
 8000f62:	ea42 0103 	orr.w	r1, r2, r3
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	699b      	ldr	r3, [r3, #24]
 8000f6a:	021a      	lsls	r2, r3, #8
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	430a      	orrs	r2, r1
 8000f72:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	69d9      	ldr	r1, [r3, #28]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6a1a      	ldr	r2, [r3, #32]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	430a      	orrs	r2, r1
 8000f82:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f042 0201 	orr.w	r2, r2, #1
 8000f92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2200      	movs	r2, #0
 8000f98:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2220      	movs	r2, #32
 8000f9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2200      	movs	r2, #0
 8000fac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b082      	sub	sp, #8
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d101      	bne.n	8000fcc <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	e021      	b.n	8001010 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2224      	movs	r2, #36	; 0x24
 8000fd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f022 0201 	bic.w	r2, r2, #1
 8000fe2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f003 fde5 	bl	8004bb4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2200      	movs	r2, #0
 8000fee:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2200      	movs	r2, #0
 8001002:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2200      	movs	r2, #0
 800100a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800100e:	2300      	movs	r3, #0
}
 8001010:	4618      	mov	r0, r3
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b088      	sub	sp, #32
 800101c:	af02      	add	r7, sp, #8
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	4608      	mov	r0, r1
 8001022:	4611      	mov	r1, r2
 8001024:	461a      	mov	r2, r3
 8001026:	4603      	mov	r3, r0
 8001028:	817b      	strh	r3, [r7, #10]
 800102a:	460b      	mov	r3, r1
 800102c:	813b      	strh	r3, [r7, #8]
 800102e:	4613      	mov	r3, r2
 8001030:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001038:	b2db      	uxtb	r3, r3
 800103a:	2b20      	cmp	r3, #32
 800103c:	f040 80f9 	bne.w	8001232 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001040:	6a3b      	ldr	r3, [r7, #32]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d002      	beq.n	800104c <HAL_I2C_Mem_Write+0x34>
 8001046:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001048:	2b00      	cmp	r3, #0
 800104a:	d105      	bne.n	8001058 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001052:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001054:	2301      	movs	r3, #1
 8001056:	e0ed      	b.n	8001234 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800105e:	2b01      	cmp	r3, #1
 8001060:	d101      	bne.n	8001066 <HAL_I2C_Mem_Write+0x4e>
 8001062:	2302      	movs	r3, #2
 8001064:	e0e6      	b.n	8001234 <HAL_I2C_Mem_Write+0x21c>
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	2201      	movs	r2, #1
 800106a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800106e:	f7ff faef 	bl	8000650 <HAL_GetTick>
 8001072:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	9300      	str	r3, [sp, #0]
 8001078:	2319      	movs	r3, #25
 800107a:	2201      	movs	r2, #1
 800107c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001080:	68f8      	ldr	r0, [r7, #12]
 8001082:	f000 fac3 	bl	800160c <I2C_WaitOnFlagUntilTimeout>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800108c:	2301      	movs	r3, #1
 800108e:	e0d1      	b.n	8001234 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	2221      	movs	r2, #33	; 0x21
 8001094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	2240      	movs	r2, #64	; 0x40
 800109c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	2200      	movs	r2, #0
 80010a4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	6a3a      	ldr	r2, [r7, #32]
 80010aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80010b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	2200      	movs	r2, #0
 80010b6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80010b8:	88f8      	ldrh	r0, [r7, #6]
 80010ba:	893a      	ldrh	r2, [r7, #8]
 80010bc:	8979      	ldrh	r1, [r7, #10]
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	9301      	str	r3, [sp, #4]
 80010c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010c4:	9300      	str	r3, [sp, #0]
 80010c6:	4603      	mov	r3, r0
 80010c8:	68f8      	ldr	r0, [r7, #12]
 80010ca:	f000 f9d3 	bl	8001474 <I2C_RequestMemoryWrite>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d005      	beq.n	80010e0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	2200      	movs	r2, #0
 80010d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80010dc:	2301      	movs	r3, #1
 80010de:	e0a9      	b.n	8001234 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	2bff      	cmp	r3, #255	; 0xff
 80010e8:	d90e      	bls.n	8001108 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	22ff      	movs	r2, #255	; 0xff
 80010ee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010f4:	b2da      	uxtb	r2, r3
 80010f6:	8979      	ldrh	r1, [r7, #10]
 80010f8:	2300      	movs	r3, #0
 80010fa:	9300      	str	r3, [sp, #0]
 80010fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001100:	68f8      	ldr	r0, [r7, #12]
 8001102:	f000 fba5 	bl	8001850 <I2C_TransferConfig>
 8001106:	e00f      	b.n	8001128 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800110c:	b29a      	uxth	r2, r3
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001116:	b2da      	uxtb	r2, r3
 8001118:	8979      	ldrh	r1, [r7, #10]
 800111a:	2300      	movs	r3, #0
 800111c:	9300      	str	r3, [sp, #0]
 800111e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001122:	68f8      	ldr	r0, [r7, #12]
 8001124:	f000 fb94 	bl	8001850 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001128:	697a      	ldr	r2, [r7, #20]
 800112a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800112c:	68f8      	ldr	r0, [r7, #12]
 800112e:	f000 faad 	bl	800168c <I2C_WaitOnTXISFlagUntilTimeout>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001138:	2301      	movs	r3, #1
 800113a:	e07b      	b.n	8001234 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001140:	781a      	ldrb	r2, [r3, #0]
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800114c:	1c5a      	adds	r2, r3, #1
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001156:	b29b      	uxth	r3, r3
 8001158:	3b01      	subs	r3, #1
 800115a:	b29a      	uxth	r2, r3
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001164:	3b01      	subs	r3, #1
 8001166:	b29a      	uxth	r2, r3
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001170:	b29b      	uxth	r3, r3
 8001172:	2b00      	cmp	r3, #0
 8001174:	d034      	beq.n	80011e0 <HAL_I2C_Mem_Write+0x1c8>
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800117a:	2b00      	cmp	r3, #0
 800117c:	d130      	bne.n	80011e0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001184:	2200      	movs	r2, #0
 8001186:	2180      	movs	r1, #128	; 0x80
 8001188:	68f8      	ldr	r0, [r7, #12]
 800118a:	f000 fa3f 	bl	800160c <I2C_WaitOnFlagUntilTimeout>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001194:	2301      	movs	r3, #1
 8001196:	e04d      	b.n	8001234 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800119c:	b29b      	uxth	r3, r3
 800119e:	2bff      	cmp	r3, #255	; 0xff
 80011a0:	d90e      	bls.n	80011c0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	22ff      	movs	r2, #255	; 0xff
 80011a6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011ac:	b2da      	uxtb	r2, r3
 80011ae:	8979      	ldrh	r1, [r7, #10]
 80011b0:	2300      	movs	r3, #0
 80011b2:	9300      	str	r3, [sp, #0]
 80011b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80011b8:	68f8      	ldr	r0, [r7, #12]
 80011ba:	f000 fb49 	bl	8001850 <I2C_TransferConfig>
 80011be:	e00f      	b.n	80011e0 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011c4:	b29a      	uxth	r2, r3
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011ce:	b2da      	uxtb	r2, r3
 80011d0:	8979      	ldrh	r1, [r7, #10]
 80011d2:	2300      	movs	r3, #0
 80011d4:	9300      	str	r3, [sp, #0]
 80011d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80011da:	68f8      	ldr	r0, [r7, #12]
 80011dc:	f000 fb38 	bl	8001850 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011e4:	b29b      	uxth	r3, r3
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d19e      	bne.n	8001128 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80011ea:	697a      	ldr	r2, [r7, #20]
 80011ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80011ee:	68f8      	ldr	r0, [r7, #12]
 80011f0:	f000 fa8c 	bl	800170c <I2C_WaitOnSTOPFlagUntilTimeout>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e01a      	b.n	8001234 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	2220      	movs	r2, #32
 8001204:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	6859      	ldr	r1, [r3, #4]
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	4b0a      	ldr	r3, [pc, #40]	; (800123c <HAL_I2C_Mem_Write+0x224>)
 8001212:	400b      	ands	r3, r1
 8001214:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	2220      	movs	r2, #32
 800121a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	2200      	movs	r2, #0
 8001222:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	2200      	movs	r2, #0
 800122a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800122e:	2300      	movs	r3, #0
 8001230:	e000      	b.n	8001234 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001232:	2302      	movs	r3, #2
  }
}
 8001234:	4618      	mov	r0, r3
 8001236:	3718      	adds	r7, #24
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	fe00e800 	.word	0xfe00e800

08001240 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b088      	sub	sp, #32
 8001244:	af02      	add	r7, sp, #8
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	4608      	mov	r0, r1
 800124a:	4611      	mov	r1, r2
 800124c:	461a      	mov	r2, r3
 800124e:	4603      	mov	r3, r0
 8001250:	817b      	strh	r3, [r7, #10]
 8001252:	460b      	mov	r3, r1
 8001254:	813b      	strh	r3, [r7, #8]
 8001256:	4613      	mov	r3, r2
 8001258:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001260:	b2db      	uxtb	r3, r3
 8001262:	2b20      	cmp	r3, #32
 8001264:	f040 80fd 	bne.w	8001462 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001268:	6a3b      	ldr	r3, [r7, #32]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d002      	beq.n	8001274 <HAL_I2C_Mem_Read+0x34>
 800126e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001270:	2b00      	cmp	r3, #0
 8001272:	d105      	bne.n	8001280 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	f44f 7200 	mov.w	r2, #512	; 0x200
 800127a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800127c:	2301      	movs	r3, #1
 800127e:	e0f1      	b.n	8001464 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001286:	2b01      	cmp	r3, #1
 8001288:	d101      	bne.n	800128e <HAL_I2C_Mem_Read+0x4e>
 800128a:	2302      	movs	r3, #2
 800128c:	e0ea      	b.n	8001464 <HAL_I2C_Mem_Read+0x224>
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	2201      	movs	r2, #1
 8001292:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001296:	f7ff f9db 	bl	8000650 <HAL_GetTick>
 800129a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	9300      	str	r3, [sp, #0]
 80012a0:	2319      	movs	r3, #25
 80012a2:	2201      	movs	r2, #1
 80012a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012a8:	68f8      	ldr	r0, [r7, #12]
 80012aa:	f000 f9af 	bl	800160c <I2C_WaitOnFlagUntilTimeout>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80012b4:	2301      	movs	r3, #1
 80012b6:	e0d5      	b.n	8001464 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	2222      	movs	r2, #34	; 0x22
 80012bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	2240      	movs	r2, #64	; 0x40
 80012c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	2200      	movs	r2, #0
 80012cc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	6a3a      	ldr	r2, [r7, #32]
 80012d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80012d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	2200      	movs	r2, #0
 80012de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80012e0:	88f8      	ldrh	r0, [r7, #6]
 80012e2:	893a      	ldrh	r2, [r7, #8]
 80012e4:	8979      	ldrh	r1, [r7, #10]
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	9301      	str	r3, [sp, #4]
 80012ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012ec:	9300      	str	r3, [sp, #0]
 80012ee:	4603      	mov	r3, r0
 80012f0:	68f8      	ldr	r0, [r7, #12]
 80012f2:	f000 f913 	bl	800151c <I2C_RequestMemoryRead>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d005      	beq.n	8001308 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	2200      	movs	r2, #0
 8001300:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001304:	2301      	movs	r3, #1
 8001306:	e0ad      	b.n	8001464 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800130c:	b29b      	uxth	r3, r3
 800130e:	2bff      	cmp	r3, #255	; 0xff
 8001310:	d90e      	bls.n	8001330 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	22ff      	movs	r2, #255	; 0xff
 8001316:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800131c:	b2da      	uxtb	r2, r3
 800131e:	8979      	ldrh	r1, [r7, #10]
 8001320:	4b52      	ldr	r3, [pc, #328]	; (800146c <HAL_I2C_Mem_Read+0x22c>)
 8001322:	9300      	str	r3, [sp, #0]
 8001324:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001328:	68f8      	ldr	r0, [r7, #12]
 800132a:	f000 fa91 	bl	8001850 <I2C_TransferConfig>
 800132e:	e00f      	b.n	8001350 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001334:	b29a      	uxth	r2, r3
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800133e:	b2da      	uxtb	r2, r3
 8001340:	8979      	ldrh	r1, [r7, #10]
 8001342:	4b4a      	ldr	r3, [pc, #296]	; (800146c <HAL_I2C_Mem_Read+0x22c>)
 8001344:	9300      	str	r3, [sp, #0]
 8001346:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800134a:	68f8      	ldr	r0, [r7, #12]
 800134c:	f000 fa80 	bl	8001850 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	9300      	str	r3, [sp, #0]
 8001354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001356:	2200      	movs	r2, #0
 8001358:	2104      	movs	r1, #4
 800135a:	68f8      	ldr	r0, [r7, #12]
 800135c:	f000 f956 	bl	800160c <I2C_WaitOnFlagUntilTimeout>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e07c      	b.n	8001464 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001374:	b2d2      	uxtb	r2, r2
 8001376:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800137c:	1c5a      	adds	r2, r3, #1
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001386:	3b01      	subs	r3, #1
 8001388:	b29a      	uxth	r2, r3
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001392:	b29b      	uxth	r3, r3
 8001394:	3b01      	subs	r3, #1
 8001396:	b29a      	uxth	r2, r3
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d034      	beq.n	8001410 <HAL_I2C_Mem_Read+0x1d0>
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d130      	bne.n	8001410 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	9300      	str	r3, [sp, #0]
 80013b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013b4:	2200      	movs	r2, #0
 80013b6:	2180      	movs	r1, #128	; 0x80
 80013b8:	68f8      	ldr	r0, [r7, #12]
 80013ba:	f000 f927 	bl	800160c <I2C_WaitOnFlagUntilTimeout>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	e04d      	b.n	8001464 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	2bff      	cmp	r3, #255	; 0xff
 80013d0:	d90e      	bls.n	80013f0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	22ff      	movs	r2, #255	; 0xff
 80013d6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013dc:	b2da      	uxtb	r2, r3
 80013de:	8979      	ldrh	r1, [r7, #10]
 80013e0:	2300      	movs	r3, #0
 80013e2:	9300      	str	r3, [sp, #0]
 80013e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013e8:	68f8      	ldr	r0, [r7, #12]
 80013ea:	f000 fa31 	bl	8001850 <I2C_TransferConfig>
 80013ee:	e00f      	b.n	8001410 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013f4:	b29a      	uxth	r2, r3
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013fe:	b2da      	uxtb	r2, r3
 8001400:	8979      	ldrh	r1, [r7, #10]
 8001402:	2300      	movs	r3, #0
 8001404:	9300      	str	r3, [sp, #0]
 8001406:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800140a:	68f8      	ldr	r0, [r7, #12]
 800140c:	f000 fa20 	bl	8001850 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001414:	b29b      	uxth	r3, r3
 8001416:	2b00      	cmp	r3, #0
 8001418:	d19a      	bne.n	8001350 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800141a:	697a      	ldr	r2, [r7, #20]
 800141c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800141e:	68f8      	ldr	r0, [r7, #12]
 8001420:	f000 f974 	bl	800170c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e01a      	b.n	8001464 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	2220      	movs	r2, #32
 8001434:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	6859      	ldr	r1, [r3, #4]
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	4b0b      	ldr	r3, [pc, #44]	; (8001470 <HAL_I2C_Mem_Read+0x230>)
 8001442:	400b      	ands	r3, r1
 8001444:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	2220      	movs	r2, #32
 800144a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	2200      	movs	r2, #0
 8001452:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	2200      	movs	r2, #0
 800145a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800145e:	2300      	movs	r3, #0
 8001460:	e000      	b.n	8001464 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001462:	2302      	movs	r3, #2
  }
}
 8001464:	4618      	mov	r0, r3
 8001466:	3718      	adds	r7, #24
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	80002400 	.word	0x80002400
 8001470:	fe00e800 	.word	0xfe00e800

08001474 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b086      	sub	sp, #24
 8001478:	af02      	add	r7, sp, #8
 800147a:	60f8      	str	r0, [r7, #12]
 800147c:	4608      	mov	r0, r1
 800147e:	4611      	mov	r1, r2
 8001480:	461a      	mov	r2, r3
 8001482:	4603      	mov	r3, r0
 8001484:	817b      	strh	r3, [r7, #10]
 8001486:	460b      	mov	r3, r1
 8001488:	813b      	strh	r3, [r7, #8]
 800148a:	4613      	mov	r3, r2
 800148c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800148e:	88fb      	ldrh	r3, [r7, #6]
 8001490:	b2da      	uxtb	r2, r3
 8001492:	8979      	ldrh	r1, [r7, #10]
 8001494:	4b20      	ldr	r3, [pc, #128]	; (8001518 <I2C_RequestMemoryWrite+0xa4>)
 8001496:	9300      	str	r3, [sp, #0]
 8001498:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800149c:	68f8      	ldr	r0, [r7, #12]
 800149e:	f000 f9d7 	bl	8001850 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80014a2:	69fa      	ldr	r2, [r7, #28]
 80014a4:	69b9      	ldr	r1, [r7, #24]
 80014a6:	68f8      	ldr	r0, [r7, #12]
 80014a8:	f000 f8f0 	bl	800168c <I2C_WaitOnTXISFlagUntilTimeout>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e02c      	b.n	8001510 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80014b6:	88fb      	ldrh	r3, [r7, #6]
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d105      	bne.n	80014c8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80014bc:	893b      	ldrh	r3, [r7, #8]
 80014be:	b2da      	uxtb	r2, r3
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	629a      	str	r2, [r3, #40]	; 0x28
 80014c6:	e015      	b.n	80014f4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80014c8:	893b      	ldrh	r3, [r7, #8]
 80014ca:	0a1b      	lsrs	r3, r3, #8
 80014cc:	b29b      	uxth	r3, r3
 80014ce:	b2da      	uxtb	r2, r3
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80014d6:	69fa      	ldr	r2, [r7, #28]
 80014d8:	69b9      	ldr	r1, [r7, #24]
 80014da:	68f8      	ldr	r0, [r7, #12]
 80014dc:	f000 f8d6 	bl	800168c <I2C_WaitOnTXISFlagUntilTimeout>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e012      	b.n	8001510 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80014ea:	893b      	ldrh	r3, [r7, #8]
 80014ec:	b2da      	uxtb	r2, r3
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	9300      	str	r3, [sp, #0]
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	2200      	movs	r2, #0
 80014fc:	2180      	movs	r1, #128	; 0x80
 80014fe:	68f8      	ldr	r0, [r7, #12]
 8001500:	f000 f884 	bl	800160c <I2C_WaitOnFlagUntilTimeout>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e000      	b.n	8001510 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800150e:	2300      	movs	r3, #0
}
 8001510:	4618      	mov	r0, r3
 8001512:	3710      	adds	r7, #16
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	80002000 	.word	0x80002000

0800151c <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b086      	sub	sp, #24
 8001520:	af02      	add	r7, sp, #8
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	4608      	mov	r0, r1
 8001526:	4611      	mov	r1, r2
 8001528:	461a      	mov	r2, r3
 800152a:	4603      	mov	r3, r0
 800152c:	817b      	strh	r3, [r7, #10]
 800152e:	460b      	mov	r3, r1
 8001530:	813b      	strh	r3, [r7, #8]
 8001532:	4613      	mov	r3, r2
 8001534:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001536:	88fb      	ldrh	r3, [r7, #6]
 8001538:	b2da      	uxtb	r2, r3
 800153a:	8979      	ldrh	r1, [r7, #10]
 800153c:	4b20      	ldr	r3, [pc, #128]	; (80015c0 <I2C_RequestMemoryRead+0xa4>)
 800153e:	9300      	str	r3, [sp, #0]
 8001540:	2300      	movs	r3, #0
 8001542:	68f8      	ldr	r0, [r7, #12]
 8001544:	f000 f984 	bl	8001850 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001548:	69fa      	ldr	r2, [r7, #28]
 800154a:	69b9      	ldr	r1, [r7, #24]
 800154c:	68f8      	ldr	r0, [r7, #12]
 800154e:	f000 f89d 	bl	800168c <I2C_WaitOnTXISFlagUntilTimeout>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e02c      	b.n	80015b6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800155c:	88fb      	ldrh	r3, [r7, #6]
 800155e:	2b01      	cmp	r3, #1
 8001560:	d105      	bne.n	800156e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001562:	893b      	ldrh	r3, [r7, #8]
 8001564:	b2da      	uxtb	r2, r3
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	629a      	str	r2, [r3, #40]	; 0x28
 800156c:	e015      	b.n	800159a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800156e:	893b      	ldrh	r3, [r7, #8]
 8001570:	0a1b      	lsrs	r3, r3, #8
 8001572:	b29b      	uxth	r3, r3
 8001574:	b2da      	uxtb	r2, r3
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800157c:	69fa      	ldr	r2, [r7, #28]
 800157e:	69b9      	ldr	r1, [r7, #24]
 8001580:	68f8      	ldr	r0, [r7, #12]
 8001582:	f000 f883 	bl	800168c <I2C_WaitOnTXISFlagUntilTimeout>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e012      	b.n	80015b6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001590:	893b      	ldrh	r3, [r7, #8]
 8001592:	b2da      	uxtb	r2, r3
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	9300      	str	r3, [sp, #0]
 800159e:	69bb      	ldr	r3, [r7, #24]
 80015a0:	2200      	movs	r2, #0
 80015a2:	2140      	movs	r1, #64	; 0x40
 80015a4:	68f8      	ldr	r0, [r7, #12]
 80015a6:	f000 f831 	bl	800160c <I2C_WaitOnFlagUntilTimeout>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e000      	b.n	80015b6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80015b4:	2300      	movs	r3, #0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3710      	adds	r7, #16
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	80002000 	.word	0x80002000

080015c4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	699b      	ldr	r3, [r3, #24]
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d103      	bne.n	80015e2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	2200      	movs	r2, #0
 80015e0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	699b      	ldr	r3, [r3, #24]
 80015e8:	f003 0301 	and.w	r3, r3, #1
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d007      	beq.n	8001600 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	699a      	ldr	r2, [r3, #24]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f042 0201 	orr.w	r2, r2, #1
 80015fe:	619a      	str	r2, [r3, #24]
  }
}
 8001600:	bf00      	nop
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	60f8      	str	r0, [r7, #12]
 8001614:	60b9      	str	r1, [r7, #8]
 8001616:	603b      	str	r3, [r7, #0]
 8001618:	4613      	mov	r3, r2
 800161a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800161c:	e022      	b.n	8001664 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001624:	d01e      	beq.n	8001664 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001626:	f7ff f813 	bl	8000650 <HAL_GetTick>
 800162a:	4602      	mov	r2, r0
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	683a      	ldr	r2, [r7, #0]
 8001632:	429a      	cmp	r2, r3
 8001634:	d302      	bcc.n	800163c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d113      	bne.n	8001664 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001640:	f043 0220 	orr.w	r2, r3, #32
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	2220      	movs	r2, #32
 800164c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	2200      	movs	r2, #0
 8001654:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	2200      	movs	r2, #0
 800165c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e00f      	b.n	8001684 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	699a      	ldr	r2, [r3, #24]
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	4013      	ands	r3, r2
 800166e:	68ba      	ldr	r2, [r7, #8]
 8001670:	429a      	cmp	r2, r3
 8001672:	bf0c      	ite	eq
 8001674:	2301      	moveq	r3, #1
 8001676:	2300      	movne	r3, #0
 8001678:	b2db      	uxtb	r3, r3
 800167a:	461a      	mov	r2, r3
 800167c:	79fb      	ldrb	r3, [r7, #7]
 800167e:	429a      	cmp	r2, r3
 8001680:	d0cd      	beq.n	800161e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001682:	2300      	movs	r3, #0
}
 8001684:	4618      	mov	r0, r3
 8001686:	3710      	adds	r7, #16
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}

0800168c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	60f8      	str	r0, [r7, #12]
 8001694:	60b9      	str	r1, [r7, #8]
 8001696:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001698:	e02c      	b.n	80016f4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	68b9      	ldr	r1, [r7, #8]
 800169e:	68f8      	ldr	r0, [r7, #12]
 80016a0:	f000 f870 	bl	8001784 <I2C_IsAcknowledgeFailed>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e02a      	b.n	8001704 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016b4:	d01e      	beq.n	80016f4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016b6:	f7fe ffcb 	bl	8000650 <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	68ba      	ldr	r2, [r7, #8]
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d302      	bcc.n	80016cc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d113      	bne.n	80016f4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d0:	f043 0220 	orr.w	r2, r3, #32
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	2220      	movs	r2, #32
 80016dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	2200      	movs	r2, #0
 80016e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	2200      	movs	r2, #0
 80016ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e007      	b.n	8001704 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	699b      	ldr	r3, [r3, #24]
 80016fa:	f003 0302 	and.w	r3, r3, #2
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d1cb      	bne.n	800169a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001702:	2300      	movs	r3, #0
}
 8001704:	4618      	mov	r0, r3
 8001706:	3710      	adds	r7, #16
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}

0800170c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	60b9      	str	r1, [r7, #8]
 8001716:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001718:	e028      	b.n	800176c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	68b9      	ldr	r1, [r7, #8]
 800171e:	68f8      	ldr	r0, [r7, #12]
 8001720:	f000 f830 	bl	8001784 <I2C_IsAcknowledgeFailed>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e026      	b.n	800177c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800172e:	f7fe ff8f 	bl	8000650 <HAL_GetTick>
 8001732:	4602      	mov	r2, r0
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	68ba      	ldr	r2, [r7, #8]
 800173a:	429a      	cmp	r2, r3
 800173c:	d302      	bcc.n	8001744 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d113      	bne.n	800176c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001748:	f043 0220 	orr.w	r2, r3, #32
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	2220      	movs	r2, #32
 8001754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	2200      	movs	r2, #0
 800175c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	2200      	movs	r2, #0
 8001764:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e007      	b.n	800177c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	699b      	ldr	r3, [r3, #24]
 8001772:	f003 0320 	and.w	r3, r3, #32
 8001776:	2b20      	cmp	r3, #32
 8001778:	d1cf      	bne.n	800171a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800177a:	2300      	movs	r3, #0
}
 800177c:	4618      	mov	r0, r3
 800177e:	3710      	adds	r7, #16
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}

08001784 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	60f8      	str	r0, [r7, #12]
 800178c:	60b9      	str	r1, [r7, #8]
 800178e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	699b      	ldr	r3, [r3, #24]
 8001796:	f003 0310 	and.w	r3, r3, #16
 800179a:	2b10      	cmp	r3, #16
 800179c:	d151      	bne.n	8001842 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800179e:	e022      	b.n	80017e6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017a6:	d01e      	beq.n	80017e6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017a8:	f7fe ff52 	bl	8000650 <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	68ba      	ldr	r2, [r7, #8]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d302      	bcc.n	80017be <I2C_IsAcknowledgeFailed+0x3a>
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d113      	bne.n	80017e6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c2:	f043 0220 	orr.w	r2, r3, #32
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	2220      	movs	r2, #32
 80017ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	2200      	movs	r2, #0
 80017d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	2200      	movs	r2, #0
 80017de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e02e      	b.n	8001844 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	f003 0320 	and.w	r3, r3, #32
 80017f0:	2b20      	cmp	r3, #32
 80017f2:	d1d5      	bne.n	80017a0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2210      	movs	r2, #16
 80017fa:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2220      	movs	r2, #32
 8001802:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001804:	68f8      	ldr	r0, [r7, #12]
 8001806:	f7ff fedd 	bl	80015c4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	6859      	ldr	r1, [r3, #4]
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	4b0d      	ldr	r3, [pc, #52]	; (800184c <I2C_IsAcknowledgeFailed+0xc8>)
 8001816:	400b      	ands	r3, r1
 8001818:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181e:	f043 0204 	orr.w	r2, r3, #4
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	2220      	movs	r2, #32
 800182a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2200      	movs	r2, #0
 8001832:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	2200      	movs	r2, #0
 800183a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e000      	b.n	8001844 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8001842:	2300      	movs	r3, #0
}
 8001844:	4618      	mov	r0, r3
 8001846:	3710      	adds	r7, #16
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	fe00e800 	.word	0xfe00e800

08001850 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001850:	b480      	push	{r7}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	607b      	str	r3, [r7, #4]
 800185a:	460b      	mov	r3, r1
 800185c:	817b      	strh	r3, [r7, #10]
 800185e:	4613      	mov	r3, r2
 8001860:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	685a      	ldr	r2, [r3, #4]
 8001868:	69bb      	ldr	r3, [r7, #24]
 800186a:	0d5b      	lsrs	r3, r3, #21
 800186c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001870:	4b0d      	ldr	r3, [pc, #52]	; (80018a8 <I2C_TransferConfig+0x58>)
 8001872:	430b      	orrs	r3, r1
 8001874:	43db      	mvns	r3, r3
 8001876:	ea02 0103 	and.w	r1, r2, r3
 800187a:	897b      	ldrh	r3, [r7, #10]
 800187c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001880:	7a7b      	ldrb	r3, [r7, #9]
 8001882:	041b      	lsls	r3, r3, #16
 8001884:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001888:	431a      	orrs	r2, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	431a      	orrs	r2, r3
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	431a      	orrs	r2, r3
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	430a      	orrs	r2, r1
 8001898:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800189a:	bf00      	nop
 800189c:	3714      	adds	r7, #20
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	03ff63ff 	.word	0x03ff63ff

080018ac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	2b20      	cmp	r3, #32
 80018c0:	d138      	bne.n	8001934 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d101      	bne.n	80018d0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80018cc:	2302      	movs	r3, #2
 80018ce:	e032      	b.n	8001936 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2201      	movs	r2, #1
 80018d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2224      	movs	r2, #36	; 0x24
 80018dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f022 0201 	bic.w	r2, r2, #1
 80018ee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80018fe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	6819      	ldr	r1, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	683a      	ldr	r2, [r7, #0]
 800190c:	430a      	orrs	r2, r1
 800190e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f042 0201 	orr.w	r2, r2, #1
 800191e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2220      	movs	r2, #32
 8001924:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2200      	movs	r2, #0
 800192c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001930:	2300      	movs	r3, #0
 8001932:	e000      	b.n	8001936 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001934:	2302      	movs	r3, #2
  }
}
 8001936:	4618      	mov	r0, r3
 8001938:	370c      	adds	r7, #12
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr

08001942 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001942:	b480      	push	{r7}
 8001944:	b085      	sub	sp, #20
 8001946:	af00      	add	r7, sp, #0
 8001948:	6078      	str	r0, [r7, #4]
 800194a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001952:	b2db      	uxtb	r3, r3
 8001954:	2b20      	cmp	r3, #32
 8001956:	d139      	bne.n	80019cc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800195e:	2b01      	cmp	r3, #1
 8001960:	d101      	bne.n	8001966 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001962:	2302      	movs	r3, #2
 8001964:	e033      	b.n	80019ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2201      	movs	r2, #1
 800196a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2224      	movs	r2, #36	; 0x24
 8001972:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f022 0201 	bic.w	r2, r2, #1
 8001984:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001994:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	021b      	lsls	r3, r3, #8
 800199a:	68fa      	ldr	r2, [r7, #12]
 800199c:	4313      	orrs	r3, r2
 800199e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	68fa      	ldr	r2, [r7, #12]
 80019a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f042 0201 	orr.w	r2, r2, #1
 80019b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2220      	movs	r2, #32
 80019bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2200      	movs	r2, #0
 80019c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80019c8:	2300      	movs	r3, #0
 80019ca:	e000      	b.n	80019ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80019cc:	2302      	movs	r3, #2
  }
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3714      	adds	r7, #20
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
	...

080019dc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80019e0:	4b04      	ldr	r3, [pc, #16]	; (80019f4 <HAL_PWREx_GetVoltageRange+0x18>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	40007000 	.word	0x40007000

080019f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a06:	d130      	bne.n	8001a6a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a08:	4b23      	ldr	r3, [pc, #140]	; (8001a98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a14:	d038      	beq.n	8001a88 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a16:	4b20      	ldr	r3, [pc, #128]	; (8001a98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a1e:	4a1e      	ldr	r2, [pc, #120]	; (8001a98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a20:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a24:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a26:	4b1d      	ldr	r3, [pc, #116]	; (8001a9c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2232      	movs	r2, #50	; 0x32
 8001a2c:	fb02 f303 	mul.w	r3, r2, r3
 8001a30:	4a1b      	ldr	r2, [pc, #108]	; (8001aa0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001a32:	fba2 2303 	umull	r2, r3, r2, r3
 8001a36:	0c9b      	lsrs	r3, r3, #18
 8001a38:	3301      	adds	r3, #1
 8001a3a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a3c:	e002      	b.n	8001a44 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	3b01      	subs	r3, #1
 8001a42:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a44:	4b14      	ldr	r3, [pc, #80]	; (8001a98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a46:	695b      	ldr	r3, [r3, #20]
 8001a48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a50:	d102      	bne.n	8001a58 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d1f2      	bne.n	8001a3e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a58:	4b0f      	ldr	r3, [pc, #60]	; (8001a98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a5a:	695b      	ldr	r3, [r3, #20]
 8001a5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a64:	d110      	bne.n	8001a88 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e00f      	b.n	8001a8a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a6a:	4b0b      	ldr	r3, [pc, #44]	; (8001a98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a76:	d007      	beq.n	8001a88 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a78:	4b07      	ldr	r3, [pc, #28]	; (8001a98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a80:	4a05      	ldr	r2, [pc, #20]	; (8001a98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a86:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3714      	adds	r7, #20
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	40007000 	.word	0x40007000
 8001a9c:	200000b0 	.word	0x200000b0
 8001aa0:	431bde83 	.word	0x431bde83

08001aa4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b088      	sub	sp, #32
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d101      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e3d4      	b.n	8002260 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ab6:	4ba1      	ldr	r3, [pc, #644]	; (8001d3c <HAL_RCC_OscConfig+0x298>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f003 030c 	and.w	r3, r3, #12
 8001abe:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ac0:	4b9e      	ldr	r3, [pc, #632]	; (8001d3c <HAL_RCC_OscConfig+0x298>)
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	f003 0303 	and.w	r3, r3, #3
 8001ac8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0310 	and.w	r3, r3, #16
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	f000 80e4 	beq.w	8001ca0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d007      	beq.n	8001aee <HAL_RCC_OscConfig+0x4a>
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	2b0c      	cmp	r3, #12
 8001ae2:	f040 808b 	bne.w	8001bfc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	f040 8087 	bne.w	8001bfc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001aee:	4b93      	ldr	r3, [pc, #588]	; (8001d3c <HAL_RCC_OscConfig+0x298>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0302 	and.w	r3, r3, #2
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d005      	beq.n	8001b06 <HAL_RCC_OscConfig+0x62>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	699b      	ldr	r3, [r3, #24]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d101      	bne.n	8001b06 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e3ac      	b.n	8002260 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6a1a      	ldr	r2, [r3, #32]
 8001b0a:	4b8c      	ldr	r3, [pc, #560]	; (8001d3c <HAL_RCC_OscConfig+0x298>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0308 	and.w	r3, r3, #8
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d004      	beq.n	8001b20 <HAL_RCC_OscConfig+0x7c>
 8001b16:	4b89      	ldr	r3, [pc, #548]	; (8001d3c <HAL_RCC_OscConfig+0x298>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b1e:	e005      	b.n	8001b2c <HAL_RCC_OscConfig+0x88>
 8001b20:	4b86      	ldr	r3, [pc, #536]	; (8001d3c <HAL_RCC_OscConfig+0x298>)
 8001b22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b26:	091b      	lsrs	r3, r3, #4
 8001b28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d223      	bcs.n	8001b78 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a1b      	ldr	r3, [r3, #32]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f000 fd3f 	bl	80025b8 <RCC_SetFlashLatencyFromMSIRange>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e38d      	b.n	8002260 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b44:	4b7d      	ldr	r3, [pc, #500]	; (8001d3c <HAL_RCC_OscConfig+0x298>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a7c      	ldr	r2, [pc, #496]	; (8001d3c <HAL_RCC_OscConfig+0x298>)
 8001b4a:	f043 0308 	orr.w	r3, r3, #8
 8001b4e:	6013      	str	r3, [r2, #0]
 8001b50:	4b7a      	ldr	r3, [pc, #488]	; (8001d3c <HAL_RCC_OscConfig+0x298>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6a1b      	ldr	r3, [r3, #32]
 8001b5c:	4977      	ldr	r1, [pc, #476]	; (8001d3c <HAL_RCC_OscConfig+0x298>)
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b62:	4b76      	ldr	r3, [pc, #472]	; (8001d3c <HAL_RCC_OscConfig+0x298>)
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	69db      	ldr	r3, [r3, #28]
 8001b6e:	021b      	lsls	r3, r3, #8
 8001b70:	4972      	ldr	r1, [pc, #456]	; (8001d3c <HAL_RCC_OscConfig+0x298>)
 8001b72:	4313      	orrs	r3, r2
 8001b74:	604b      	str	r3, [r1, #4]
 8001b76:	e025      	b.n	8001bc4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b78:	4b70      	ldr	r3, [pc, #448]	; (8001d3c <HAL_RCC_OscConfig+0x298>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a6f      	ldr	r2, [pc, #444]	; (8001d3c <HAL_RCC_OscConfig+0x298>)
 8001b7e:	f043 0308 	orr.w	r3, r3, #8
 8001b82:	6013      	str	r3, [r2, #0]
 8001b84:	4b6d      	ldr	r3, [pc, #436]	; (8001d3c <HAL_RCC_OscConfig+0x298>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6a1b      	ldr	r3, [r3, #32]
 8001b90:	496a      	ldr	r1, [pc, #424]	; (8001d3c <HAL_RCC_OscConfig+0x298>)
 8001b92:	4313      	orrs	r3, r2
 8001b94:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b96:	4b69      	ldr	r3, [pc, #420]	; (8001d3c <HAL_RCC_OscConfig+0x298>)
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	69db      	ldr	r3, [r3, #28]
 8001ba2:	021b      	lsls	r3, r3, #8
 8001ba4:	4965      	ldr	r1, [pc, #404]	; (8001d3c <HAL_RCC_OscConfig+0x298>)
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d109      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6a1b      	ldr	r3, [r3, #32]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f000 fcff 	bl	80025b8 <RCC_SetFlashLatencyFromMSIRange>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e34d      	b.n	8002260 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bc4:	f000 fc36 	bl	8002434 <HAL_RCC_GetSysClockFreq>
 8001bc8:	4601      	mov	r1, r0
 8001bca:	4b5c      	ldr	r3, [pc, #368]	; (8001d3c <HAL_RCC_OscConfig+0x298>)
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	091b      	lsrs	r3, r3, #4
 8001bd0:	f003 030f 	and.w	r3, r3, #15
 8001bd4:	4a5a      	ldr	r2, [pc, #360]	; (8001d40 <HAL_RCC_OscConfig+0x29c>)
 8001bd6:	5cd3      	ldrb	r3, [r2, r3]
 8001bd8:	f003 031f 	and.w	r3, r3, #31
 8001bdc:	fa21 f303 	lsr.w	r3, r1, r3
 8001be0:	4a58      	ldr	r2, [pc, #352]	; (8001d44 <HAL_RCC_OscConfig+0x2a0>)
 8001be2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001be4:	4b58      	ldr	r3, [pc, #352]	; (8001d48 <HAL_RCC_OscConfig+0x2a4>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7fe fce1 	bl	80005b0 <HAL_InitTick>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001bf2:	7bfb      	ldrb	r3, [r7, #15]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d052      	beq.n	8001c9e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001bf8:	7bfb      	ldrb	r3, [r7, #15]
 8001bfa:	e331      	b.n	8002260 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	699b      	ldr	r3, [r3, #24]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d032      	beq.n	8001c6a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001c04:	4b4d      	ldr	r3, [pc, #308]	; (8001d3c <HAL_RCC_OscConfig+0x298>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a4c      	ldr	r2, [pc, #304]	; (8001d3c <HAL_RCC_OscConfig+0x298>)
 8001c0a:	f043 0301 	orr.w	r3, r3, #1
 8001c0e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c10:	f7fe fd1e 	bl	8000650 <HAL_GetTick>
 8001c14:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c16:	e008      	b.n	8001c2a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c18:	f7fe fd1a 	bl	8000650 <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d901      	bls.n	8001c2a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e31a      	b.n	8002260 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c2a:	4b44      	ldr	r3, [pc, #272]	; (8001d3c <HAL_RCC_OscConfig+0x298>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0302 	and.w	r3, r3, #2
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d0f0      	beq.n	8001c18 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c36:	4b41      	ldr	r3, [pc, #260]	; (8001d3c <HAL_RCC_OscConfig+0x298>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a40      	ldr	r2, [pc, #256]	; (8001d3c <HAL_RCC_OscConfig+0x298>)
 8001c3c:	f043 0308 	orr.w	r3, r3, #8
 8001c40:	6013      	str	r3, [r2, #0]
 8001c42:	4b3e      	ldr	r3, [pc, #248]	; (8001d3c <HAL_RCC_OscConfig+0x298>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6a1b      	ldr	r3, [r3, #32]
 8001c4e:	493b      	ldr	r1, [pc, #236]	; (8001d3c <HAL_RCC_OscConfig+0x298>)
 8001c50:	4313      	orrs	r3, r2
 8001c52:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c54:	4b39      	ldr	r3, [pc, #228]	; (8001d3c <HAL_RCC_OscConfig+0x298>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	69db      	ldr	r3, [r3, #28]
 8001c60:	021b      	lsls	r3, r3, #8
 8001c62:	4936      	ldr	r1, [pc, #216]	; (8001d3c <HAL_RCC_OscConfig+0x298>)
 8001c64:	4313      	orrs	r3, r2
 8001c66:	604b      	str	r3, [r1, #4]
 8001c68:	e01a      	b.n	8001ca0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c6a:	4b34      	ldr	r3, [pc, #208]	; (8001d3c <HAL_RCC_OscConfig+0x298>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a33      	ldr	r2, [pc, #204]	; (8001d3c <HAL_RCC_OscConfig+0x298>)
 8001c70:	f023 0301 	bic.w	r3, r3, #1
 8001c74:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c76:	f7fe fceb 	bl	8000650 <HAL_GetTick>
 8001c7a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c7c:	e008      	b.n	8001c90 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c7e:	f7fe fce7 	bl	8000650 <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d901      	bls.n	8001c90 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e2e7      	b.n	8002260 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c90:	4b2a      	ldr	r3, [pc, #168]	; (8001d3c <HAL_RCC_OscConfig+0x298>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0302 	and.w	r3, r3, #2
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d1f0      	bne.n	8001c7e <HAL_RCC_OscConfig+0x1da>
 8001c9c:	e000      	b.n	8001ca0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c9e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0301 	and.w	r3, r3, #1
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d074      	beq.n	8001d96 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	2b08      	cmp	r3, #8
 8001cb0:	d005      	beq.n	8001cbe <HAL_RCC_OscConfig+0x21a>
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	2b0c      	cmp	r3, #12
 8001cb6:	d10e      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	2b03      	cmp	r3, #3
 8001cbc:	d10b      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cbe:	4b1f      	ldr	r3, [pc, #124]	; (8001d3c <HAL_RCC_OscConfig+0x298>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d064      	beq.n	8001d94 <HAL_RCC_OscConfig+0x2f0>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d160      	bne.n	8001d94 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e2c4      	b.n	8002260 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cde:	d106      	bne.n	8001cee <HAL_RCC_OscConfig+0x24a>
 8001ce0:	4b16      	ldr	r3, [pc, #88]	; (8001d3c <HAL_RCC_OscConfig+0x298>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a15      	ldr	r2, [pc, #84]	; (8001d3c <HAL_RCC_OscConfig+0x298>)
 8001ce6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cea:	6013      	str	r3, [r2, #0]
 8001cec:	e01d      	b.n	8001d2a <HAL_RCC_OscConfig+0x286>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cf6:	d10c      	bne.n	8001d12 <HAL_RCC_OscConfig+0x26e>
 8001cf8:	4b10      	ldr	r3, [pc, #64]	; (8001d3c <HAL_RCC_OscConfig+0x298>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a0f      	ldr	r2, [pc, #60]	; (8001d3c <HAL_RCC_OscConfig+0x298>)
 8001cfe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d02:	6013      	str	r3, [r2, #0]
 8001d04:	4b0d      	ldr	r3, [pc, #52]	; (8001d3c <HAL_RCC_OscConfig+0x298>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a0c      	ldr	r2, [pc, #48]	; (8001d3c <HAL_RCC_OscConfig+0x298>)
 8001d0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d0e:	6013      	str	r3, [r2, #0]
 8001d10:	e00b      	b.n	8001d2a <HAL_RCC_OscConfig+0x286>
 8001d12:	4b0a      	ldr	r3, [pc, #40]	; (8001d3c <HAL_RCC_OscConfig+0x298>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a09      	ldr	r2, [pc, #36]	; (8001d3c <HAL_RCC_OscConfig+0x298>)
 8001d18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d1c:	6013      	str	r3, [r2, #0]
 8001d1e:	4b07      	ldr	r3, [pc, #28]	; (8001d3c <HAL_RCC_OscConfig+0x298>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a06      	ldr	r2, [pc, #24]	; (8001d3c <HAL_RCC_OscConfig+0x298>)
 8001d24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d28:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d01c      	beq.n	8001d6c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d32:	f7fe fc8d 	bl	8000650 <HAL_GetTick>
 8001d36:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d38:	e011      	b.n	8001d5e <HAL_RCC_OscConfig+0x2ba>
 8001d3a:	bf00      	nop
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	08005720 	.word	0x08005720
 8001d44:	200000b0 	.word	0x200000b0
 8001d48:	20000000 	.word	0x20000000
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d4c:	f7fe fc80 	bl	8000650 <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b64      	cmp	r3, #100	; 0x64
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e280      	b.n	8002260 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d5e:	4baf      	ldr	r3, [pc, #700]	; (800201c <HAL_RCC_OscConfig+0x578>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d0f0      	beq.n	8001d4c <HAL_RCC_OscConfig+0x2a8>
 8001d6a:	e014      	b.n	8001d96 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d6c:	f7fe fc70 	bl	8000650 <HAL_GetTick>
 8001d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d72:	e008      	b.n	8001d86 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d74:	f7fe fc6c 	bl	8000650 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	2b64      	cmp	r3, #100	; 0x64
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e26c      	b.n	8002260 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d86:	4ba5      	ldr	r3, [pc, #660]	; (800201c <HAL_RCC_OscConfig+0x578>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d1f0      	bne.n	8001d74 <HAL_RCC_OscConfig+0x2d0>
 8001d92:	e000      	b.n	8001d96 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d060      	beq.n	8001e64 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	2b04      	cmp	r3, #4
 8001da6:	d005      	beq.n	8001db4 <HAL_RCC_OscConfig+0x310>
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	2b0c      	cmp	r3, #12
 8001dac:	d119      	bne.n	8001de2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d116      	bne.n	8001de2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001db4:	4b99      	ldr	r3, [pc, #612]	; (800201c <HAL_RCC_OscConfig+0x578>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d005      	beq.n	8001dcc <HAL_RCC_OscConfig+0x328>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d101      	bne.n	8001dcc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e249      	b.n	8002260 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dcc:	4b93      	ldr	r3, [pc, #588]	; (800201c <HAL_RCC_OscConfig+0x578>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	691b      	ldr	r3, [r3, #16]
 8001dd8:	061b      	lsls	r3, r3, #24
 8001dda:	4990      	ldr	r1, [pc, #576]	; (800201c <HAL_RCC_OscConfig+0x578>)
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001de0:	e040      	b.n	8001e64 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d023      	beq.n	8001e32 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dea:	4b8c      	ldr	r3, [pc, #560]	; (800201c <HAL_RCC_OscConfig+0x578>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a8b      	ldr	r2, [pc, #556]	; (800201c <HAL_RCC_OscConfig+0x578>)
 8001df0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001df4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df6:	f7fe fc2b 	bl	8000650 <HAL_GetTick>
 8001dfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dfc:	e008      	b.n	8001e10 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dfe:	f7fe fc27 	bl	8000650 <HAL_GetTick>
 8001e02:	4602      	mov	r2, r0
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d901      	bls.n	8001e10 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	e227      	b.n	8002260 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e10:	4b82      	ldr	r3, [pc, #520]	; (800201c <HAL_RCC_OscConfig+0x578>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d0f0      	beq.n	8001dfe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e1c:	4b7f      	ldr	r3, [pc, #508]	; (800201c <HAL_RCC_OscConfig+0x578>)
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	691b      	ldr	r3, [r3, #16]
 8001e28:	061b      	lsls	r3, r3, #24
 8001e2a:	497c      	ldr	r1, [pc, #496]	; (800201c <HAL_RCC_OscConfig+0x578>)
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	604b      	str	r3, [r1, #4]
 8001e30:	e018      	b.n	8001e64 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e32:	4b7a      	ldr	r3, [pc, #488]	; (800201c <HAL_RCC_OscConfig+0x578>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a79      	ldr	r2, [pc, #484]	; (800201c <HAL_RCC_OscConfig+0x578>)
 8001e38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e3e:	f7fe fc07 	bl	8000650 <HAL_GetTick>
 8001e42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e44:	e008      	b.n	8001e58 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e46:	f7fe fc03 	bl	8000650 <HAL_GetTick>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d901      	bls.n	8001e58 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e203      	b.n	8002260 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e58:	4b70      	ldr	r3, [pc, #448]	; (800201c <HAL_RCC_OscConfig+0x578>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d1f0      	bne.n	8001e46 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0308 	and.w	r3, r3, #8
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d03c      	beq.n	8001eea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	695b      	ldr	r3, [r3, #20]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d01c      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e78:	4b68      	ldr	r3, [pc, #416]	; (800201c <HAL_RCC_OscConfig+0x578>)
 8001e7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e7e:	4a67      	ldr	r2, [pc, #412]	; (800201c <HAL_RCC_OscConfig+0x578>)
 8001e80:	f043 0301 	orr.w	r3, r3, #1
 8001e84:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e88:	f7fe fbe2 	bl	8000650 <HAL_GetTick>
 8001e8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e8e:	e008      	b.n	8001ea2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e90:	f7fe fbde 	bl	8000650 <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e1de      	b.n	8002260 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ea2:	4b5e      	ldr	r3, [pc, #376]	; (800201c <HAL_RCC_OscConfig+0x578>)
 8001ea4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ea8:	f003 0302 	and.w	r3, r3, #2
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d0ef      	beq.n	8001e90 <HAL_RCC_OscConfig+0x3ec>
 8001eb0:	e01b      	b.n	8001eea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001eb2:	4b5a      	ldr	r3, [pc, #360]	; (800201c <HAL_RCC_OscConfig+0x578>)
 8001eb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eb8:	4a58      	ldr	r2, [pc, #352]	; (800201c <HAL_RCC_OscConfig+0x578>)
 8001eba:	f023 0301 	bic.w	r3, r3, #1
 8001ebe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ec2:	f7fe fbc5 	bl	8000650 <HAL_GetTick>
 8001ec6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ec8:	e008      	b.n	8001edc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001eca:	f7fe fbc1 	bl	8000650 <HAL_GetTick>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d901      	bls.n	8001edc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e1c1      	b.n	8002260 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001edc:	4b4f      	ldr	r3, [pc, #316]	; (800201c <HAL_RCC_OscConfig+0x578>)
 8001ede:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d1ef      	bne.n	8001eca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0304 	and.w	r3, r3, #4
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	f000 80a6 	beq.w	8002044 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001efc:	4b47      	ldr	r3, [pc, #284]	; (800201c <HAL_RCC_OscConfig+0x578>)
 8001efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d10d      	bne.n	8001f24 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f08:	4b44      	ldr	r3, [pc, #272]	; (800201c <HAL_RCC_OscConfig+0x578>)
 8001f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f0c:	4a43      	ldr	r2, [pc, #268]	; (800201c <HAL_RCC_OscConfig+0x578>)
 8001f0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f12:	6593      	str	r3, [r2, #88]	; 0x58
 8001f14:	4b41      	ldr	r3, [pc, #260]	; (800201c <HAL_RCC_OscConfig+0x578>)
 8001f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f1c:	60bb      	str	r3, [r7, #8]
 8001f1e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f20:	2301      	movs	r3, #1
 8001f22:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f24:	4b3e      	ldr	r3, [pc, #248]	; (8002020 <HAL_RCC_OscConfig+0x57c>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d118      	bne.n	8001f62 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f30:	4b3b      	ldr	r3, [pc, #236]	; (8002020 <HAL_RCC_OscConfig+0x57c>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a3a      	ldr	r2, [pc, #232]	; (8002020 <HAL_RCC_OscConfig+0x57c>)
 8001f36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f3a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f3c:	f7fe fb88 	bl	8000650 <HAL_GetTick>
 8001f40:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f42:	e008      	b.n	8001f56 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f44:	f7fe fb84 	bl	8000650 <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e184      	b.n	8002260 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f56:	4b32      	ldr	r3, [pc, #200]	; (8002020 <HAL_RCC_OscConfig+0x57c>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d0f0      	beq.n	8001f44 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d108      	bne.n	8001f7c <HAL_RCC_OscConfig+0x4d8>
 8001f6a:	4b2c      	ldr	r3, [pc, #176]	; (800201c <HAL_RCC_OscConfig+0x578>)
 8001f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f70:	4a2a      	ldr	r2, [pc, #168]	; (800201c <HAL_RCC_OscConfig+0x578>)
 8001f72:	f043 0301 	orr.w	r3, r3, #1
 8001f76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f7a:	e024      	b.n	8001fc6 <HAL_RCC_OscConfig+0x522>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	2b05      	cmp	r3, #5
 8001f82:	d110      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x502>
 8001f84:	4b25      	ldr	r3, [pc, #148]	; (800201c <HAL_RCC_OscConfig+0x578>)
 8001f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f8a:	4a24      	ldr	r2, [pc, #144]	; (800201c <HAL_RCC_OscConfig+0x578>)
 8001f8c:	f043 0304 	orr.w	r3, r3, #4
 8001f90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f94:	4b21      	ldr	r3, [pc, #132]	; (800201c <HAL_RCC_OscConfig+0x578>)
 8001f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f9a:	4a20      	ldr	r2, [pc, #128]	; (800201c <HAL_RCC_OscConfig+0x578>)
 8001f9c:	f043 0301 	orr.w	r3, r3, #1
 8001fa0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fa4:	e00f      	b.n	8001fc6 <HAL_RCC_OscConfig+0x522>
 8001fa6:	4b1d      	ldr	r3, [pc, #116]	; (800201c <HAL_RCC_OscConfig+0x578>)
 8001fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fac:	4a1b      	ldr	r2, [pc, #108]	; (800201c <HAL_RCC_OscConfig+0x578>)
 8001fae:	f023 0301 	bic.w	r3, r3, #1
 8001fb2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fb6:	4b19      	ldr	r3, [pc, #100]	; (800201c <HAL_RCC_OscConfig+0x578>)
 8001fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fbc:	4a17      	ldr	r2, [pc, #92]	; (800201c <HAL_RCC_OscConfig+0x578>)
 8001fbe:	f023 0304 	bic.w	r3, r3, #4
 8001fc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d016      	beq.n	8001ffc <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fce:	f7fe fb3f 	bl	8000650 <HAL_GetTick>
 8001fd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fd4:	e00a      	b.n	8001fec <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fd6:	f7fe fb3b 	bl	8000650 <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d901      	bls.n	8001fec <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e139      	b.n	8002260 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fec:	4b0b      	ldr	r3, [pc, #44]	; (800201c <HAL_RCC_OscConfig+0x578>)
 8001fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d0ed      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x532>
 8001ffa:	e01a      	b.n	8002032 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ffc:	f7fe fb28 	bl	8000650 <HAL_GetTick>
 8002000:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002002:	e00f      	b.n	8002024 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002004:	f7fe fb24 	bl	8000650 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002012:	4293      	cmp	r3, r2
 8002014:	d906      	bls.n	8002024 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e122      	b.n	8002260 <HAL_RCC_OscConfig+0x7bc>
 800201a:	bf00      	nop
 800201c:	40021000 	.word	0x40021000
 8002020:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002024:	4b90      	ldr	r3, [pc, #576]	; (8002268 <HAL_RCC_OscConfig+0x7c4>)
 8002026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d1e8      	bne.n	8002004 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002032:	7ffb      	ldrb	r3, [r7, #31]
 8002034:	2b01      	cmp	r3, #1
 8002036:	d105      	bne.n	8002044 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002038:	4b8b      	ldr	r3, [pc, #556]	; (8002268 <HAL_RCC_OscConfig+0x7c4>)
 800203a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800203c:	4a8a      	ldr	r2, [pc, #552]	; (8002268 <HAL_RCC_OscConfig+0x7c4>)
 800203e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002042:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002048:	2b00      	cmp	r3, #0
 800204a:	f000 8108 	beq.w	800225e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002052:	2b02      	cmp	r3, #2
 8002054:	f040 80d0 	bne.w	80021f8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002058:	4b83      	ldr	r3, [pc, #524]	; (8002268 <HAL_RCC_OscConfig+0x7c4>)
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	f003 0203 	and.w	r2, r3, #3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002068:	429a      	cmp	r2, r3
 800206a:	d130      	bne.n	80020ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002076:	3b01      	subs	r3, #1
 8002078:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800207a:	429a      	cmp	r2, r3
 800207c:	d127      	bne.n	80020ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002088:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800208a:	429a      	cmp	r2, r3
 800208c:	d11f      	bne.n	80020ce <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002098:	2a07      	cmp	r2, #7
 800209a:	bf14      	ite	ne
 800209c:	2201      	movne	r2, #1
 800209e:	2200      	moveq	r2, #0
 80020a0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d113      	bne.n	80020ce <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020b0:	085b      	lsrs	r3, r3, #1
 80020b2:	3b01      	subs	r3, #1
 80020b4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d109      	bne.n	80020ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c4:	085b      	lsrs	r3, r3, #1
 80020c6:	3b01      	subs	r3, #1
 80020c8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d06e      	beq.n	80021ac <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	2b0c      	cmp	r3, #12
 80020d2:	d069      	beq.n	80021a8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80020d4:	4b64      	ldr	r3, [pc, #400]	; (8002268 <HAL_RCC_OscConfig+0x7c4>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d105      	bne.n	80020ec <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80020e0:	4b61      	ldr	r3, [pc, #388]	; (8002268 <HAL_RCC_OscConfig+0x7c4>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e0b7      	b.n	8002260 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80020f0:	4b5d      	ldr	r3, [pc, #372]	; (8002268 <HAL_RCC_OscConfig+0x7c4>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a5c      	ldr	r2, [pc, #368]	; (8002268 <HAL_RCC_OscConfig+0x7c4>)
 80020f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020fa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80020fc:	f7fe faa8 	bl	8000650 <HAL_GetTick>
 8002100:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002102:	e008      	b.n	8002116 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002104:	f7fe faa4 	bl	8000650 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2b02      	cmp	r3, #2
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e0a4      	b.n	8002260 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002116:	4b54      	ldr	r3, [pc, #336]	; (8002268 <HAL_RCC_OscConfig+0x7c4>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1f0      	bne.n	8002104 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002122:	4b51      	ldr	r3, [pc, #324]	; (8002268 <HAL_RCC_OscConfig+0x7c4>)
 8002124:	68da      	ldr	r2, [r3, #12]
 8002126:	4b51      	ldr	r3, [pc, #324]	; (800226c <HAL_RCC_OscConfig+0x7c8>)
 8002128:	4013      	ands	r3, r2
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002132:	3a01      	subs	r2, #1
 8002134:	0112      	lsls	r2, r2, #4
 8002136:	4311      	orrs	r1, r2
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800213c:	0212      	lsls	r2, r2, #8
 800213e:	4311      	orrs	r1, r2
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002144:	0852      	lsrs	r2, r2, #1
 8002146:	3a01      	subs	r2, #1
 8002148:	0552      	lsls	r2, r2, #21
 800214a:	4311      	orrs	r1, r2
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002150:	0852      	lsrs	r2, r2, #1
 8002152:	3a01      	subs	r2, #1
 8002154:	0652      	lsls	r2, r2, #25
 8002156:	4311      	orrs	r1, r2
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800215c:	0912      	lsrs	r2, r2, #4
 800215e:	0452      	lsls	r2, r2, #17
 8002160:	430a      	orrs	r2, r1
 8002162:	4941      	ldr	r1, [pc, #260]	; (8002268 <HAL_RCC_OscConfig+0x7c4>)
 8002164:	4313      	orrs	r3, r2
 8002166:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002168:	4b3f      	ldr	r3, [pc, #252]	; (8002268 <HAL_RCC_OscConfig+0x7c4>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a3e      	ldr	r2, [pc, #248]	; (8002268 <HAL_RCC_OscConfig+0x7c4>)
 800216e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002172:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002174:	4b3c      	ldr	r3, [pc, #240]	; (8002268 <HAL_RCC_OscConfig+0x7c4>)
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	4a3b      	ldr	r2, [pc, #236]	; (8002268 <HAL_RCC_OscConfig+0x7c4>)
 800217a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800217e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002180:	f7fe fa66 	bl	8000650 <HAL_GetTick>
 8002184:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002186:	e008      	b.n	800219a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002188:	f7fe fa62 	bl	8000650 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b02      	cmp	r3, #2
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e062      	b.n	8002260 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800219a:	4b33      	ldr	r3, [pc, #204]	; (8002268 <HAL_RCC_OscConfig+0x7c4>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d0f0      	beq.n	8002188 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021a6:	e05a      	b.n	800225e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e059      	b.n	8002260 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021ac:	4b2e      	ldr	r3, [pc, #184]	; (8002268 <HAL_RCC_OscConfig+0x7c4>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d152      	bne.n	800225e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80021b8:	4b2b      	ldr	r3, [pc, #172]	; (8002268 <HAL_RCC_OscConfig+0x7c4>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a2a      	ldr	r2, [pc, #168]	; (8002268 <HAL_RCC_OscConfig+0x7c4>)
 80021be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021c2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021c4:	4b28      	ldr	r3, [pc, #160]	; (8002268 <HAL_RCC_OscConfig+0x7c4>)
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	4a27      	ldr	r2, [pc, #156]	; (8002268 <HAL_RCC_OscConfig+0x7c4>)
 80021ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021ce:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80021d0:	f7fe fa3e 	bl	8000650 <HAL_GetTick>
 80021d4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021d6:	e008      	b.n	80021ea <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021d8:	f7fe fa3a 	bl	8000650 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e03a      	b.n	8002260 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021ea:	4b1f      	ldr	r3, [pc, #124]	; (8002268 <HAL_RCC_OscConfig+0x7c4>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d0f0      	beq.n	80021d8 <HAL_RCC_OscConfig+0x734>
 80021f6:	e032      	b.n	800225e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	2b0c      	cmp	r3, #12
 80021fc:	d02d      	beq.n	800225a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021fe:	4b1a      	ldr	r3, [pc, #104]	; (8002268 <HAL_RCC_OscConfig+0x7c4>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a19      	ldr	r2, [pc, #100]	; (8002268 <HAL_RCC_OscConfig+0x7c4>)
 8002204:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002208:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800220a:	4b17      	ldr	r3, [pc, #92]	; (8002268 <HAL_RCC_OscConfig+0x7c4>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d105      	bne.n	8002222 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002216:	4b14      	ldr	r3, [pc, #80]	; (8002268 <HAL_RCC_OscConfig+0x7c4>)
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	4a13      	ldr	r2, [pc, #76]	; (8002268 <HAL_RCC_OscConfig+0x7c4>)
 800221c:	f023 0303 	bic.w	r3, r3, #3
 8002220:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002222:	4b11      	ldr	r3, [pc, #68]	; (8002268 <HAL_RCC_OscConfig+0x7c4>)
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	4a10      	ldr	r2, [pc, #64]	; (8002268 <HAL_RCC_OscConfig+0x7c4>)
 8002228:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800222c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002230:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002232:	f7fe fa0d 	bl	8000650 <HAL_GetTick>
 8002236:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002238:	e008      	b.n	800224c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800223a:	f7fe fa09 	bl	8000650 <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	2b02      	cmp	r3, #2
 8002246:	d901      	bls.n	800224c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e009      	b.n	8002260 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800224c:	4b06      	ldr	r3, [pc, #24]	; (8002268 <HAL_RCC_OscConfig+0x7c4>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d1f0      	bne.n	800223a <HAL_RCC_OscConfig+0x796>
 8002258:	e001      	b.n	800225e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e000      	b.n	8002260 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800225e:	2300      	movs	r3, #0
}
 8002260:	4618      	mov	r0, r3
 8002262:	3720      	adds	r7, #32
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	40021000 	.word	0x40021000
 800226c:	f99d808c 	.word	0xf99d808c

08002270 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d101      	bne.n	8002284 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e0c8      	b.n	8002416 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002284:	4b66      	ldr	r3, [pc, #408]	; (8002420 <HAL_RCC_ClockConfig+0x1b0>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0307 	and.w	r3, r3, #7
 800228c:	683a      	ldr	r2, [r7, #0]
 800228e:	429a      	cmp	r2, r3
 8002290:	d910      	bls.n	80022b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002292:	4b63      	ldr	r3, [pc, #396]	; (8002420 <HAL_RCC_ClockConfig+0x1b0>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f023 0207 	bic.w	r2, r3, #7
 800229a:	4961      	ldr	r1, [pc, #388]	; (8002420 <HAL_RCC_ClockConfig+0x1b0>)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	4313      	orrs	r3, r2
 80022a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022a2:	4b5f      	ldr	r3, [pc, #380]	; (8002420 <HAL_RCC_ClockConfig+0x1b0>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0307 	and.w	r3, r3, #7
 80022aa:	683a      	ldr	r2, [r7, #0]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d001      	beq.n	80022b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e0b0      	b.n	8002416 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0301 	and.w	r3, r3, #1
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d04c      	beq.n	800235a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	2b03      	cmp	r3, #3
 80022c6:	d107      	bne.n	80022d8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022c8:	4b56      	ldr	r3, [pc, #344]	; (8002424 <HAL_RCC_ClockConfig+0x1b4>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d121      	bne.n	8002318 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e09e      	b.n	8002416 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d107      	bne.n	80022f0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022e0:	4b50      	ldr	r3, [pc, #320]	; (8002424 <HAL_RCC_ClockConfig+0x1b4>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d115      	bne.n	8002318 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e092      	b.n	8002416 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d107      	bne.n	8002308 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022f8:	4b4a      	ldr	r3, [pc, #296]	; (8002424 <HAL_RCC_ClockConfig+0x1b4>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0302 	and.w	r3, r3, #2
 8002300:	2b00      	cmp	r3, #0
 8002302:	d109      	bne.n	8002318 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e086      	b.n	8002416 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002308:	4b46      	ldr	r3, [pc, #280]	; (8002424 <HAL_RCC_ClockConfig+0x1b4>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002310:	2b00      	cmp	r3, #0
 8002312:	d101      	bne.n	8002318 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e07e      	b.n	8002416 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002318:	4b42      	ldr	r3, [pc, #264]	; (8002424 <HAL_RCC_ClockConfig+0x1b4>)
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f023 0203 	bic.w	r2, r3, #3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	493f      	ldr	r1, [pc, #252]	; (8002424 <HAL_RCC_ClockConfig+0x1b4>)
 8002326:	4313      	orrs	r3, r2
 8002328:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800232a:	f7fe f991 	bl	8000650 <HAL_GetTick>
 800232e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002330:	e00a      	b.n	8002348 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002332:	f7fe f98d 	bl	8000650 <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002340:	4293      	cmp	r3, r2
 8002342:	d901      	bls.n	8002348 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e066      	b.n	8002416 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002348:	4b36      	ldr	r3, [pc, #216]	; (8002424 <HAL_RCC_ClockConfig+0x1b4>)
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f003 020c 	and.w	r2, r3, #12
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	429a      	cmp	r2, r3
 8002358:	d1eb      	bne.n	8002332 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d008      	beq.n	8002378 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002366:	4b2f      	ldr	r3, [pc, #188]	; (8002424 <HAL_RCC_ClockConfig+0x1b4>)
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	492c      	ldr	r1, [pc, #176]	; (8002424 <HAL_RCC_ClockConfig+0x1b4>)
 8002374:	4313      	orrs	r3, r2
 8002376:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002378:	4b29      	ldr	r3, [pc, #164]	; (8002420 <HAL_RCC_ClockConfig+0x1b0>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0307 	and.w	r3, r3, #7
 8002380:	683a      	ldr	r2, [r7, #0]
 8002382:	429a      	cmp	r2, r3
 8002384:	d210      	bcs.n	80023a8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002386:	4b26      	ldr	r3, [pc, #152]	; (8002420 <HAL_RCC_ClockConfig+0x1b0>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f023 0207 	bic.w	r2, r3, #7
 800238e:	4924      	ldr	r1, [pc, #144]	; (8002420 <HAL_RCC_ClockConfig+0x1b0>)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	4313      	orrs	r3, r2
 8002394:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002396:	4b22      	ldr	r3, [pc, #136]	; (8002420 <HAL_RCC_ClockConfig+0x1b0>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0307 	and.w	r3, r3, #7
 800239e:	683a      	ldr	r2, [r7, #0]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d001      	beq.n	80023a8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e036      	b.n	8002416 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0304 	and.w	r3, r3, #4
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d008      	beq.n	80023c6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023b4:	4b1b      	ldr	r3, [pc, #108]	; (8002424 <HAL_RCC_ClockConfig+0x1b4>)
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	4918      	ldr	r1, [pc, #96]	; (8002424 <HAL_RCC_ClockConfig+0x1b4>)
 80023c2:	4313      	orrs	r3, r2
 80023c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0308 	and.w	r3, r3, #8
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d009      	beq.n	80023e6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023d2:	4b14      	ldr	r3, [pc, #80]	; (8002424 <HAL_RCC_ClockConfig+0x1b4>)
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	00db      	lsls	r3, r3, #3
 80023e0:	4910      	ldr	r1, [pc, #64]	; (8002424 <HAL_RCC_ClockConfig+0x1b4>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023e6:	f000 f825 	bl	8002434 <HAL_RCC_GetSysClockFreq>
 80023ea:	4601      	mov	r1, r0
 80023ec:	4b0d      	ldr	r3, [pc, #52]	; (8002424 <HAL_RCC_ClockConfig+0x1b4>)
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	091b      	lsrs	r3, r3, #4
 80023f2:	f003 030f 	and.w	r3, r3, #15
 80023f6:	4a0c      	ldr	r2, [pc, #48]	; (8002428 <HAL_RCC_ClockConfig+0x1b8>)
 80023f8:	5cd3      	ldrb	r3, [r2, r3]
 80023fa:	f003 031f 	and.w	r3, r3, #31
 80023fe:	fa21 f303 	lsr.w	r3, r1, r3
 8002402:	4a0a      	ldr	r2, [pc, #40]	; (800242c <HAL_RCC_ClockConfig+0x1bc>)
 8002404:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002406:	4b0a      	ldr	r3, [pc, #40]	; (8002430 <HAL_RCC_ClockConfig+0x1c0>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4618      	mov	r0, r3
 800240c:	f7fe f8d0 	bl	80005b0 <HAL_InitTick>
 8002410:	4603      	mov	r3, r0
 8002412:	72fb      	strb	r3, [r7, #11]

  return status;
 8002414:	7afb      	ldrb	r3, [r7, #11]
}
 8002416:	4618      	mov	r0, r3
 8002418:	3710      	adds	r7, #16
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	40022000 	.word	0x40022000
 8002424:	40021000 	.word	0x40021000
 8002428:	08005720 	.word	0x08005720
 800242c:	200000b0 	.word	0x200000b0
 8002430:	20000000 	.word	0x20000000

08002434 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002434:	b480      	push	{r7}
 8002436:	b089      	sub	sp, #36	; 0x24
 8002438:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800243a:	2300      	movs	r3, #0
 800243c:	61fb      	str	r3, [r7, #28]
 800243e:	2300      	movs	r3, #0
 8002440:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002442:	4b3d      	ldr	r3, [pc, #244]	; (8002538 <HAL_RCC_GetSysClockFreq+0x104>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f003 030c 	and.w	r3, r3, #12
 800244a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800244c:	4b3a      	ldr	r3, [pc, #232]	; (8002538 <HAL_RCC_GetSysClockFreq+0x104>)
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	f003 0303 	and.w	r3, r3, #3
 8002454:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d005      	beq.n	8002468 <HAL_RCC_GetSysClockFreq+0x34>
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	2b0c      	cmp	r3, #12
 8002460:	d121      	bne.n	80024a6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2b01      	cmp	r3, #1
 8002466:	d11e      	bne.n	80024a6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002468:	4b33      	ldr	r3, [pc, #204]	; (8002538 <HAL_RCC_GetSysClockFreq+0x104>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0308 	and.w	r3, r3, #8
 8002470:	2b00      	cmp	r3, #0
 8002472:	d107      	bne.n	8002484 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002474:	4b30      	ldr	r3, [pc, #192]	; (8002538 <HAL_RCC_GetSysClockFreq+0x104>)
 8002476:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800247a:	0a1b      	lsrs	r3, r3, #8
 800247c:	f003 030f 	and.w	r3, r3, #15
 8002480:	61fb      	str	r3, [r7, #28]
 8002482:	e005      	b.n	8002490 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002484:	4b2c      	ldr	r3, [pc, #176]	; (8002538 <HAL_RCC_GetSysClockFreq+0x104>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	091b      	lsrs	r3, r3, #4
 800248a:	f003 030f 	and.w	r3, r3, #15
 800248e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002490:	4a2a      	ldr	r2, [pc, #168]	; (800253c <HAL_RCC_GetSysClockFreq+0x108>)
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002498:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d10d      	bne.n	80024bc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024a4:	e00a      	b.n	80024bc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	2b04      	cmp	r3, #4
 80024aa:	d102      	bne.n	80024b2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80024ac:	4b24      	ldr	r3, [pc, #144]	; (8002540 <HAL_RCC_GetSysClockFreq+0x10c>)
 80024ae:	61bb      	str	r3, [r7, #24]
 80024b0:	e004      	b.n	80024bc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	2b08      	cmp	r3, #8
 80024b6:	d101      	bne.n	80024bc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80024b8:	4b22      	ldr	r3, [pc, #136]	; (8002544 <HAL_RCC_GetSysClockFreq+0x110>)
 80024ba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	2b0c      	cmp	r3, #12
 80024c0:	d133      	bne.n	800252a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80024c2:	4b1d      	ldr	r3, [pc, #116]	; (8002538 <HAL_RCC_GetSysClockFreq+0x104>)
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	f003 0303 	and.w	r3, r3, #3
 80024ca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d002      	beq.n	80024d8 <HAL_RCC_GetSysClockFreq+0xa4>
 80024d2:	2b03      	cmp	r3, #3
 80024d4:	d003      	beq.n	80024de <HAL_RCC_GetSysClockFreq+0xaa>
 80024d6:	e005      	b.n	80024e4 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80024d8:	4b19      	ldr	r3, [pc, #100]	; (8002540 <HAL_RCC_GetSysClockFreq+0x10c>)
 80024da:	617b      	str	r3, [r7, #20]
      break;
 80024dc:	e005      	b.n	80024ea <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80024de:	4b19      	ldr	r3, [pc, #100]	; (8002544 <HAL_RCC_GetSysClockFreq+0x110>)
 80024e0:	617b      	str	r3, [r7, #20]
      break;
 80024e2:	e002      	b.n	80024ea <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	617b      	str	r3, [r7, #20]
      break;
 80024e8:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024ea:	4b13      	ldr	r3, [pc, #76]	; (8002538 <HAL_RCC_GetSysClockFreq+0x104>)
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	091b      	lsrs	r3, r3, #4
 80024f0:	f003 0307 	and.w	r3, r3, #7
 80024f4:	3301      	adds	r3, #1
 80024f6:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80024f8:	4b0f      	ldr	r3, [pc, #60]	; (8002538 <HAL_RCC_GetSysClockFreq+0x104>)
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	0a1b      	lsrs	r3, r3, #8
 80024fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002502:	697a      	ldr	r2, [r7, #20]
 8002504:	fb02 f203 	mul.w	r2, r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	fbb2 f3f3 	udiv	r3, r2, r3
 800250e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002510:	4b09      	ldr	r3, [pc, #36]	; (8002538 <HAL_RCC_GetSysClockFreq+0x104>)
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	0e5b      	lsrs	r3, r3, #25
 8002516:	f003 0303 	and.w	r3, r3, #3
 800251a:	3301      	adds	r3, #1
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002520:	697a      	ldr	r2, [r7, #20]
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	fbb2 f3f3 	udiv	r3, r2, r3
 8002528:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800252a:	69bb      	ldr	r3, [r7, #24]
}
 800252c:	4618      	mov	r0, r3
 800252e:	3724      	adds	r7, #36	; 0x24
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr
 8002538:	40021000 	.word	0x40021000
 800253c:	08005738 	.word	0x08005738
 8002540:	00f42400 	.word	0x00f42400
 8002544:	007a1200 	.word	0x007a1200

08002548 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800254c:	4b03      	ldr	r3, [pc, #12]	; (800255c <HAL_RCC_GetHCLKFreq+0x14>)
 800254e:	681b      	ldr	r3, [r3, #0]
}
 8002550:	4618      	mov	r0, r3
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	200000b0 	.word	0x200000b0

08002560 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002564:	f7ff fff0 	bl	8002548 <HAL_RCC_GetHCLKFreq>
 8002568:	4601      	mov	r1, r0
 800256a:	4b06      	ldr	r3, [pc, #24]	; (8002584 <HAL_RCC_GetPCLK1Freq+0x24>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	0a1b      	lsrs	r3, r3, #8
 8002570:	f003 0307 	and.w	r3, r3, #7
 8002574:	4a04      	ldr	r2, [pc, #16]	; (8002588 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002576:	5cd3      	ldrb	r3, [r2, r3]
 8002578:	f003 031f 	and.w	r3, r3, #31
 800257c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002580:	4618      	mov	r0, r3
 8002582:	bd80      	pop	{r7, pc}
 8002584:	40021000 	.word	0x40021000
 8002588:	08005730 	.word	0x08005730

0800258c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002590:	f7ff ffda 	bl	8002548 <HAL_RCC_GetHCLKFreq>
 8002594:	4601      	mov	r1, r0
 8002596:	4b06      	ldr	r3, [pc, #24]	; (80025b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	0adb      	lsrs	r3, r3, #11
 800259c:	f003 0307 	and.w	r3, r3, #7
 80025a0:	4a04      	ldr	r2, [pc, #16]	; (80025b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80025a2:	5cd3      	ldrb	r3, [r2, r3]
 80025a4:	f003 031f 	and.w	r3, r3, #31
 80025a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	40021000 	.word	0x40021000
 80025b4:	08005730 	.word	0x08005730

080025b8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b086      	sub	sp, #24
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80025c0:	2300      	movs	r3, #0
 80025c2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80025c4:	4b2a      	ldr	r3, [pc, #168]	; (8002670 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d003      	beq.n	80025d8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80025d0:	f7ff fa04 	bl	80019dc <HAL_PWREx_GetVoltageRange>
 80025d4:	6178      	str	r0, [r7, #20]
 80025d6:	e014      	b.n	8002602 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80025d8:	4b25      	ldr	r3, [pc, #148]	; (8002670 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025dc:	4a24      	ldr	r2, [pc, #144]	; (8002670 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025e2:	6593      	str	r3, [r2, #88]	; 0x58
 80025e4:	4b22      	ldr	r3, [pc, #136]	; (8002670 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ec:	60fb      	str	r3, [r7, #12]
 80025ee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80025f0:	f7ff f9f4 	bl	80019dc <HAL_PWREx_GetVoltageRange>
 80025f4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80025f6:	4b1e      	ldr	r3, [pc, #120]	; (8002670 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025fa:	4a1d      	ldr	r2, [pc, #116]	; (8002670 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002600:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002608:	d10b      	bne.n	8002622 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2b80      	cmp	r3, #128	; 0x80
 800260e:	d919      	bls.n	8002644 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2ba0      	cmp	r3, #160	; 0xa0
 8002614:	d902      	bls.n	800261c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002616:	2302      	movs	r3, #2
 8002618:	613b      	str	r3, [r7, #16]
 800261a:	e013      	b.n	8002644 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800261c:	2301      	movs	r3, #1
 800261e:	613b      	str	r3, [r7, #16]
 8002620:	e010      	b.n	8002644 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2b80      	cmp	r3, #128	; 0x80
 8002626:	d902      	bls.n	800262e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002628:	2303      	movs	r3, #3
 800262a:	613b      	str	r3, [r7, #16]
 800262c:	e00a      	b.n	8002644 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2b80      	cmp	r3, #128	; 0x80
 8002632:	d102      	bne.n	800263a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002634:	2302      	movs	r3, #2
 8002636:	613b      	str	r3, [r7, #16]
 8002638:	e004      	b.n	8002644 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2b70      	cmp	r3, #112	; 0x70
 800263e:	d101      	bne.n	8002644 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002640:	2301      	movs	r3, #1
 8002642:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002644:	4b0b      	ldr	r3, [pc, #44]	; (8002674 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f023 0207 	bic.w	r2, r3, #7
 800264c:	4909      	ldr	r1, [pc, #36]	; (8002674 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	4313      	orrs	r3, r2
 8002652:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002654:	4b07      	ldr	r3, [pc, #28]	; (8002674 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0307 	and.w	r3, r3, #7
 800265c:	693a      	ldr	r2, [r7, #16]
 800265e:	429a      	cmp	r2, r3
 8002660:	d001      	beq.n	8002666 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e000      	b.n	8002668 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002666:	2300      	movs	r3, #0
}
 8002668:	4618      	mov	r0, r3
 800266a:	3718      	adds	r7, #24
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	40021000 	.word	0x40021000
 8002674:	40022000 	.word	0x40022000

08002678 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b086      	sub	sp, #24
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002680:	2300      	movs	r3, #0
 8002682:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002684:	2300      	movs	r3, #0
 8002686:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002690:	2b00      	cmp	r3, #0
 8002692:	d03f      	beq.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002698:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800269c:	d01c      	beq.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800269e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026a2:	d802      	bhi.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x32>
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d00e      	beq.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80026a8:	e01f      	b.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x72>
 80026aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80026ae:	d003      	beq.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80026b0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80026b4:	d01c      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80026b6:	e018      	b.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80026b8:	4b85      	ldr	r3, [pc, #532]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	4a84      	ldr	r2, [pc, #528]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026c2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026c4:	e015      	b.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	3304      	adds	r3, #4
 80026ca:	2100      	movs	r1, #0
 80026cc:	4618      	mov	r0, r3
 80026ce:	f000 fab9 	bl	8002c44 <RCCEx_PLLSAI1_Config>
 80026d2:	4603      	mov	r3, r0
 80026d4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026d6:	e00c      	b.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	3320      	adds	r3, #32
 80026dc:	2100      	movs	r1, #0
 80026de:	4618      	mov	r0, r3
 80026e0:	f000 fba0 	bl	8002e24 <RCCEx_PLLSAI2_Config>
 80026e4:	4603      	mov	r3, r0
 80026e6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026e8:	e003      	b.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	74fb      	strb	r3, [r7, #19]
      break;
 80026ee:	e000      	b.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80026f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026f2:	7cfb      	ldrb	r3, [r7, #19]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d10b      	bne.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80026f8:	4b75      	ldr	r3, [pc, #468]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026fe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002706:	4972      	ldr	r1, [pc, #456]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002708:	4313      	orrs	r3, r2
 800270a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800270e:	e001      	b.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002710:	7cfb      	ldrb	r3, [r7, #19]
 8002712:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d03f      	beq.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002724:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002728:	d01c      	beq.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800272a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800272e:	d802      	bhi.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8002730:	2b00      	cmp	r3, #0
 8002732:	d00e      	beq.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002734:	e01f      	b.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002736:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800273a:	d003      	beq.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 800273c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002740:	d01c      	beq.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x104>
 8002742:	e018      	b.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002744:	4b62      	ldr	r3, [pc, #392]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	4a61      	ldr	r2, [pc, #388]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800274a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800274e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002750:	e015      	b.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	3304      	adds	r3, #4
 8002756:	2100      	movs	r1, #0
 8002758:	4618      	mov	r0, r3
 800275a:	f000 fa73 	bl	8002c44 <RCCEx_PLLSAI1_Config>
 800275e:	4603      	mov	r3, r0
 8002760:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002762:	e00c      	b.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	3320      	adds	r3, #32
 8002768:	2100      	movs	r1, #0
 800276a:	4618      	mov	r0, r3
 800276c:	f000 fb5a 	bl	8002e24 <RCCEx_PLLSAI2_Config>
 8002770:	4603      	mov	r3, r0
 8002772:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002774:	e003      	b.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	74fb      	strb	r3, [r7, #19]
      break;
 800277a:	e000      	b.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800277c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800277e:	7cfb      	ldrb	r3, [r7, #19]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d10b      	bne.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002784:	4b52      	ldr	r3, [pc, #328]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800278a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002792:	494f      	ldr	r1, [pc, #316]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002794:	4313      	orrs	r3, r2
 8002796:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800279a:	e001      	b.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800279c:	7cfb      	ldrb	r3, [r7, #19]
 800279e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	f000 80a0 	beq.w	80028ee <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027ae:	2300      	movs	r3, #0
 80027b0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80027b2:	4b47      	ldr	r3, [pc, #284]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d101      	bne.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80027be:	2301      	movs	r3, #1
 80027c0:	e000      	b.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80027c2:	2300      	movs	r3, #0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d00d      	beq.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027c8:	4b41      	ldr	r3, [pc, #260]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027cc:	4a40      	ldr	r2, [pc, #256]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027d2:	6593      	str	r3, [r2, #88]	; 0x58
 80027d4:	4b3e      	ldr	r3, [pc, #248]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027dc:	60bb      	str	r3, [r7, #8]
 80027de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027e0:	2301      	movs	r3, #1
 80027e2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027e4:	4b3b      	ldr	r3, [pc, #236]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a3a      	ldr	r2, [pc, #232]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80027ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027ee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027f0:	f7fd ff2e 	bl	8000650 <HAL_GetTick>
 80027f4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80027f6:	e009      	b.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027f8:	f7fd ff2a 	bl	8000650 <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	2b02      	cmp	r3, #2
 8002804:	d902      	bls.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	74fb      	strb	r3, [r7, #19]
        break;
 800280a:	e005      	b.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800280c:	4b31      	ldr	r3, [pc, #196]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002814:	2b00      	cmp	r3, #0
 8002816:	d0ef      	beq.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8002818:	7cfb      	ldrb	r3, [r7, #19]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d15c      	bne.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800281e:	4b2c      	ldr	r3, [pc, #176]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002820:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002824:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002828:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d01f      	beq.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002836:	697a      	ldr	r2, [r7, #20]
 8002838:	429a      	cmp	r2, r3
 800283a:	d019      	beq.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800283c:	4b24      	ldr	r3, [pc, #144]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800283e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002842:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002846:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002848:	4b21      	ldr	r3, [pc, #132]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800284a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800284e:	4a20      	ldr	r2, [pc, #128]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002850:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002854:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002858:	4b1d      	ldr	r3, [pc, #116]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800285a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800285e:	4a1c      	ldr	r2, [pc, #112]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002860:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002864:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002868:	4a19      	ldr	r2, [pc, #100]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	2b00      	cmp	r3, #0
 8002878:	d016      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800287a:	f7fd fee9 	bl	8000650 <HAL_GetTick>
 800287e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002880:	e00b      	b.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002882:	f7fd fee5 	bl	8000650 <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002890:	4293      	cmp	r3, r2
 8002892:	d902      	bls.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	74fb      	strb	r3, [r7, #19]
            break;
 8002898:	e006      	b.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800289a:	4b0d      	ldr	r3, [pc, #52]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800289c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028a0:	f003 0302 	and.w	r3, r3, #2
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d0ec      	beq.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80028a8:	7cfb      	ldrb	r3, [r7, #19]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d10c      	bne.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028ae:	4b08      	ldr	r3, [pc, #32]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028be:	4904      	ldr	r1, [pc, #16]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80028c6:	e009      	b.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80028c8:	7cfb      	ldrb	r3, [r7, #19]
 80028ca:	74bb      	strb	r3, [r7, #18]
 80028cc:	e006      	b.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x264>
 80028ce:	bf00      	nop
 80028d0:	40021000 	.word	0x40021000
 80028d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028d8:	7cfb      	ldrb	r3, [r7, #19]
 80028da:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028dc:	7c7b      	ldrb	r3, [r7, #17]
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d105      	bne.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028e2:	4b9e      	ldr	r3, [pc, #632]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e6:	4a9d      	ldr	r2, [pc, #628]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028ec:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d00a      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028fa:	4b98      	ldr	r3, [pc, #608]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002900:	f023 0203 	bic.w	r2, r3, #3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002908:	4994      	ldr	r1, [pc, #592]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800290a:	4313      	orrs	r3, r2
 800290c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0302 	and.w	r3, r3, #2
 8002918:	2b00      	cmp	r3, #0
 800291a:	d00a      	beq.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800291c:	4b8f      	ldr	r3, [pc, #572]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800291e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002922:	f023 020c 	bic.w	r2, r3, #12
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800292a:	498c      	ldr	r1, [pc, #560]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800292c:	4313      	orrs	r3, r2
 800292e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0304 	and.w	r3, r3, #4
 800293a:	2b00      	cmp	r3, #0
 800293c:	d00a      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800293e:	4b87      	ldr	r3, [pc, #540]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002940:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002944:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294c:	4983      	ldr	r1, [pc, #524]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800294e:	4313      	orrs	r3, r2
 8002950:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0308 	and.w	r3, r3, #8
 800295c:	2b00      	cmp	r3, #0
 800295e:	d00a      	beq.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002960:	4b7e      	ldr	r3, [pc, #504]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002966:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296e:	497b      	ldr	r1, [pc, #492]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002970:	4313      	orrs	r3, r2
 8002972:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0310 	and.w	r3, r3, #16
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00a      	beq.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002982:	4b76      	ldr	r3, [pc, #472]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002988:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002990:	4972      	ldr	r1, [pc, #456]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002992:	4313      	orrs	r3, r2
 8002994:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0320 	and.w	r3, r3, #32
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d00a      	beq.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80029a4:	4b6d      	ldr	r3, [pc, #436]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029aa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029b2:	496a      	ldr	r1, [pc, #424]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d00a      	beq.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80029c6:	4b65      	ldr	r3, [pc, #404]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029cc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029d4:	4961      	ldr	r1, [pc, #388]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d00a      	beq.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80029e8:	4b5c      	ldr	r3, [pc, #368]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029f6:	4959      	ldr	r1, [pc, #356]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d00a      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a0a:	4b54      	ldr	r3, [pc, #336]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a10:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a18:	4950      	ldr	r1, [pc, #320]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d00a      	beq.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a2c:	4b4b      	ldr	r3, [pc, #300]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a32:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a3a:	4948      	ldr	r1, [pc, #288]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d00a      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a4e:	4b43      	ldr	r3, [pc, #268]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a54:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a5c:	493f      	ldr	r1, [pc, #252]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d028      	beq.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a70:	4b3a      	ldr	r3, [pc, #232]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a76:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a7e:	4937      	ldr	r1, [pc, #220]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a8e:	d106      	bne.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a90:	4b32      	ldr	r3, [pc, #200]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	4a31      	ldr	r2, [pc, #196]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a9a:	60d3      	str	r3, [r2, #12]
 8002a9c:	e011      	b.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002aa2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002aa6:	d10c      	bne.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	3304      	adds	r3, #4
 8002aac:	2101      	movs	r1, #1
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f000 f8c8 	bl	8002c44 <RCCEx_PLLSAI1_Config>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002ab8:	7cfb      	ldrb	r3, [r7, #19]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8002abe:	7cfb      	ldrb	r3, [r7, #19]
 8002ac0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d028      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ace:	4b23      	ldr	r3, [pc, #140]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ad4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002adc:	491f      	ldr	r1, [pc, #124]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002aec:	d106      	bne.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002aee:	4b1b      	ldr	r3, [pc, #108]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	4a1a      	ldr	r2, [pc, #104]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002af4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002af8:	60d3      	str	r3, [r2, #12]
 8002afa:	e011      	b.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b00:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b04:	d10c      	bne.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	3304      	adds	r3, #4
 8002b0a:	2101      	movs	r1, #1
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f000 f899 	bl	8002c44 <RCCEx_PLLSAI1_Config>
 8002b12:	4603      	mov	r3, r0
 8002b14:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b16:	7cfb      	ldrb	r3, [r7, #19]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d001      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8002b1c:	7cfb      	ldrb	r3, [r7, #19]
 8002b1e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d02b      	beq.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b2c:	4b0b      	ldr	r3, [pc, #44]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b32:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b3a:	4908      	ldr	r1, [pc, #32]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b4a:	d109      	bne.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b4c:	4b03      	ldr	r3, [pc, #12]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	4a02      	ldr	r2, [pc, #8]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b56:	60d3      	str	r3, [r2, #12]
 8002b58:	e014      	b.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002b5a:	bf00      	nop
 8002b5c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b64:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b68:	d10c      	bne.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	3304      	adds	r3, #4
 8002b6e:	2101      	movs	r1, #1
 8002b70:	4618      	mov	r0, r3
 8002b72:	f000 f867 	bl	8002c44 <RCCEx_PLLSAI1_Config>
 8002b76:	4603      	mov	r3, r0
 8002b78:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b7a:	7cfb      	ldrb	r3, [r7, #19]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d001      	beq.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8002b80:	7cfb      	ldrb	r3, [r7, #19]
 8002b82:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d02f      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b90:	4b2b      	ldr	r3, [pc, #172]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b96:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b9e:	4928      	ldr	r1, [pc, #160]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002baa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002bae:	d10d      	bne.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	3304      	adds	r3, #4
 8002bb4:	2102      	movs	r1, #2
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f000 f844 	bl	8002c44 <RCCEx_PLLSAI1_Config>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bc0:	7cfb      	ldrb	r3, [r7, #19]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d014      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002bc6:	7cfb      	ldrb	r3, [r7, #19]
 8002bc8:	74bb      	strb	r3, [r7, #18]
 8002bca:	e011      	b.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bd4:	d10c      	bne.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	3320      	adds	r3, #32
 8002bda:	2102      	movs	r1, #2
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f000 f921 	bl	8002e24 <RCCEx_PLLSAI2_Config>
 8002be2:	4603      	mov	r3, r0
 8002be4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002be6:	7cfb      	ldrb	r3, [r7, #19]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d001      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002bec:	7cfb      	ldrb	r3, [r7, #19]
 8002bee:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d00a      	beq.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002bfc:	4b10      	ldr	r3, [pc, #64]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c02:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c0a:	490d      	ldr	r1, [pc, #52]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d00b      	beq.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002c1e:	4b08      	ldr	r3, [pc, #32]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c24:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c2e:	4904      	ldr	r1, [pc, #16]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002c36:	7cbb      	ldrb	r3, [r7, #18]
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3718      	adds	r7, #24
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	40021000 	.word	0x40021000

08002c44 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c52:	4b73      	ldr	r3, [pc, #460]	; (8002e20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	f003 0303 	and.w	r3, r3, #3
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d018      	beq.n	8002c90 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002c5e:	4b70      	ldr	r3, [pc, #448]	; (8002e20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	f003 0203 	and.w	r2, r3, #3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d10d      	bne.n	8002c8a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
       ||
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d009      	beq.n	8002c8a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002c76:	4b6a      	ldr	r3, [pc, #424]	; (8002e20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	091b      	lsrs	r3, r3, #4
 8002c7c:	f003 0307 	and.w	r3, r3, #7
 8002c80:	1c5a      	adds	r2, r3, #1
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
       ||
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d044      	beq.n	8002d14 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	73fb      	strb	r3, [r7, #15]
 8002c8e:	e041      	b.n	8002d14 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d00c      	beq.n	8002cb2 <RCCEx_PLLSAI1_Config+0x6e>
 8002c98:	2b03      	cmp	r3, #3
 8002c9a:	d013      	beq.n	8002cc4 <RCCEx_PLLSAI1_Config+0x80>
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d120      	bne.n	8002ce2 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ca0:	4b5f      	ldr	r3, [pc, #380]	; (8002e20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0302 	and.w	r3, r3, #2
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d11d      	bne.n	8002ce8 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cb0:	e01a      	b.n	8002ce8 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002cb2:	4b5b      	ldr	r3, [pc, #364]	; (8002e20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d116      	bne.n	8002cec <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cc2:	e013      	b.n	8002cec <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002cc4:	4b56      	ldr	r3, [pc, #344]	; (8002e20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d10f      	bne.n	8002cf0 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002cd0:	4b53      	ldr	r3, [pc, #332]	; (8002e20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d109      	bne.n	8002cf0 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002ce0:	e006      	b.n	8002cf0 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	73fb      	strb	r3, [r7, #15]
      break;
 8002ce6:	e004      	b.n	8002cf2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002ce8:	bf00      	nop
 8002cea:	e002      	b.n	8002cf2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002cec:	bf00      	nop
 8002cee:	e000      	b.n	8002cf2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002cf0:	bf00      	nop
    }

    if(status == HAL_OK)
 8002cf2:	7bfb      	ldrb	r3, [r7, #15]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d10d      	bne.n	8002d14 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002cf8:	4b49      	ldr	r3, [pc, #292]	; (8002e20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6819      	ldr	r1, [r3, #0]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	3b01      	subs	r3, #1
 8002d0a:	011b      	lsls	r3, r3, #4
 8002d0c:	430b      	orrs	r3, r1
 8002d0e:	4944      	ldr	r1, [pc, #272]	; (8002e20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002d14:	7bfb      	ldrb	r3, [r7, #15]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d17d      	bne.n	8002e16 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002d1a:	4b41      	ldr	r3, [pc, #260]	; (8002e20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a40      	ldr	r2, [pc, #256]	; (8002e20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d20:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002d24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d26:	f7fd fc93 	bl	8000650 <HAL_GetTick>
 8002d2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d2c:	e009      	b.n	8002d42 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d2e:	f7fd fc8f 	bl	8000650 <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d902      	bls.n	8002d42 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	73fb      	strb	r3, [r7, #15]
        break;
 8002d40:	e005      	b.n	8002d4e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d42:	4b37      	ldr	r3, [pc, #220]	; (8002e20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d1ef      	bne.n	8002d2e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002d4e:	7bfb      	ldrb	r3, [r7, #15]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d160      	bne.n	8002e16 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d111      	bne.n	8002d7e <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d5a:	4b31      	ldr	r3, [pc, #196]	; (8002e20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002d62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	6892      	ldr	r2, [r2, #8]
 8002d6a:	0211      	lsls	r1, r2, #8
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	68d2      	ldr	r2, [r2, #12]
 8002d70:	0912      	lsrs	r2, r2, #4
 8002d72:	0452      	lsls	r2, r2, #17
 8002d74:	430a      	orrs	r2, r1
 8002d76:	492a      	ldr	r1, [pc, #168]	; (8002e20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	610b      	str	r3, [r1, #16]
 8002d7c:	e027      	b.n	8002dce <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d112      	bne.n	8002daa <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d84:	4b26      	ldr	r3, [pc, #152]	; (8002e20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d86:	691b      	ldr	r3, [r3, #16]
 8002d88:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002d8c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	6892      	ldr	r2, [r2, #8]
 8002d94:	0211      	lsls	r1, r2, #8
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	6912      	ldr	r2, [r2, #16]
 8002d9a:	0852      	lsrs	r2, r2, #1
 8002d9c:	3a01      	subs	r2, #1
 8002d9e:	0552      	lsls	r2, r2, #21
 8002da0:	430a      	orrs	r2, r1
 8002da2:	491f      	ldr	r1, [pc, #124]	; (8002e20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	610b      	str	r3, [r1, #16]
 8002da8:	e011      	b.n	8002dce <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002daa:	4b1d      	ldr	r3, [pc, #116]	; (8002e20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002db2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	6892      	ldr	r2, [r2, #8]
 8002dba:	0211      	lsls	r1, r2, #8
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	6952      	ldr	r2, [r2, #20]
 8002dc0:	0852      	lsrs	r2, r2, #1
 8002dc2:	3a01      	subs	r2, #1
 8002dc4:	0652      	lsls	r2, r2, #25
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	4915      	ldr	r1, [pc, #84]	; (8002e20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002dce:	4b14      	ldr	r3, [pc, #80]	; (8002e20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a13      	ldr	r2, [pc, #76]	; (8002e20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002dd4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002dd8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dda:	f7fd fc39 	bl	8000650 <HAL_GetTick>
 8002dde:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002de0:	e009      	b.n	8002df6 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002de2:	f7fd fc35 	bl	8000650 <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d902      	bls.n	8002df6 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	73fb      	strb	r3, [r7, #15]
          break;
 8002df4:	e005      	b.n	8002e02 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002df6:	4b0a      	ldr	r3, [pc, #40]	; (8002e20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d0ef      	beq.n	8002de2 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8002e02:	7bfb      	ldrb	r3, [r7, #15]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d106      	bne.n	8002e16 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002e08:	4b05      	ldr	r3, [pc, #20]	; (8002e20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e0a:	691a      	ldr	r2, [r3, #16]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	699b      	ldr	r3, [r3, #24]
 8002e10:	4903      	ldr	r1, [pc, #12]	; (8002e20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3710      	adds	r7, #16
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	40021000 	.word	0x40021000

08002e24 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e32:	4b68      	ldr	r3, [pc, #416]	; (8002fd4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	f003 0303 	and.w	r3, r3, #3
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d018      	beq.n	8002e70 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002e3e:	4b65      	ldr	r3, [pc, #404]	; (8002fd4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	f003 0203 	and.w	r2, r3, #3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d10d      	bne.n	8002e6a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
       ||
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d009      	beq.n	8002e6a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002e56:	4b5f      	ldr	r3, [pc, #380]	; (8002fd4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	091b      	lsrs	r3, r3, #4
 8002e5c:	f003 0307 	and.w	r3, r3, #7
 8002e60:	1c5a      	adds	r2, r3, #1
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
       ||
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d044      	beq.n	8002ef4 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	73fb      	strb	r3, [r7, #15]
 8002e6e:	e041      	b.n	8002ef4 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d00c      	beq.n	8002e92 <RCCEx_PLLSAI2_Config+0x6e>
 8002e78:	2b03      	cmp	r3, #3
 8002e7a:	d013      	beq.n	8002ea4 <RCCEx_PLLSAI2_Config+0x80>
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d120      	bne.n	8002ec2 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002e80:	4b54      	ldr	r3, [pc, #336]	; (8002fd4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0302 	and.w	r3, r3, #2
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d11d      	bne.n	8002ec8 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e90:	e01a      	b.n	8002ec8 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002e92:	4b50      	ldr	r3, [pc, #320]	; (8002fd4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d116      	bne.n	8002ecc <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ea2:	e013      	b.n	8002ecc <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002ea4:	4b4b      	ldr	r3, [pc, #300]	; (8002fd4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d10f      	bne.n	8002ed0 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002eb0:	4b48      	ldr	r3, [pc, #288]	; (8002fd4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d109      	bne.n	8002ed0 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002ec0:	e006      	b.n	8002ed0 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	73fb      	strb	r3, [r7, #15]
      break;
 8002ec6:	e004      	b.n	8002ed2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002ec8:	bf00      	nop
 8002eca:	e002      	b.n	8002ed2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002ecc:	bf00      	nop
 8002ece:	e000      	b.n	8002ed2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002ed0:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ed2:	7bfb      	ldrb	r3, [r7, #15]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d10d      	bne.n	8002ef4 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002ed8:	4b3e      	ldr	r3, [pc, #248]	; (8002fd4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6819      	ldr	r1, [r3, #0]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	3b01      	subs	r3, #1
 8002eea:	011b      	lsls	r3, r3, #4
 8002eec:	430b      	orrs	r3, r1
 8002eee:	4939      	ldr	r1, [pc, #228]	; (8002fd4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002ef4:	7bfb      	ldrb	r3, [r7, #15]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d167      	bne.n	8002fca <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002efa:	4b36      	ldr	r3, [pc, #216]	; (8002fd4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a35      	ldr	r2, [pc, #212]	; (8002fd4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f06:	f7fd fba3 	bl	8000650 <HAL_GetTick>
 8002f0a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f0c:	e009      	b.n	8002f22 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002f0e:	f7fd fb9f 	bl	8000650 <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d902      	bls.n	8002f22 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	73fb      	strb	r3, [r7, #15]
        break;
 8002f20:	e005      	b.n	8002f2e <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f22:	4b2c      	ldr	r3, [pc, #176]	; (8002fd4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1ef      	bne.n	8002f0e <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002f2e:	7bfb      	ldrb	r3, [r7, #15]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d14a      	bne.n	8002fca <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d111      	bne.n	8002f5e <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f3a:	4b26      	ldr	r3, [pc, #152]	; (8002fd4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002f42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	6892      	ldr	r2, [r2, #8]
 8002f4a:	0211      	lsls	r1, r2, #8
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	68d2      	ldr	r2, [r2, #12]
 8002f50:	0912      	lsrs	r2, r2, #4
 8002f52:	0452      	lsls	r2, r2, #17
 8002f54:	430a      	orrs	r2, r1
 8002f56:	491f      	ldr	r1, [pc, #124]	; (8002fd4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	614b      	str	r3, [r1, #20]
 8002f5c:	e011      	b.n	8002f82 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f5e:	4b1d      	ldr	r3, [pc, #116]	; (8002fd4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f60:	695b      	ldr	r3, [r3, #20]
 8002f62:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002f66:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	6892      	ldr	r2, [r2, #8]
 8002f6e:	0211      	lsls	r1, r2, #8
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	6912      	ldr	r2, [r2, #16]
 8002f74:	0852      	lsrs	r2, r2, #1
 8002f76:	3a01      	subs	r2, #1
 8002f78:	0652      	lsls	r2, r2, #25
 8002f7a:	430a      	orrs	r2, r1
 8002f7c:	4915      	ldr	r1, [pc, #84]	; (8002fd4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002f82:	4b14      	ldr	r3, [pc, #80]	; (8002fd4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a13      	ldr	r2, [pc, #76]	; (8002fd4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f8c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f8e:	f7fd fb5f 	bl	8000650 <HAL_GetTick>
 8002f92:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002f94:	e009      	b.n	8002faa <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002f96:	f7fd fb5b 	bl	8000650 <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d902      	bls.n	8002faa <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	73fb      	strb	r3, [r7, #15]
          break;
 8002fa8:	e005      	b.n	8002fb6 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002faa:	4b0a      	ldr	r3, [pc, #40]	; (8002fd4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d0ef      	beq.n	8002f96 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8002fb6:	7bfb      	ldrb	r3, [r7, #15]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d106      	bne.n	8002fca <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002fbc:	4b05      	ldr	r3, [pc, #20]	; (8002fd4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002fbe:	695a      	ldr	r2, [r3, #20]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	695b      	ldr	r3, [r3, #20]
 8002fc4:	4903      	ldr	r1, [pc, #12]	; (8002fd4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3710      	adds	r7, #16
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	40021000 	.word	0x40021000

08002fd8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d101      	bne.n	8002fea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e040      	b.n	800306c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d106      	bne.n	8003000 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f001 fdfe 	bl	8004bfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2224      	movs	r2, #36	; 0x24
 8003004:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f022 0201 	bic.w	r2, r2, #1
 8003014:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f000 f8c0 	bl	800319c <UART_SetConfig>
 800301c:	4603      	mov	r3, r0
 800301e:	2b01      	cmp	r3, #1
 8003020:	d101      	bne.n	8003026 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e022      	b.n	800306c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302a:	2b00      	cmp	r3, #0
 800302c:	d002      	beq.n	8003034 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f000 fb3e 	bl	80036b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	685a      	ldr	r2, [r3, #4]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003042:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	689a      	ldr	r2, [r3, #8]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003052:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f042 0201 	orr.w	r2, r2, #1
 8003062:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f000 fbc5 	bl	80037f4 <UART_CheckIdleState>
 800306a:	4603      	mov	r3, r0
}
 800306c:	4618      	mov	r0, r3
 800306e:	3708      	adds	r7, #8
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}

08003074 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b08a      	sub	sp, #40	; 0x28
 8003078:	af02      	add	r7, sp, #8
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	603b      	str	r3, [r7, #0]
 8003080:	4613      	mov	r3, r2
 8003082:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003088:	2b20      	cmp	r3, #32
 800308a:	f040 8081 	bne.w	8003190 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d002      	beq.n	800309a <HAL_UART_Transmit+0x26>
 8003094:	88fb      	ldrh	r3, [r7, #6]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d101      	bne.n	800309e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e079      	b.n	8003192 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d101      	bne.n	80030ac <HAL_UART_Transmit+0x38>
 80030a8:	2302      	movs	r3, #2
 80030aa:	e072      	b.n	8003192 <HAL_UART_Transmit+0x11e>
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2200      	movs	r2, #0
 80030b8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2221      	movs	r2, #33	; 0x21
 80030be:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80030c0:	f7fd fac6 	bl	8000650 <HAL_GetTick>
 80030c4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	88fa      	ldrh	r2, [r7, #6]
 80030ca:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	88fa      	ldrh	r2, [r7, #6]
 80030d2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030de:	d108      	bne.n	80030f2 <HAL_UART_Transmit+0x7e>
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d104      	bne.n	80030f2 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80030e8:	2300      	movs	r3, #0
 80030ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	61bb      	str	r3, [r7, #24]
 80030f0:	e003      	b.n	80030fa <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030f6:	2300      	movs	r3, #0
 80030f8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8003102:	e02d      	b.n	8003160 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	9300      	str	r3, [sp, #0]
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	2200      	movs	r2, #0
 800310c:	2180      	movs	r1, #128	; 0x80
 800310e:	68f8      	ldr	r0, [r7, #12]
 8003110:	f000 fbb5 	bl	800387e <UART_WaitOnFlagUntilTimeout>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d001      	beq.n	800311e <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e039      	b.n	8003192 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d10b      	bne.n	800313c <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	881a      	ldrh	r2, [r3, #0]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003130:	b292      	uxth	r2, r2
 8003132:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	3302      	adds	r3, #2
 8003138:	61bb      	str	r3, [r7, #24]
 800313a:	e008      	b.n	800314e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	781a      	ldrb	r2, [r3, #0]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	b292      	uxth	r2, r2
 8003146:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	3301      	adds	r3, #1
 800314c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003154:	b29b      	uxth	r3, r3
 8003156:	3b01      	subs	r3, #1
 8003158:	b29a      	uxth	r2, r3
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003166:	b29b      	uxth	r3, r3
 8003168:	2b00      	cmp	r3, #0
 800316a:	d1cb      	bne.n	8003104 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	9300      	str	r3, [sp, #0]
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	2200      	movs	r2, #0
 8003174:	2140      	movs	r1, #64	; 0x40
 8003176:	68f8      	ldr	r0, [r7, #12]
 8003178:	f000 fb81 	bl	800387e <UART_WaitOnFlagUntilTimeout>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e005      	b.n	8003192 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2220      	movs	r2, #32
 800318a:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800318c:	2300      	movs	r3, #0
 800318e:	e000      	b.n	8003192 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003190:	2302      	movs	r3, #2
  }
}
 8003192:	4618      	mov	r0, r3
 8003194:	3720      	adds	r7, #32
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
	...

0800319c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800319c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80031a0:	b088      	sub	sp, #32
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80031a6:	2300      	movs	r3, #0
 80031a8:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	689a      	ldr	r2, [r3, #8]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	691b      	ldr	r3, [r3, #16]
 80031b2:	431a      	orrs	r2, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	695b      	ldr	r3, [r3, #20]
 80031b8:	431a      	orrs	r2, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	69db      	ldr	r3, [r3, #28]
 80031be:	4313      	orrs	r3, r2
 80031c0:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	4bac      	ldr	r3, [pc, #688]	; (800347c <UART_SetConfig+0x2e0>)
 80031ca:	4013      	ands	r3, r2
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	6812      	ldr	r2, [r2, #0]
 80031d0:	69f9      	ldr	r1, [r7, #28]
 80031d2:	430b      	orrs	r3, r1
 80031d4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	68da      	ldr	r2, [r3, #12]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	430a      	orrs	r2, r1
 80031ea:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4aa2      	ldr	r2, [pc, #648]	; (8003480 <UART_SetConfig+0x2e4>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d004      	beq.n	8003206 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a1b      	ldr	r3, [r3, #32]
 8003200:	69fa      	ldr	r2, [r7, #28]
 8003202:	4313      	orrs	r3, r2
 8003204:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	69fa      	ldr	r2, [r7, #28]
 8003216:	430a      	orrs	r2, r1
 8003218:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a99      	ldr	r2, [pc, #612]	; (8003484 <UART_SetConfig+0x2e8>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d121      	bne.n	8003268 <UART_SetConfig+0xcc>
 8003224:	4b98      	ldr	r3, [pc, #608]	; (8003488 <UART_SetConfig+0x2ec>)
 8003226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800322a:	f003 0303 	and.w	r3, r3, #3
 800322e:	2b03      	cmp	r3, #3
 8003230:	d816      	bhi.n	8003260 <UART_SetConfig+0xc4>
 8003232:	a201      	add	r2, pc, #4	; (adr r2, 8003238 <UART_SetConfig+0x9c>)
 8003234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003238:	08003249 	.word	0x08003249
 800323c:	08003255 	.word	0x08003255
 8003240:	0800324f 	.word	0x0800324f
 8003244:	0800325b 	.word	0x0800325b
 8003248:	2301      	movs	r3, #1
 800324a:	76fb      	strb	r3, [r7, #27]
 800324c:	e0e8      	b.n	8003420 <UART_SetConfig+0x284>
 800324e:	2302      	movs	r3, #2
 8003250:	76fb      	strb	r3, [r7, #27]
 8003252:	e0e5      	b.n	8003420 <UART_SetConfig+0x284>
 8003254:	2304      	movs	r3, #4
 8003256:	76fb      	strb	r3, [r7, #27]
 8003258:	e0e2      	b.n	8003420 <UART_SetConfig+0x284>
 800325a:	2308      	movs	r3, #8
 800325c:	76fb      	strb	r3, [r7, #27]
 800325e:	e0df      	b.n	8003420 <UART_SetConfig+0x284>
 8003260:	2310      	movs	r3, #16
 8003262:	76fb      	strb	r3, [r7, #27]
 8003264:	bf00      	nop
 8003266:	e0db      	b.n	8003420 <UART_SetConfig+0x284>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a87      	ldr	r2, [pc, #540]	; (800348c <UART_SetConfig+0x2f0>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d134      	bne.n	80032dc <UART_SetConfig+0x140>
 8003272:	4b85      	ldr	r3, [pc, #532]	; (8003488 <UART_SetConfig+0x2ec>)
 8003274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003278:	f003 030c 	and.w	r3, r3, #12
 800327c:	2b0c      	cmp	r3, #12
 800327e:	d829      	bhi.n	80032d4 <UART_SetConfig+0x138>
 8003280:	a201      	add	r2, pc, #4	; (adr r2, 8003288 <UART_SetConfig+0xec>)
 8003282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003286:	bf00      	nop
 8003288:	080032bd 	.word	0x080032bd
 800328c:	080032d5 	.word	0x080032d5
 8003290:	080032d5 	.word	0x080032d5
 8003294:	080032d5 	.word	0x080032d5
 8003298:	080032c9 	.word	0x080032c9
 800329c:	080032d5 	.word	0x080032d5
 80032a0:	080032d5 	.word	0x080032d5
 80032a4:	080032d5 	.word	0x080032d5
 80032a8:	080032c3 	.word	0x080032c3
 80032ac:	080032d5 	.word	0x080032d5
 80032b0:	080032d5 	.word	0x080032d5
 80032b4:	080032d5 	.word	0x080032d5
 80032b8:	080032cf 	.word	0x080032cf
 80032bc:	2300      	movs	r3, #0
 80032be:	76fb      	strb	r3, [r7, #27]
 80032c0:	e0ae      	b.n	8003420 <UART_SetConfig+0x284>
 80032c2:	2302      	movs	r3, #2
 80032c4:	76fb      	strb	r3, [r7, #27]
 80032c6:	e0ab      	b.n	8003420 <UART_SetConfig+0x284>
 80032c8:	2304      	movs	r3, #4
 80032ca:	76fb      	strb	r3, [r7, #27]
 80032cc:	e0a8      	b.n	8003420 <UART_SetConfig+0x284>
 80032ce:	2308      	movs	r3, #8
 80032d0:	76fb      	strb	r3, [r7, #27]
 80032d2:	e0a5      	b.n	8003420 <UART_SetConfig+0x284>
 80032d4:	2310      	movs	r3, #16
 80032d6:	76fb      	strb	r3, [r7, #27]
 80032d8:	bf00      	nop
 80032da:	e0a1      	b.n	8003420 <UART_SetConfig+0x284>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a6b      	ldr	r2, [pc, #428]	; (8003490 <UART_SetConfig+0x2f4>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d120      	bne.n	8003328 <UART_SetConfig+0x18c>
 80032e6:	4b68      	ldr	r3, [pc, #416]	; (8003488 <UART_SetConfig+0x2ec>)
 80032e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ec:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80032f0:	2b10      	cmp	r3, #16
 80032f2:	d00f      	beq.n	8003314 <UART_SetConfig+0x178>
 80032f4:	2b10      	cmp	r3, #16
 80032f6:	d802      	bhi.n	80032fe <UART_SetConfig+0x162>
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d005      	beq.n	8003308 <UART_SetConfig+0x16c>
 80032fc:	e010      	b.n	8003320 <UART_SetConfig+0x184>
 80032fe:	2b20      	cmp	r3, #32
 8003300:	d005      	beq.n	800330e <UART_SetConfig+0x172>
 8003302:	2b30      	cmp	r3, #48	; 0x30
 8003304:	d009      	beq.n	800331a <UART_SetConfig+0x17e>
 8003306:	e00b      	b.n	8003320 <UART_SetConfig+0x184>
 8003308:	2300      	movs	r3, #0
 800330a:	76fb      	strb	r3, [r7, #27]
 800330c:	e088      	b.n	8003420 <UART_SetConfig+0x284>
 800330e:	2302      	movs	r3, #2
 8003310:	76fb      	strb	r3, [r7, #27]
 8003312:	e085      	b.n	8003420 <UART_SetConfig+0x284>
 8003314:	2304      	movs	r3, #4
 8003316:	76fb      	strb	r3, [r7, #27]
 8003318:	e082      	b.n	8003420 <UART_SetConfig+0x284>
 800331a:	2308      	movs	r3, #8
 800331c:	76fb      	strb	r3, [r7, #27]
 800331e:	e07f      	b.n	8003420 <UART_SetConfig+0x284>
 8003320:	2310      	movs	r3, #16
 8003322:	76fb      	strb	r3, [r7, #27]
 8003324:	bf00      	nop
 8003326:	e07b      	b.n	8003420 <UART_SetConfig+0x284>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a59      	ldr	r2, [pc, #356]	; (8003494 <UART_SetConfig+0x2f8>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d120      	bne.n	8003374 <UART_SetConfig+0x1d8>
 8003332:	4b55      	ldr	r3, [pc, #340]	; (8003488 <UART_SetConfig+0x2ec>)
 8003334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003338:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800333c:	2b40      	cmp	r3, #64	; 0x40
 800333e:	d00f      	beq.n	8003360 <UART_SetConfig+0x1c4>
 8003340:	2b40      	cmp	r3, #64	; 0x40
 8003342:	d802      	bhi.n	800334a <UART_SetConfig+0x1ae>
 8003344:	2b00      	cmp	r3, #0
 8003346:	d005      	beq.n	8003354 <UART_SetConfig+0x1b8>
 8003348:	e010      	b.n	800336c <UART_SetConfig+0x1d0>
 800334a:	2b80      	cmp	r3, #128	; 0x80
 800334c:	d005      	beq.n	800335a <UART_SetConfig+0x1be>
 800334e:	2bc0      	cmp	r3, #192	; 0xc0
 8003350:	d009      	beq.n	8003366 <UART_SetConfig+0x1ca>
 8003352:	e00b      	b.n	800336c <UART_SetConfig+0x1d0>
 8003354:	2300      	movs	r3, #0
 8003356:	76fb      	strb	r3, [r7, #27]
 8003358:	e062      	b.n	8003420 <UART_SetConfig+0x284>
 800335a:	2302      	movs	r3, #2
 800335c:	76fb      	strb	r3, [r7, #27]
 800335e:	e05f      	b.n	8003420 <UART_SetConfig+0x284>
 8003360:	2304      	movs	r3, #4
 8003362:	76fb      	strb	r3, [r7, #27]
 8003364:	e05c      	b.n	8003420 <UART_SetConfig+0x284>
 8003366:	2308      	movs	r3, #8
 8003368:	76fb      	strb	r3, [r7, #27]
 800336a:	e059      	b.n	8003420 <UART_SetConfig+0x284>
 800336c:	2310      	movs	r3, #16
 800336e:	76fb      	strb	r3, [r7, #27]
 8003370:	bf00      	nop
 8003372:	e055      	b.n	8003420 <UART_SetConfig+0x284>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a47      	ldr	r2, [pc, #284]	; (8003498 <UART_SetConfig+0x2fc>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d124      	bne.n	80033c8 <UART_SetConfig+0x22c>
 800337e:	4b42      	ldr	r3, [pc, #264]	; (8003488 <UART_SetConfig+0x2ec>)
 8003380:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003384:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003388:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800338c:	d012      	beq.n	80033b4 <UART_SetConfig+0x218>
 800338e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003392:	d802      	bhi.n	800339a <UART_SetConfig+0x1fe>
 8003394:	2b00      	cmp	r3, #0
 8003396:	d007      	beq.n	80033a8 <UART_SetConfig+0x20c>
 8003398:	e012      	b.n	80033c0 <UART_SetConfig+0x224>
 800339a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800339e:	d006      	beq.n	80033ae <UART_SetConfig+0x212>
 80033a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033a4:	d009      	beq.n	80033ba <UART_SetConfig+0x21e>
 80033a6:	e00b      	b.n	80033c0 <UART_SetConfig+0x224>
 80033a8:	2300      	movs	r3, #0
 80033aa:	76fb      	strb	r3, [r7, #27]
 80033ac:	e038      	b.n	8003420 <UART_SetConfig+0x284>
 80033ae:	2302      	movs	r3, #2
 80033b0:	76fb      	strb	r3, [r7, #27]
 80033b2:	e035      	b.n	8003420 <UART_SetConfig+0x284>
 80033b4:	2304      	movs	r3, #4
 80033b6:	76fb      	strb	r3, [r7, #27]
 80033b8:	e032      	b.n	8003420 <UART_SetConfig+0x284>
 80033ba:	2308      	movs	r3, #8
 80033bc:	76fb      	strb	r3, [r7, #27]
 80033be:	e02f      	b.n	8003420 <UART_SetConfig+0x284>
 80033c0:	2310      	movs	r3, #16
 80033c2:	76fb      	strb	r3, [r7, #27]
 80033c4:	bf00      	nop
 80033c6:	e02b      	b.n	8003420 <UART_SetConfig+0x284>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a2c      	ldr	r2, [pc, #176]	; (8003480 <UART_SetConfig+0x2e4>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d124      	bne.n	800341c <UART_SetConfig+0x280>
 80033d2:	4b2d      	ldr	r3, [pc, #180]	; (8003488 <UART_SetConfig+0x2ec>)
 80033d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80033dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033e0:	d012      	beq.n	8003408 <UART_SetConfig+0x26c>
 80033e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033e6:	d802      	bhi.n	80033ee <UART_SetConfig+0x252>
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d007      	beq.n	80033fc <UART_SetConfig+0x260>
 80033ec:	e012      	b.n	8003414 <UART_SetConfig+0x278>
 80033ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033f2:	d006      	beq.n	8003402 <UART_SetConfig+0x266>
 80033f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80033f8:	d009      	beq.n	800340e <UART_SetConfig+0x272>
 80033fa:	e00b      	b.n	8003414 <UART_SetConfig+0x278>
 80033fc:	2300      	movs	r3, #0
 80033fe:	76fb      	strb	r3, [r7, #27]
 8003400:	e00e      	b.n	8003420 <UART_SetConfig+0x284>
 8003402:	2302      	movs	r3, #2
 8003404:	76fb      	strb	r3, [r7, #27]
 8003406:	e00b      	b.n	8003420 <UART_SetConfig+0x284>
 8003408:	2304      	movs	r3, #4
 800340a:	76fb      	strb	r3, [r7, #27]
 800340c:	e008      	b.n	8003420 <UART_SetConfig+0x284>
 800340e:	2308      	movs	r3, #8
 8003410:	76fb      	strb	r3, [r7, #27]
 8003412:	e005      	b.n	8003420 <UART_SetConfig+0x284>
 8003414:	2310      	movs	r3, #16
 8003416:	76fb      	strb	r3, [r7, #27]
 8003418:	bf00      	nop
 800341a:	e001      	b.n	8003420 <UART_SetConfig+0x284>
 800341c:	2310      	movs	r3, #16
 800341e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a16      	ldr	r2, [pc, #88]	; (8003480 <UART_SetConfig+0x2e4>)
 8003426:	4293      	cmp	r3, r2
 8003428:	f040 8087 	bne.w	800353a <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800342c:	7efb      	ldrb	r3, [r7, #27]
 800342e:	2b08      	cmp	r3, #8
 8003430:	d836      	bhi.n	80034a0 <UART_SetConfig+0x304>
 8003432:	a201      	add	r2, pc, #4	; (adr r2, 8003438 <UART_SetConfig+0x29c>)
 8003434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003438:	0800345d 	.word	0x0800345d
 800343c:	080034a1 	.word	0x080034a1
 8003440:	08003465 	.word	0x08003465
 8003444:	080034a1 	.word	0x080034a1
 8003448:	0800346b 	.word	0x0800346b
 800344c:	080034a1 	.word	0x080034a1
 8003450:	080034a1 	.word	0x080034a1
 8003454:	080034a1 	.word	0x080034a1
 8003458:	08003473 	.word	0x08003473
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800345c:	f7ff f880 	bl	8002560 <HAL_RCC_GetPCLK1Freq>
 8003460:	6178      	str	r0, [r7, #20]
        break;
 8003462:	e022      	b.n	80034aa <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003464:	4b0d      	ldr	r3, [pc, #52]	; (800349c <UART_SetConfig+0x300>)
 8003466:	617b      	str	r3, [r7, #20]
        break;
 8003468:	e01f      	b.n	80034aa <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800346a:	f7fe ffe3 	bl	8002434 <HAL_RCC_GetSysClockFreq>
 800346e:	6178      	str	r0, [r7, #20]
        break;
 8003470:	e01b      	b.n	80034aa <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003472:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003476:	617b      	str	r3, [r7, #20]
        break;
 8003478:	e017      	b.n	80034aa <UART_SetConfig+0x30e>
 800347a:	bf00      	nop
 800347c:	efff69f3 	.word	0xefff69f3
 8003480:	40008000 	.word	0x40008000
 8003484:	40013800 	.word	0x40013800
 8003488:	40021000 	.word	0x40021000
 800348c:	40004400 	.word	0x40004400
 8003490:	40004800 	.word	0x40004800
 8003494:	40004c00 	.word	0x40004c00
 8003498:	40005000 	.word	0x40005000
 800349c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80034a0:	2300      	movs	r3, #0
 80034a2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	76bb      	strb	r3, [r7, #26]
        break;
 80034a8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	f000 80f1 	beq.w	8003694 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685a      	ldr	r2, [r3, #4]
 80034b6:	4613      	mov	r3, r2
 80034b8:	005b      	lsls	r3, r3, #1
 80034ba:	4413      	add	r3, r2
 80034bc:	697a      	ldr	r2, [r7, #20]
 80034be:	429a      	cmp	r2, r3
 80034c0:	d305      	bcc.n	80034ce <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80034c8:	697a      	ldr	r2, [r7, #20]
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d902      	bls.n	80034d4 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	76bb      	strb	r3, [r7, #26]
 80034d2:	e0df      	b.n	8003694 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	4619      	mov	r1, r3
 80034d8:	f04f 0200 	mov.w	r2, #0
 80034dc:	f04f 0300 	mov.w	r3, #0
 80034e0:	f04f 0400 	mov.w	r4, #0
 80034e4:	0214      	lsls	r4, r2, #8
 80034e6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80034ea:	020b      	lsls	r3, r1, #8
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	6852      	ldr	r2, [r2, #4]
 80034f0:	0852      	lsrs	r2, r2, #1
 80034f2:	4611      	mov	r1, r2
 80034f4:	f04f 0200 	mov.w	r2, #0
 80034f8:	eb13 0b01 	adds.w	fp, r3, r1
 80034fc:	eb44 0c02 	adc.w	ip, r4, r2
 8003500:	4658      	mov	r0, fp
 8003502:	4661      	mov	r1, ip
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f04f 0400 	mov.w	r4, #0
 800350c:	461a      	mov	r2, r3
 800350e:	4623      	mov	r3, r4
 8003510:	f7fc feb6 	bl	8000280 <__aeabi_uldivmod>
 8003514:	4603      	mov	r3, r0
 8003516:	460c      	mov	r4, r1
 8003518:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003520:	d308      	bcc.n	8003534 <UART_SetConfig+0x398>
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003528:	d204      	bcs.n	8003534 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	693a      	ldr	r2, [r7, #16]
 8003530:	60da      	str	r2, [r3, #12]
 8003532:	e0af      	b.n	8003694 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	76bb      	strb	r3, [r7, #26]
 8003538:	e0ac      	b.n	8003694 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	69db      	ldr	r3, [r3, #28]
 800353e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003542:	d15b      	bne.n	80035fc <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8003544:	7efb      	ldrb	r3, [r7, #27]
 8003546:	2b08      	cmp	r3, #8
 8003548:	d827      	bhi.n	800359a <UART_SetConfig+0x3fe>
 800354a:	a201      	add	r2, pc, #4	; (adr r2, 8003550 <UART_SetConfig+0x3b4>)
 800354c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003550:	08003575 	.word	0x08003575
 8003554:	0800357d 	.word	0x0800357d
 8003558:	08003585 	.word	0x08003585
 800355c:	0800359b 	.word	0x0800359b
 8003560:	0800358b 	.word	0x0800358b
 8003564:	0800359b 	.word	0x0800359b
 8003568:	0800359b 	.word	0x0800359b
 800356c:	0800359b 	.word	0x0800359b
 8003570:	08003593 	.word	0x08003593
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003574:	f7fe fff4 	bl	8002560 <HAL_RCC_GetPCLK1Freq>
 8003578:	6178      	str	r0, [r7, #20]
        break;
 800357a:	e013      	b.n	80035a4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800357c:	f7ff f806 	bl	800258c <HAL_RCC_GetPCLK2Freq>
 8003580:	6178      	str	r0, [r7, #20]
        break;
 8003582:	e00f      	b.n	80035a4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003584:	4b49      	ldr	r3, [pc, #292]	; (80036ac <UART_SetConfig+0x510>)
 8003586:	617b      	str	r3, [r7, #20]
        break;
 8003588:	e00c      	b.n	80035a4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800358a:	f7fe ff53 	bl	8002434 <HAL_RCC_GetSysClockFreq>
 800358e:	6178      	str	r0, [r7, #20]
        break;
 8003590:	e008      	b.n	80035a4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003592:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003596:	617b      	str	r3, [r7, #20]
        break;
 8003598:	e004      	b.n	80035a4 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800359a:	2300      	movs	r3, #0
 800359c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	76bb      	strb	r3, [r7, #26]
        break;
 80035a2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d074      	beq.n	8003694 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	005a      	lsls	r2, r3, #1
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	085b      	lsrs	r3, r3, #1
 80035b4:	441a      	add	r2, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80035be:	b29b      	uxth	r3, r3
 80035c0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	2b0f      	cmp	r3, #15
 80035c6:	d916      	bls.n	80035f6 <UART_SetConfig+0x45a>
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035ce:	d212      	bcs.n	80035f6 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	f023 030f 	bic.w	r3, r3, #15
 80035d8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	085b      	lsrs	r3, r3, #1
 80035de:	b29b      	uxth	r3, r3
 80035e0:	f003 0307 	and.w	r3, r3, #7
 80035e4:	b29a      	uxth	r2, r3
 80035e6:	89fb      	ldrh	r3, [r7, #14]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	89fa      	ldrh	r2, [r7, #14]
 80035f2:	60da      	str	r2, [r3, #12]
 80035f4:	e04e      	b.n	8003694 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	76bb      	strb	r3, [r7, #26]
 80035fa:	e04b      	b.n	8003694 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80035fc:	7efb      	ldrb	r3, [r7, #27]
 80035fe:	2b08      	cmp	r3, #8
 8003600:	d827      	bhi.n	8003652 <UART_SetConfig+0x4b6>
 8003602:	a201      	add	r2, pc, #4	; (adr r2, 8003608 <UART_SetConfig+0x46c>)
 8003604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003608:	0800362d 	.word	0x0800362d
 800360c:	08003635 	.word	0x08003635
 8003610:	0800363d 	.word	0x0800363d
 8003614:	08003653 	.word	0x08003653
 8003618:	08003643 	.word	0x08003643
 800361c:	08003653 	.word	0x08003653
 8003620:	08003653 	.word	0x08003653
 8003624:	08003653 	.word	0x08003653
 8003628:	0800364b 	.word	0x0800364b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800362c:	f7fe ff98 	bl	8002560 <HAL_RCC_GetPCLK1Freq>
 8003630:	6178      	str	r0, [r7, #20]
        break;
 8003632:	e013      	b.n	800365c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003634:	f7fe ffaa 	bl	800258c <HAL_RCC_GetPCLK2Freq>
 8003638:	6178      	str	r0, [r7, #20]
        break;
 800363a:	e00f      	b.n	800365c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800363c:	4b1b      	ldr	r3, [pc, #108]	; (80036ac <UART_SetConfig+0x510>)
 800363e:	617b      	str	r3, [r7, #20]
        break;
 8003640:	e00c      	b.n	800365c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003642:	f7fe fef7 	bl	8002434 <HAL_RCC_GetSysClockFreq>
 8003646:	6178      	str	r0, [r7, #20]
        break;
 8003648:	e008      	b.n	800365c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800364a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800364e:	617b      	str	r3, [r7, #20]
        break;
 8003650:	e004      	b.n	800365c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003652:	2300      	movs	r3, #0
 8003654:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	76bb      	strb	r3, [r7, #26]
        break;
 800365a:	bf00      	nop
    }

    if (pclk != 0U)
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d018      	beq.n	8003694 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	085a      	lsrs	r2, r3, #1
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	441a      	add	r2, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	fbb2 f3f3 	udiv	r3, r2, r3
 8003674:	b29b      	uxth	r3, r3
 8003676:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	2b0f      	cmp	r3, #15
 800367c:	d908      	bls.n	8003690 <UART_SetConfig+0x4f4>
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003684:	d204      	bcs.n	8003690 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	693a      	ldr	r2, [r7, #16]
 800368c:	60da      	str	r2, [r3, #12]
 800368e:	e001      	b.n	8003694 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80036a0:	7ebb      	ldrb	r3, [r7, #26]
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3720      	adds	r7, #32
 80036a6:	46bd      	mov	sp, r7
 80036a8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80036ac:	00f42400 	.word	0x00f42400

080036b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036bc:	f003 0301 	and.w	r3, r3, #1
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d00a      	beq.n	80036da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	430a      	orrs	r2, r1
 80036d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036de:	f003 0302 	and.w	r3, r3, #2
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00a      	beq.n	80036fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	430a      	orrs	r2, r1
 80036fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003700:	f003 0304 	and.w	r3, r3, #4
 8003704:	2b00      	cmp	r3, #0
 8003706:	d00a      	beq.n	800371e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	430a      	orrs	r2, r1
 800371c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003722:	f003 0308 	and.w	r3, r3, #8
 8003726:	2b00      	cmp	r3, #0
 8003728:	d00a      	beq.n	8003740 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	430a      	orrs	r2, r1
 800373e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003744:	f003 0310 	and.w	r3, r3, #16
 8003748:	2b00      	cmp	r3, #0
 800374a:	d00a      	beq.n	8003762 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	430a      	orrs	r2, r1
 8003760:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003766:	f003 0320 	and.w	r3, r3, #32
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00a      	beq.n	8003784 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	430a      	orrs	r2, r1
 8003782:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800378c:	2b00      	cmp	r3, #0
 800378e:	d01a      	beq.n	80037c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	430a      	orrs	r2, r1
 80037a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037ae:	d10a      	bne.n	80037c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	430a      	orrs	r2, r1
 80037c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d00a      	beq.n	80037e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	430a      	orrs	r2, r1
 80037e6:	605a      	str	r2, [r3, #4]
  }
}
 80037e8:	bf00      	nop
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b086      	sub	sp, #24
 80037f8:	af02      	add	r7, sp, #8
 80037fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003802:	f7fc ff25 	bl	8000650 <HAL_GetTick>
 8003806:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0308 	and.w	r3, r3, #8
 8003812:	2b08      	cmp	r3, #8
 8003814:	d10e      	bne.n	8003834 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003816:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800381a:	9300      	str	r3, [sp, #0]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2200      	movs	r2, #0
 8003820:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f000 f82a 	bl	800387e <UART_WaitOnFlagUntilTimeout>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d001      	beq.n	8003834 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	e020      	b.n	8003876 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0304 	and.w	r3, r3, #4
 800383e:	2b04      	cmp	r3, #4
 8003840:	d10e      	bne.n	8003860 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003842:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003846:	9300      	str	r3, [sp, #0]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2200      	movs	r2, #0
 800384c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f000 f814 	bl	800387e <UART_WaitOnFlagUntilTimeout>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d001      	beq.n	8003860 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	e00a      	b.n	8003876 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2220      	movs	r2, #32
 8003864:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2220      	movs	r2, #32
 800386a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	3710      	adds	r7, #16
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}

0800387e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800387e:	b580      	push	{r7, lr}
 8003880:	b084      	sub	sp, #16
 8003882:	af00      	add	r7, sp, #0
 8003884:	60f8      	str	r0, [r7, #12]
 8003886:	60b9      	str	r1, [r7, #8]
 8003888:	603b      	str	r3, [r7, #0]
 800388a:	4613      	mov	r3, r2
 800388c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800388e:	e05d      	b.n	800394c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003896:	d059      	beq.n	800394c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003898:	f7fc feda 	bl	8000650 <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	69ba      	ldr	r2, [r7, #24]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d302      	bcc.n	80038ae <UART_WaitOnFlagUntilTimeout+0x30>
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d11b      	bne.n	80038e6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80038bc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	689a      	ldr	r2, [r3, #8]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f022 0201 	bic.w	r2, r2, #1
 80038cc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2220      	movs	r2, #32
 80038d2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2220      	movs	r2, #32
 80038d8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e042      	b.n	800396c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0304 	and.w	r3, r3, #4
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d02b      	beq.n	800394c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	69db      	ldr	r3, [r3, #28]
 80038fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003902:	d123      	bne.n	800394c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800390c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800391c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	689a      	ldr	r2, [r3, #8]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f022 0201 	bic.w	r2, r2, #1
 800392c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2220      	movs	r2, #32
 8003932:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2220      	movs	r2, #32
 8003938:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2220      	movs	r2, #32
 800393e:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2200      	movs	r2, #0
 8003944:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8003948:	2303      	movs	r3, #3
 800394a:	e00f      	b.n	800396c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	69da      	ldr	r2, [r3, #28]
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	4013      	ands	r3, r2
 8003956:	68ba      	ldr	r2, [r7, #8]
 8003958:	429a      	cmp	r2, r3
 800395a:	bf0c      	ite	eq
 800395c:	2301      	moveq	r3, #1
 800395e:	2300      	movne	r3, #0
 8003960:	b2db      	uxtb	r3, r3
 8003962:	461a      	mov	r2, r3
 8003964:	79fb      	ldrb	r3, [r7, #7]
 8003966:	429a      	cmp	r2, r3
 8003968:	d092      	beq.n	8003890 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800396a:	2300      	movs	r3, #0
}
 800396c:	4618      	mov	r0, r3
 800396e:	3710      	adds	r7, #16
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}

08003974 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	4603      	mov	r3, r0
 800397c:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 800397e:	88fb      	ldrh	r3, [r7, #6]
 8003980:	b2db      	uxtb	r3, r3
 8003982:	2120      	movs	r1, #32
 8003984:	4618      	mov	r0, r3
 8003986:	f000 ff4f 	bl	8004828 <SENSOR_IO_Read>
 800398a:	4603      	mov	r3, r0
 800398c:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 800398e:	7bfb      	ldrb	r3, [r7, #15]
 8003990:	f023 0304 	bic.w	r3, r3, #4
 8003994:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8003996:	7bfb      	ldrb	r3, [r7, #15]
 8003998:	f043 0304 	orr.w	r3, r3, #4
 800399c:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 800399e:	7bfb      	ldrb	r3, [r7, #15]
 80039a0:	f023 0303 	bic.w	r3, r3, #3
 80039a4:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 80039a6:	7bfb      	ldrb	r3, [r7, #15]
 80039a8:	f043 0301 	orr.w	r3, r3, #1
 80039ac:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 80039ae:	7bfb      	ldrb	r3, [r7, #15]
 80039b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80039b4:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80039b6:	88fb      	ldrh	r3, [r7, #6]
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	7bfa      	ldrb	r2, [r7, #15]
 80039bc:	2120      	movs	r1, #32
 80039be:	4618      	mov	r0, r3
 80039c0:	f000 ff18 	bl	80047f4 <SENSOR_IO_Write>
}
 80039c4:	bf00      	nop
 80039c6:	3710      	adds	r7, #16
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}

080039cc <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	4603      	mov	r3, r0
 80039d4:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80039d6:	2300      	movs	r3, #0
 80039d8:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 80039da:	f000 ff01 	bl	80047e0 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 80039de:	88fb      	ldrh	r3, [r7, #6]
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	210f      	movs	r1, #15
 80039e4:	4618      	mov	r0, r3
 80039e6:	f000 ff1f 	bl	8004828 <SENSOR_IO_Read>
 80039ea:	4603      	mov	r3, r0
 80039ec:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 80039ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3710      	adds	r7, #16
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b088      	sub	sp, #32
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	4603      	mov	r3, r0
 8003a00:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 8003a02:	88fb      	ldrh	r3, [r7, #6]
 8003a04:	b2d8      	uxtb	r0, r3
 8003a06:	f107 020c 	add.w	r2, r7, #12
 8003a0a:	2302      	movs	r3, #2
 8003a0c:	21b0      	movs	r1, #176	; 0xb0
 8003a0e:	f000 ff29 	bl	8004864 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 8003a12:	7b3b      	ldrb	r3, [r7, #12]
 8003a14:	085b      	lsrs	r3, r3, #1
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 8003a1a:	7b7b      	ldrb	r3, [r7, #13]
 8003a1c:	085b      	lsrs	r3, r3, #1
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8003a22:	88fb      	ldrh	r3, [r7, #6]
 8003a24:	b2d8      	uxtb	r0, r3
 8003a26:	f107 020c 	add.w	r2, r7, #12
 8003a2a:	2302      	movs	r3, #2
 8003a2c:	21b6      	movs	r1, #182	; 0xb6
 8003a2e:	f000 ff19 	bl	8004864 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8003a32:	7b7b      	ldrb	r3, [r7, #13]
 8003a34:	021b      	lsls	r3, r3, #8
 8003a36:	b21a      	sxth	r2, r3
 8003a38:	7b3b      	ldrb	r3, [r7, #12]
 8003a3a:	b21b      	sxth	r3, r3
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8003a40:	88fb      	ldrh	r3, [r7, #6]
 8003a42:	b2d8      	uxtb	r0, r3
 8003a44:	f107 020c 	add.w	r2, r7, #12
 8003a48:	2302      	movs	r3, #2
 8003a4a:	21ba      	movs	r1, #186	; 0xba
 8003a4c:	f000 ff0a 	bl	8004864 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8003a50:	7b7b      	ldrb	r3, [r7, #13]
 8003a52:	021b      	lsls	r3, r3, #8
 8003a54:	b21a      	sxth	r2, r3
 8003a56:	7b3b      	ldrb	r3, [r7, #12]
 8003a58:	b21b      	sxth	r3, r3
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 8003a5e:	88fb      	ldrh	r3, [r7, #6]
 8003a60:	b2d8      	uxtb	r0, r3
 8003a62:	f107 020c 	add.w	r2, r7, #12
 8003a66:	2302      	movs	r3, #2
 8003a68:	21a8      	movs	r1, #168	; 0xa8
 8003a6a:	f000 fefb 	bl	8004864 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8003a6e:	7b7b      	ldrb	r3, [r7, #13]
 8003a70:	021b      	lsls	r3, r3, #8
 8003a72:	b21a      	sxth	r2, r3
 8003a74:	7b3b      	ldrb	r3, [r7, #12]
 8003a76:	b21b      	sxth	r3, r3
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8003a7c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003a80:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	ee07 3a90 	vmov	s15, r3
 8003a8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a8e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8003a92:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	ee07 3a90 	vmov	s15, r3
 8003a9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003aa0:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003aa4:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003aa8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	ee07 3a90 	vmov	s15, r3
 8003ab2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ab6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003aba:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003abe:	ee07 3a90 	vmov	s15, r3
 8003ac2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ac6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003aca:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 8003ace:	edd7 7a04 	vldr	s15, [r7, #16]
 8003ad2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003ad6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ada:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 8003ade:	edd7 7a04 	vldr	s15, [r7, #16]
 8003ae2:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8003b28 <HTS221_H_ReadHumidity+0x130>
 8003ae6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aee:	dd01      	ble.n	8003af4 <HTS221_H_ReadHumidity+0xfc>
 8003af0:	4b0e      	ldr	r3, [pc, #56]	; (8003b2c <HTS221_H_ReadHumidity+0x134>)
 8003af2:	e00a      	b.n	8003b0a <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 8003af4:	edd7 7a04 	vldr	s15, [r7, #16]
 8003af8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b00:	d502      	bpl.n	8003b08 <HTS221_H_ReadHumidity+0x110>
 8003b02:	f04f 0300 	mov.w	r3, #0
 8003b06:	e000      	b.n	8003b0a <HTS221_H_ReadHumidity+0x112>
 8003b08:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 8003b0a:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 8003b0c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003b10:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003b14:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003b18:	eef0 7a66 	vmov.f32	s15, s13
}
 8003b1c:	eeb0 0a67 	vmov.f32	s0, s15
 8003b20:	3720      	adds	r7, #32
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	447a0000 	.word	0x447a0000
 8003b2c:	447a0000 	.word	0x447a0000

08003b30 <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b082      	sub	sp, #8
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	463b      	mov	r3, r7
 8003b38:	e883 0003 	stmia.w	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 8003b3c:	783b      	ldrb	r3, [r7, #0]
 8003b3e:	461a      	mov	r2, r3
 8003b40:	2120      	movs	r1, #32
 8003b42:	203c      	movs	r0, #60	; 0x3c
 8003b44:	f000 fe56 	bl	80047f4 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 8003b48:	787b      	ldrb	r3, [r7, #1]
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	2121      	movs	r1, #33	; 0x21
 8003b4e:	203c      	movs	r0, #60	; 0x3c
 8003b50:	f000 fe50 	bl	80047f4 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 8003b54:	78bb      	ldrb	r3, [r7, #2]
 8003b56:	461a      	mov	r2, r3
 8003b58:	2122      	movs	r1, #34	; 0x22
 8003b5a:	203c      	movs	r0, #60	; 0x3c
 8003b5c:	f000 fe4a 	bl	80047f4 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 8003b60:	78fb      	ldrb	r3, [r7, #3]
 8003b62:	461a      	mov	r2, r3
 8003b64:	2123      	movs	r1, #35	; 0x23
 8003b66:	203c      	movs	r0, #60	; 0x3c
 8003b68:	f000 fe44 	bl	80047f4 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 8003b6c:	793b      	ldrb	r3, [r7, #4]
 8003b6e:	461a      	mov	r2, r3
 8003b70:	2124      	movs	r1, #36	; 0x24
 8003b72:	203c      	movs	r0, #60	; 0x3c
 8003b74:	f000 fe3e 	bl	80047f4 <SENSOR_IO_Write>
}
 8003b78:	bf00      	nop
 8003b7a:	3708      	adds	r7, #8
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8003b86:	2300      	movs	r3, #0
 8003b88:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8003b8a:	2122      	movs	r1, #34	; 0x22
 8003b8c:	203c      	movs	r0, #60	; 0x3c
 8003b8e:	f000 fe4b 	bl	8004828 <SENSOR_IO_Read>
 8003b92:	4603      	mov	r3, r0
 8003b94:	71fb      	strb	r3, [r7, #7]

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 8003b96:	79fb      	ldrb	r3, [r7, #7]
 8003b98:	f023 0303 	bic.w	r3, r3, #3
 8003b9c:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
 8003b9e:	79fb      	ldrb	r3, [r7, #7]
 8003ba0:	f043 0303 	orr.w	r3, r3, #3
 8003ba4:	71fb      	strb	r3, [r7, #7]
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8003ba6:	79fb      	ldrb	r3, [r7, #7]
 8003ba8:	461a      	mov	r2, r3
 8003baa:	2122      	movs	r1, #34	; 0x22
 8003bac:	203c      	movs	r0, #60	; 0x3c
 8003bae:	f000 fe21 	bl	80047f4 <SENSOR_IO_Write>
}
 8003bb2:	bf00      	nop
 8003bb4:	3708      	adds	r7, #8
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}

08003bba <LIS3MDL_MagReadID>:
/**
  * @brief  Read LIS3MDL ID.
  * @retval ID 
  */
uint8_t LIS3MDL_MagReadID(void)
{
 8003bba:	b580      	push	{r7, lr}
 8003bbc:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8003bbe:	f000 fe0f 	bl	80047e0 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 8003bc2:	210f      	movs	r1, #15
 8003bc4:	203c      	movs	r0, #60	; 0x3c
 8003bc6:	f000 fe2f 	bl	8004828 <SENSOR_IO_Read>
 8003bca:	4603      	mov	r3, r0
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8003bde:	2122      	movs	r1, #34	; 0x22
 8003be0:	203c      	movs	r0, #60	; 0x3c
 8003be2:	f000 fe21 	bl	8004828 <SENSOR_IO_Read>
 8003be6:	4603      	mov	r3, r0
 8003be8:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 8003bea:	7bfb      	ldrb	r3, [r7, #15]
 8003bec:	f023 0320 	bic.w	r3, r3, #32
 8003bf0:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8003bf2:	88fb      	ldrh	r3, [r7, #6]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d003      	beq.n	8003c00 <LIS3MDL_MagLowPower+0x30>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 8003bf8:	7bfb      	ldrb	r3, [r7, #15]
 8003bfa:	f043 0320 	orr.w	r3, r3, #32
 8003bfe:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8003c00:	7bfb      	ldrb	r3, [r7, #15]
 8003c02:	461a      	mov	r2, r3
 8003c04:	2122      	movs	r1, #34	; 0x22
 8003c06:	203c      	movs	r0, #60	; 0x3c
 8003c08:	f000 fdf4 	bl	80047f4 <SENSOR_IO_Write>
}
 8003c0c:	bf00      	nop
 8003c0e:	3710      	adds	r7, #16
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b088      	sub	sp, #32
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlm= 0;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8003c20:	2300      	movs	r3, #0
 8003c22:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8003c24:	f04f 0300 	mov.w	r3, #0
 8003c28:	61bb      	str	r3, [r7, #24]
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 8003c2a:	2121      	movs	r1, #33	; 0x21
 8003c2c:	203c      	movs	r0, #60	; 0x3c
 8003c2e:	f000 fdfb 	bl	8004828 <SENSOR_IO_Read>
 8003c32:	4603      	mov	r3, r0
 8003c34:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 8003c36:	f107 0208 	add.w	r2, r7, #8
 8003c3a:	2306      	movs	r3, #6
 8003c3c:	21a8      	movs	r1, #168	; 0xa8
 8003c3e:	203c      	movs	r0, #60	; 0x3c
 8003c40:	f000 fe10 	bl	8004864 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8003c44:	2300      	movs	r3, #0
 8003c46:	77fb      	strb	r3, [r7, #31]
 8003c48:	e01f      	b.n	8003c8a <LIS3MDL_MagReadXYZ+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8003c4a:	7ffb      	ldrb	r3, [r7, #31]
 8003c4c:	005b      	lsls	r3, r3, #1
 8003c4e:	3301      	adds	r3, #1
 8003c50:	f107 0220 	add.w	r2, r7, #32
 8003c54:	4413      	add	r3, r2
 8003c56:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	021b      	lsls	r3, r3, #8
 8003c5e:	b29a      	uxth	r2, r3
 8003c60:	7ffb      	ldrb	r3, [r7, #31]
 8003c62:	005b      	lsls	r3, r3, #1
 8003c64:	f107 0120 	add.w	r1, r7, #32
 8003c68:	440b      	add	r3, r1
 8003c6a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	4413      	add	r3, r2
 8003c72:	b29a      	uxth	r2, r3
 8003c74:	7ffb      	ldrb	r3, [r7, #31]
 8003c76:	b212      	sxth	r2, r2
 8003c78:	005b      	lsls	r3, r3, #1
 8003c7a:	f107 0120 	add.w	r1, r7, #32
 8003c7e:	440b      	add	r3, r1
 8003c80:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8003c84:	7ffb      	ldrb	r3, [r7, #31]
 8003c86:	3301      	adds	r3, #1
 8003c88:	77fb      	strb	r3, [r7, #31]
 8003c8a:	7ffb      	ldrb	r3, [r7, #31]
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d9dc      	bls.n	8003c4a <LIS3MDL_MagReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 8003c90:	7dfb      	ldrb	r3, [r7, #23]
 8003c92:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003c96:	2b20      	cmp	r3, #32
 8003c98:	d00c      	beq.n	8003cb4 <LIS3MDL_MagReadXYZ+0xa0>
 8003c9a:	2b20      	cmp	r3, #32
 8003c9c:	dc02      	bgt.n	8003ca4 <LIS3MDL_MagReadXYZ+0x90>
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d005      	beq.n	8003cae <LIS3MDL_MagReadXYZ+0x9a>
 8003ca2:	e010      	b.n	8003cc6 <LIS3MDL_MagReadXYZ+0xb2>
 8003ca4:	2b40      	cmp	r3, #64	; 0x40
 8003ca6:	d008      	beq.n	8003cba <LIS3MDL_MagReadXYZ+0xa6>
 8003ca8:	2b60      	cmp	r3, #96	; 0x60
 8003caa:	d009      	beq.n	8003cc0 <LIS3MDL_MagReadXYZ+0xac>
 8003cac:	e00b      	b.n	8003cc6 <LIS3MDL_MagReadXYZ+0xb2>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 8003cae:	4b19      	ldr	r3, [pc, #100]	; (8003d14 <LIS3MDL_MagReadXYZ+0x100>)
 8003cb0:	61bb      	str	r3, [r7, #24]
    break;
 8003cb2:	e008      	b.n	8003cc6 <LIS3MDL_MagReadXYZ+0xb2>
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 8003cb4:	4b18      	ldr	r3, [pc, #96]	; (8003d18 <LIS3MDL_MagReadXYZ+0x104>)
 8003cb6:	61bb      	str	r3, [r7, #24]
    break;
 8003cb8:	e005      	b.n	8003cc6 <LIS3MDL_MagReadXYZ+0xb2>
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 8003cba:	4b18      	ldr	r3, [pc, #96]	; (8003d1c <LIS3MDL_MagReadXYZ+0x108>)
 8003cbc:	61bb      	str	r3, [r7, #24]
    break;
 8003cbe:	e002      	b.n	8003cc6 <LIS3MDL_MagReadXYZ+0xb2>
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 8003cc0:	4b17      	ldr	r3, [pc, #92]	; (8003d20 <LIS3MDL_MagReadXYZ+0x10c>)
 8003cc2:	61bb      	str	r3, [r7, #24]
    break;    
 8003cc4:	bf00      	nop
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	77fb      	strb	r3, [r7, #31]
 8003cca:	e01b      	b.n	8003d04 <LIS3MDL_MagReadXYZ+0xf0>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8003ccc:	7ffb      	ldrb	r3, [r7, #31]
 8003cce:	005b      	lsls	r3, r3, #1
 8003cd0:	f107 0220 	add.w	r2, r7, #32
 8003cd4:	4413      	add	r3, r2
 8003cd6:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8003cda:	ee07 3a90 	vmov	s15, r3
 8003cde:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ce2:	edd7 7a06 	vldr	s15, [r7, #24]
 8003ce6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cea:	7ffb      	ldrb	r3, [r7, #31]
 8003cec:	005b      	lsls	r3, r3, #1
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	4413      	add	r3, r2
 8003cf2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003cf6:	ee17 2a90 	vmov	r2, s15
 8003cfa:	b212      	sxth	r2, r2
 8003cfc:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8003cfe:	7ffb      	ldrb	r3, [r7, #31]
 8003d00:	3301      	adds	r3, #1
 8003d02:	77fb      	strb	r3, [r7, #31]
 8003d04:	7ffb      	ldrb	r3, [r7, #31]
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d9e0      	bls.n	8003ccc <LIS3MDL_MagReadXYZ+0xb8>
  }
}
 8003d0a:	bf00      	nop
 8003d0c:	3720      	adds	r7, #32
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	3e0f5c29 	.word	0x3e0f5c29
 8003d18:	3e947ae1 	.word	0x3e947ae1
 8003d1c:	3edc28f6 	.word	0x3edc28f6
 8003d20:	3f147ae1 	.word	0x3f147ae1

08003d24 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8003d32:	2110      	movs	r1, #16
 8003d34:	20d4      	movs	r0, #212	; 0xd4
 8003d36:	f000 fd77 	bl	8004828 <SENSOR_IO_Read>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8003d3e:	88fb      	ldrh	r3, [r7, #6]
 8003d40:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8003d42:	7bbb      	ldrb	r3, [r7, #14]
 8003d44:	f003 0303 	and.w	r3, r3, #3
 8003d48:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8003d4a:	7bba      	ldrb	r2, [r7, #14]
 8003d4c:	7bfb      	ldrb	r3, [r7, #15]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8003d52:	7bbb      	ldrb	r3, [r7, #14]
 8003d54:	461a      	mov	r2, r3
 8003d56:	2110      	movs	r1, #16
 8003d58:	20d4      	movs	r0, #212	; 0xd4
 8003d5a:	f000 fd4b 	bl	80047f4 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8003d5e:	2112      	movs	r1, #18
 8003d60:	20d4      	movs	r0, #212	; 0xd4
 8003d62:	f000 fd61 	bl	8004828 <SENSOR_IO_Read>
 8003d66:	4603      	mov	r3, r0
 8003d68:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8003d6a:	88fb      	ldrh	r3, [r7, #6]
 8003d6c:	0a1b      	lsrs	r3, r3, #8
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8003d72:	7bbb      	ldrb	r3, [r7, #14]
 8003d74:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8003d78:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8003d7a:	7bba      	ldrb	r2, [r7, #14]
 8003d7c:	7bfb      	ldrb	r3, [r7, #15]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8003d82:	7bbb      	ldrb	r3, [r7, #14]
 8003d84:	461a      	mov	r2, r3
 8003d86:	2112      	movs	r1, #18
 8003d88:	20d4      	movs	r0, #212	; 0xd4
 8003d8a:	f000 fd33 	bl	80047f4 <SENSOR_IO_Write>
}
 8003d8e:	bf00      	nop
 8003d90:	3710      	adds	r7, #16
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}

08003d96 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8003d96:	b580      	push	{r7, lr}
 8003d98:	b082      	sub	sp, #8
 8003d9a:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8003da0:	2110      	movs	r1, #16
 8003da2:	20d4      	movs	r0, #212	; 0xd4
 8003da4:	f000 fd40 	bl	8004828 <SENSOR_IO_Read>
 8003da8:	4603      	mov	r3, r0
 8003daa:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8003dac:	79fb      	ldrb	r3, [r7, #7]
 8003dae:	f003 030f 	and.w	r3, r3, #15
 8003db2:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8003db4:	79fb      	ldrb	r3, [r7, #7]
 8003db6:	461a      	mov	r2, r3
 8003db8:	2110      	movs	r1, #16
 8003dba:	20d4      	movs	r0, #212	; 0xd4
 8003dbc:	f000 fd1a 	bl	80047f4 <SENSOR_IO_Write>
}
 8003dc0:	bf00      	nop
 8003dc2:	3708      	adds	r7, #8
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8003dcc:	f000 fd08 	bl	80047e0 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8003dd0:	210f      	movs	r1, #15
 8003dd2:	20d4      	movs	r0, #212	; 0xd4
 8003dd4:	f000 fd28 	bl	8004828 <SENSOR_IO_Read>
 8003dd8:	4603      	mov	r3, r0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8003dde:	b580      	push	{r7, lr}
 8003de0:	b084      	sub	sp, #16
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	4603      	mov	r3, r0
 8003de6:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8003de8:	2300      	movs	r3, #0
 8003dea:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8003dec:	2115      	movs	r1, #21
 8003dee:	20d4      	movs	r0, #212	; 0xd4
 8003df0:	f000 fd1a 	bl	8004828 <SENSOR_IO_Read>
 8003df4:	4603      	mov	r3, r0
 8003df6:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8003df8:	7bfb      	ldrb	r3, [r7, #15]
 8003dfa:	f023 0310 	bic.w	r3, r3, #16
 8003dfe:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8003e00:	88fb      	ldrh	r3, [r7, #6]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d003      	beq.n	8003e0e <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8003e06:	7bfb      	ldrb	r3, [r7, #15]
 8003e08:	f043 0310 	orr.w	r3, r3, #16
 8003e0c:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8003e0e:	7bfb      	ldrb	r3, [r7, #15]
 8003e10:	461a      	mov	r2, r3
 8003e12:	2115      	movs	r1, #21
 8003e14:	20d4      	movs	r0, #212	; 0xd4
 8003e16:	f000 fced 	bl	80047f4 <SENSOR_IO_Write>
}
 8003e1a:	bf00      	nop
 8003e1c:	3710      	adds	r7, #16
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
	...

08003e24 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b088      	sub	sp, #32
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8003e30:	2300      	movs	r3, #0
 8003e32:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8003e34:	f04f 0300 	mov.w	r3, #0
 8003e38:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8003e3a:	2110      	movs	r1, #16
 8003e3c:	20d4      	movs	r0, #212	; 0xd4
 8003e3e:	f000 fcf3 	bl	8004828 <SENSOR_IO_Read>
 8003e42:	4603      	mov	r3, r0
 8003e44:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8003e46:	f107 0208 	add.w	r2, r7, #8
 8003e4a:	2306      	movs	r3, #6
 8003e4c:	2128      	movs	r1, #40	; 0x28
 8003e4e:	20d4      	movs	r0, #212	; 0xd4
 8003e50:	f000 fd08 	bl	8004864 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8003e54:	2300      	movs	r3, #0
 8003e56:	77fb      	strb	r3, [r7, #31]
 8003e58:	e01f      	b.n	8003e9a <LSM6DSL_AccReadXYZ+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8003e5a:	7ffb      	ldrb	r3, [r7, #31]
 8003e5c:	005b      	lsls	r3, r3, #1
 8003e5e:	3301      	adds	r3, #1
 8003e60:	f107 0220 	add.w	r2, r7, #32
 8003e64:	4413      	add	r3, r2
 8003e66:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	021b      	lsls	r3, r3, #8
 8003e6e:	b29a      	uxth	r2, r3
 8003e70:	7ffb      	ldrb	r3, [r7, #31]
 8003e72:	005b      	lsls	r3, r3, #1
 8003e74:	f107 0120 	add.w	r1, r7, #32
 8003e78:	440b      	add	r3, r1
 8003e7a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	4413      	add	r3, r2
 8003e82:	b29a      	uxth	r2, r3
 8003e84:	7ffb      	ldrb	r3, [r7, #31]
 8003e86:	b212      	sxth	r2, r2
 8003e88:	005b      	lsls	r3, r3, #1
 8003e8a:	f107 0120 	add.w	r1, r7, #32
 8003e8e:	440b      	add	r3, r1
 8003e90:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8003e94:	7ffb      	ldrb	r3, [r7, #31]
 8003e96:	3301      	adds	r3, #1
 8003e98:	77fb      	strb	r3, [r7, #31]
 8003e9a:	7ffb      	ldrb	r3, [r7, #31]
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d9dc      	bls.n	8003e5a <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8003ea0:	7dfb      	ldrb	r3, [r7, #23]
 8003ea2:	f003 030c 	and.w	r3, r3, #12
 8003ea6:	2b0c      	cmp	r3, #12
 8003ea8:	d828      	bhi.n	8003efc <LSM6DSL_AccReadXYZ+0xd8>
 8003eaa:	a201      	add	r2, pc, #4	; (adr r2, 8003eb0 <LSM6DSL_AccReadXYZ+0x8c>)
 8003eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eb0:	08003ee5 	.word	0x08003ee5
 8003eb4:	08003efd 	.word	0x08003efd
 8003eb8:	08003efd 	.word	0x08003efd
 8003ebc:	08003efd 	.word	0x08003efd
 8003ec0:	08003ef7 	.word	0x08003ef7
 8003ec4:	08003efd 	.word	0x08003efd
 8003ec8:	08003efd 	.word	0x08003efd
 8003ecc:	08003efd 	.word	0x08003efd
 8003ed0:	08003eeb 	.word	0x08003eeb
 8003ed4:	08003efd 	.word	0x08003efd
 8003ed8:	08003efd 	.word	0x08003efd
 8003edc:	08003efd 	.word	0x08003efd
 8003ee0:	08003ef1 	.word	0x08003ef1
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8003ee4:	4b18      	ldr	r3, [pc, #96]	; (8003f48 <LSM6DSL_AccReadXYZ+0x124>)
 8003ee6:	61bb      	str	r3, [r7, #24]
    break;
 8003ee8:	e008      	b.n	8003efc <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8003eea:	4b18      	ldr	r3, [pc, #96]	; (8003f4c <LSM6DSL_AccReadXYZ+0x128>)
 8003eec:	61bb      	str	r3, [r7, #24]
    break;
 8003eee:	e005      	b.n	8003efc <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8003ef0:	4b17      	ldr	r3, [pc, #92]	; (8003f50 <LSM6DSL_AccReadXYZ+0x12c>)
 8003ef2:	61bb      	str	r3, [r7, #24]
    break;
 8003ef4:	e002      	b.n	8003efc <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8003ef6:	4b17      	ldr	r3, [pc, #92]	; (8003f54 <LSM6DSL_AccReadXYZ+0x130>)
 8003ef8:	61bb      	str	r3, [r7, #24]
    break;    
 8003efa:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8003efc:	2300      	movs	r3, #0
 8003efe:	77fb      	strb	r3, [r7, #31]
 8003f00:	e01b      	b.n	8003f3a <LSM6DSL_AccReadXYZ+0x116>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8003f02:	7ffb      	ldrb	r3, [r7, #31]
 8003f04:	005b      	lsls	r3, r3, #1
 8003f06:	f107 0220 	add.w	r2, r7, #32
 8003f0a:	4413      	add	r3, r2
 8003f0c:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8003f10:	ee07 3a90 	vmov	s15, r3
 8003f14:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f18:	edd7 7a06 	vldr	s15, [r7, #24]
 8003f1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f20:	7ffb      	ldrb	r3, [r7, #31]
 8003f22:	005b      	lsls	r3, r3, #1
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	4413      	add	r3, r2
 8003f28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f2c:	ee17 2a90 	vmov	r2, s15
 8003f30:	b212      	sxth	r2, r2
 8003f32:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8003f34:	7ffb      	ldrb	r3, [r7, #31]
 8003f36:	3301      	adds	r3, #1
 8003f38:	77fb      	strb	r3, [r7, #31]
 8003f3a:	7ffb      	ldrb	r3, [r7, #31]
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d9e0      	bls.n	8003f02 <LSM6DSL_AccReadXYZ+0xde>
  }
}
 8003f40:	bf00      	nop
 8003f42:	3720      	adds	r7, #32
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	3d79db23 	.word	0x3d79db23
 8003f4c:	3df9db23 	.word	0x3df9db23
 8003f50:	3e79db23 	.word	0x3e79db23
 8003f54:	3ef9db23 	.word	0x3ef9db23

08003f58 <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	4603      	mov	r3, r0
 8003f60:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8003f62:	2300      	movs	r3, #0
 8003f64:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8003f66:	2111      	movs	r1, #17
 8003f68:	20d4      	movs	r0, #212	; 0xd4
 8003f6a:	f000 fc5d 	bl	8004828 <SENSOR_IO_Read>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8003f72:	88fb      	ldrh	r3, [r7, #6]
 8003f74:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8003f76:	7bbb      	ldrb	r3, [r7, #14]
 8003f78:	f003 0303 	and.w	r3, r3, #3
 8003f7c:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8003f7e:	7bba      	ldrb	r2, [r7, #14]
 8003f80:	7bfb      	ldrb	r3, [r7, #15]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 8003f86:	7bbb      	ldrb	r3, [r7, #14]
 8003f88:	461a      	mov	r2, r3
 8003f8a:	2111      	movs	r1, #17
 8003f8c:	20d4      	movs	r0, #212	; 0xd4
 8003f8e:	f000 fc31 	bl	80047f4 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8003f92:	2112      	movs	r1, #18
 8003f94:	20d4      	movs	r0, #212	; 0xd4
 8003f96:	f000 fc47 	bl	8004828 <SENSOR_IO_Read>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8003f9e:	88fb      	ldrh	r3, [r7, #6]
 8003fa0:	0a1b      	lsrs	r3, r3, #8
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8003fa6:	7bbb      	ldrb	r3, [r7, #14]
 8003fa8:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8003fac:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8003fae:	7bba      	ldrb	r2, [r7, #14]
 8003fb0:	7bfb      	ldrb	r3, [r7, #15]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8003fb6:	7bbb      	ldrb	r3, [r7, #14]
 8003fb8:	461a      	mov	r2, r3
 8003fba:	2112      	movs	r1, #18
 8003fbc:	20d4      	movs	r0, #212	; 0xd4
 8003fbe:	f000 fc19 	bl	80047f4 <SENSOR_IO_Write>
}
 8003fc2:	bf00      	nop
 8003fc4:	3710      	adds	r7, #16
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}

08003fca <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 8003fca:	b580      	push	{r7, lr}
 8003fcc:	b082      	sub	sp, #8
 8003fce:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8003fd4:	2111      	movs	r1, #17
 8003fd6:	20d4      	movs	r0, #212	; 0xd4
 8003fd8:	f000 fc26 	bl	8004828 <SENSOR_IO_Read>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8003fe0:	79fb      	ldrb	r3, [r7, #7]
 8003fe2:	f003 030f 	and.w	r3, r3, #15
 8003fe6:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 8003fe8:	79fb      	ldrb	r3, [r7, #7]
 8003fea:	461a      	mov	r2, r3
 8003fec:	2111      	movs	r1, #17
 8003fee:	20d4      	movs	r0, #212	; 0xd4
 8003ff0:	f000 fc00 	bl	80047f4 <SENSOR_IO_Write>
}
 8003ff4:	bf00      	nop
 8003ff6:	3708      	adds	r7, #8
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <LSM6DSL_GyroReadID>:
/**
  * @brief  Read ID address of LSM6DSL
  * @retval ID 
  */
uint8_t LSM6DSL_GyroReadID(void)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8004000:	f000 fbee 	bl	80047e0 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 8004004:	210f      	movs	r1, #15
 8004006:	20d4      	movs	r0, #212	; 0xd4
 8004008:	f000 fc0e 	bl	8004828 <SENSOR_IO_Read>
 800400c:	4603      	mov	r3, r0
}
 800400e:	4618      	mov	r0, r3
 8004010:	bd80      	pop	{r7, pc}

08004012 <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 8004012:	b580      	push	{r7, lr}
 8004014:	b084      	sub	sp, #16
 8004016:	af00      	add	r7, sp, #0
 8004018:	4603      	mov	r3, r0
 800401a:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800401c:	2300      	movs	r3, #0
 800401e:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 8004020:	2116      	movs	r1, #22
 8004022:	20d4      	movs	r0, #212	; 0xd4
 8004024:	f000 fc00 	bl	8004828 <SENSOR_IO_Read>
 8004028:	4603      	mov	r3, r0
 800402a:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 800402c:	7bfb      	ldrb	r3, [r7, #15]
 800402e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004032:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8004034:	88fb      	ldrh	r3, [r7, #6]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d003      	beq.n	8004042 <LSM6DSL_GyroLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 800403a:	7bfb      	ldrb	r3, [r7, #15]
 800403c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004040:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 8004042:	7bfb      	ldrb	r3, [r7, #15]
 8004044:	461a      	mov	r2, r3
 8004046:	2116      	movs	r1, #22
 8004048:	20d4      	movs	r0, #212	; 0xd4
 800404a:	f000 fbd3 	bl	80047f4 <SENSOR_IO_Write>
}
 800404e:	bf00      	nop
 8004050:	3710      	adds	r7, #16
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
	...

08004058 <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b088      	sub	sp, #32
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlg= 0;
 8004060:	2300      	movs	r3, #0
 8004062:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8004064:	2300      	movs	r3, #0
 8004066:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8004068:	f04f 0300 	mov.w	r3, #0
 800406c:	61bb      	str	r3, [r7, #24]
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 800406e:	2111      	movs	r1, #17
 8004070:	20d4      	movs	r0, #212	; 0xd4
 8004072:	f000 fbd9 	bl	8004828 <SENSOR_IO_Read>
 8004076:	4603      	mov	r3, r0
 8004078:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 800407a:	f107 0208 	add.w	r2, r7, #8
 800407e:	2306      	movs	r3, #6
 8004080:	2122      	movs	r1, #34	; 0x22
 8004082:	20d4      	movs	r0, #212	; 0xd4
 8004084:	f000 fbee 	bl	8004864 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8004088:	2300      	movs	r3, #0
 800408a:	77fb      	strb	r3, [r7, #31]
 800408c:	e01f      	b.n	80040ce <LSM6DSL_GyroReadXYZAngRate+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800408e:	7ffb      	ldrb	r3, [r7, #31]
 8004090:	005b      	lsls	r3, r3, #1
 8004092:	3301      	adds	r3, #1
 8004094:	f107 0220 	add.w	r2, r7, #32
 8004098:	4413      	add	r3, r2
 800409a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800409e:	b29b      	uxth	r3, r3
 80040a0:	021b      	lsls	r3, r3, #8
 80040a2:	b29a      	uxth	r2, r3
 80040a4:	7ffb      	ldrb	r3, [r7, #31]
 80040a6:	005b      	lsls	r3, r3, #1
 80040a8:	f107 0120 	add.w	r1, r7, #32
 80040ac:	440b      	add	r3, r1
 80040ae:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	4413      	add	r3, r2
 80040b6:	b29a      	uxth	r2, r3
 80040b8:	7ffb      	ldrb	r3, [r7, #31]
 80040ba:	b212      	sxth	r2, r2
 80040bc:	005b      	lsls	r3, r3, #1
 80040be:	f107 0120 	add.w	r1, r7, #32
 80040c2:	440b      	add	r3, r1
 80040c4:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 80040c8:	7ffb      	ldrb	r3, [r7, #31]
 80040ca:	3301      	adds	r3, #1
 80040cc:	77fb      	strb	r3, [r7, #31]
 80040ce:	7ffb      	ldrb	r3, [r7, #31]
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	d9dc      	bls.n	800408e <LSM6DSL_GyroReadXYZAngRate+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 80040d4:	7dfb      	ldrb	r3, [r7, #23]
 80040d6:	f003 030c 	and.w	r3, r3, #12
 80040da:	2b0c      	cmp	r3, #12
 80040dc:	d828      	bhi.n	8004130 <LSM6DSL_GyroReadXYZAngRate+0xd8>
 80040de:	a201      	add	r2, pc, #4	; (adr r2, 80040e4 <LSM6DSL_GyroReadXYZAngRate+0x8c>)
 80040e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040e4:	08004119 	.word	0x08004119
 80040e8:	08004131 	.word	0x08004131
 80040ec:	08004131 	.word	0x08004131
 80040f0:	08004131 	.word	0x08004131
 80040f4:	0800411f 	.word	0x0800411f
 80040f8:	08004131 	.word	0x08004131
 80040fc:	08004131 	.word	0x08004131
 8004100:	08004131 	.word	0x08004131
 8004104:	08004125 	.word	0x08004125
 8004108:	08004131 	.word	0x08004131
 800410c:	08004131 	.word	0x08004131
 8004110:	08004131 	.word	0x08004131
 8004114:	0800412b 	.word	0x0800412b
  {
  case LSM6DSL_GYRO_FS_245:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 8004118:	4b16      	ldr	r3, [pc, #88]	; (8004174 <LSM6DSL_GyroReadXYZAngRate+0x11c>)
 800411a:	61bb      	str	r3, [r7, #24]
    break;
 800411c:	e008      	b.n	8004130 <LSM6DSL_GyroReadXYZAngRate+0xd8>
  case LSM6DSL_GYRO_FS_500:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 800411e:	4b16      	ldr	r3, [pc, #88]	; (8004178 <LSM6DSL_GyroReadXYZAngRate+0x120>)
 8004120:	61bb      	str	r3, [r7, #24]
    break;
 8004122:	e005      	b.n	8004130 <LSM6DSL_GyroReadXYZAngRate+0xd8>
  case LSM6DSL_GYRO_FS_1000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 8004124:	4b15      	ldr	r3, [pc, #84]	; (800417c <LSM6DSL_GyroReadXYZAngRate+0x124>)
 8004126:	61bb      	str	r3, [r7, #24]
    break;
 8004128:	e002      	b.n	8004130 <LSM6DSL_GyroReadXYZAngRate+0xd8>
  case LSM6DSL_GYRO_FS_2000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 800412a:	4b15      	ldr	r3, [pc, #84]	; (8004180 <LSM6DSL_GyroReadXYZAngRate+0x128>)
 800412c:	61bb      	str	r3, [r7, #24]
    break;    
 800412e:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8004130:	2300      	movs	r3, #0
 8004132:	77fb      	strb	r3, [r7, #31]
 8004134:	e017      	b.n	8004166 <LSM6DSL_GyroReadXYZAngRate+0x10e>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 8004136:	7ffb      	ldrb	r3, [r7, #31]
 8004138:	005b      	lsls	r3, r3, #1
 800413a:	f107 0220 	add.w	r2, r7, #32
 800413e:	4413      	add	r3, r2
 8004140:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8004144:	ee07 3a90 	vmov	s15, r3
 8004148:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800414c:	7ffb      	ldrb	r3, [r7, #31]
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	4413      	add	r3, r2
 8004154:	edd7 7a06 	vldr	s15, [r7, #24]
 8004158:	ee67 7a27 	vmul.f32	s15, s14, s15
 800415c:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8004160:	7ffb      	ldrb	r3, [r7, #31]
 8004162:	3301      	adds	r3, #1
 8004164:	77fb      	strb	r3, [r7, #31]
 8004166:	7ffb      	ldrb	r3, [r7, #31]
 8004168:	2b02      	cmp	r3, #2
 800416a:	d9e4      	bls.n	8004136 <LSM6DSL_GyroReadXYZAngRate+0xde>
  }
}
 800416c:	bf00      	nop
 800416e:	3720      	adds	r7, #32
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}
 8004174:	410c0000 	.word	0x410c0000
 8004178:	418c0000 	.word	0x418c0000
 800417c:	420c0000 	.word	0x420c0000
 8004180:	428c0000 	.word	0x428c0000

08004184 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b0a4      	sub	sp, #144	; 0x90
 8004188:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800418a:	f7fc f9f9 	bl	8000580 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800418e:	f000 f89f 	bl	80042d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004192:	f000 f987 	bl	80044a4 <MX_GPIO_Init>
  MX_I2C2_Init();
 8004196:	f000 f915 	bl	80043c4 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 800419a:	f000 f953 	bl	8004444 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  BSP_ACCELERO_Init();
 800419e:	f000 fb7f 	bl	80048a0 <BSP_ACCELERO_Init>
  BSP_GYRO_Init();
 80041a2:	f000 fbd3 	bl	800494c <BSP_GYRO_Init>
  BSP_MAGNETO_Init();
 80041a6:	f000 fc59 	bl	8004a5c <BSP_MAGNETO_Init>
  BSP_HSENSOR_Init();
 80041aa:	f000 fc29 	bl	8004a00 <BSP_HSENSOR_Init>
  HAL_UART_Init(&huart1);
 80041ae:	4841      	ldr	r0, [pc, #260]	; (80042b4 <main+0x130>)
 80041b0:	f7fe ff12 	bl	8002fd8 <HAL_UART_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	// poll sensors at 10 Hz
	BSP_ACCELERO_AccGetXYZ(accelero);
 80041b4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80041b8:	4618      	mov	r0, r3
 80041ba:	f000 fbaf 	bl	800491c <BSP_ACCELERO_AccGetXYZ>
	BSP_GYRO_GetXYZ(gyro);
 80041be:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80041c2:	4618      	mov	r0, r3
 80041c4:	f000 fc04 	bl	80049d0 <BSP_GYRO_GetXYZ>
	BSP_MAGNETO_GetXYZ(magneto);
 80041c8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80041cc:	4618      	mov	r0, r3
 80041ce:	f000 fc71 	bl	8004ab4 <BSP_MAGNETO_GetXYZ>
	hsensor = BSP_HSENSOR_ReadHumidity();
 80041d2:	f000 fc35 	bl	8004a40 <BSP_HSENSOR_ReadHumidity>
 80041d6:	ed87 0a21 	vstr	s0, [r7, #132]	; 0x84
	switch(mode) {
 80041da:	4b37      	ldr	r3, [pc, #220]	; (80042b8 <main+0x134>)
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	2b03      	cmp	r3, #3
 80041e0:	d84c      	bhi.n	800427c <main+0xf8>
 80041e2:	a201      	add	r2, pc, #4	; (adr r2, 80041e8 <main+0x64>)
 80041e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041e8:	080041f9 	.word	0x080041f9
 80041ec:	08004217 	.word	0x08004217
 80041f0:	08004247 	.word	0x08004247
 80041f4:	08004265 	.word	0x08004265
	case 0:
		// accelerometer
		sprintf(str, "Acceleration X, Y, Z: %.2d, %.2d, %.2d", (int) accelero[0], (int) accelero[1], (int) accelero[2]);
 80041f8:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	; 0x7c
 80041fc:	461a      	mov	r2, r3
 80041fe:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 8004202:	4619      	mov	r1, r3
 8004204:	f9b7 3080 	ldrsh.w	r3, [r7, #128]	; 0x80
 8004208:	1d38      	adds	r0, r7, #4
 800420a:	9300      	str	r3, [sp, #0]
 800420c:	460b      	mov	r3, r1
 800420e:	492b      	ldr	r1, [pc, #172]	; (80042bc <main+0x138>)
 8004210:	f000 fe36 	bl	8004e80 <siprintf>
		break;
 8004214:	e032      	b.n	800427c <main+0xf8>
	case 1:
		// gyroscope
		sprintf(str, "Gyro X, Y, Z: %.2d, %.2d, %.2d", (int) gyro[0], (int) gyro[1], (int) gyro[2]);
 8004216:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800421a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800421e:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8004222:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8004226:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800422a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800422e:	ee17 3a90 	vmov	r3, s15
 8004232:	1d38      	adds	r0, r7, #4
 8004234:	9300      	str	r3, [sp, #0]
 8004236:	ee16 3a90 	vmov	r3, s13
 800423a:	ee17 2a10 	vmov	r2, s14
 800423e:	4920      	ldr	r1, [pc, #128]	; (80042c0 <main+0x13c>)
 8004240:	f000 fe1e 	bl	8004e80 <siprintf>
		break;
 8004244:	e01a      	b.n	800427c <main+0xf8>
	case 2:
		// magnetometer
		sprintf(str, "Magnetic X, Y, Z: %.2d, %.2d, %.2d", (int) magneto[0], (int) magneto[1], (int) magneto[2]);
 8004246:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 800424a:	461a      	mov	r2, r3
 800424c:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 8004250:	4619      	mov	r1, r3
 8004252:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 8004256:	1d38      	adds	r0, r7, #4
 8004258:	9300      	str	r3, [sp, #0]
 800425a:	460b      	mov	r3, r1
 800425c:	4919      	ldr	r1, [pc, #100]	; (80042c4 <main+0x140>)
 800425e:	f000 fe0f 	bl	8004e80 <siprintf>
		break;
 8004262:	e00b      	b.n	800427c <main+0xf8>
	case 3:
		// humidity sensor
		sprintf(str, "Humidity: %.2d", (int) hsensor);
 8004264:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8004268:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800426c:	1d3b      	adds	r3, r7, #4
 800426e:	ee17 2a90 	vmov	r2, s15
 8004272:	4915      	ldr	r1, [pc, #84]	; (80042c8 <main+0x144>)
 8004274:	4618      	mov	r0, r3
 8004276:	f000 fe03 	bl	8004e80 <siprintf>
		break;
 800427a:	bf00      	nop
	}
	UART_status = HAL_UART_Transmit(&huart1, (uint8_t*) str, (uint16_t) strlen(str), 10000);
 800427c:	1d3b      	adds	r3, r7, #4
 800427e:	4618      	mov	r0, r3
 8004280:	f7fb ffa6 	bl	80001d0 <strlen>
 8004284:	4603      	mov	r3, r0
 8004286:	b29a      	uxth	r2, r3
 8004288:	1d39      	adds	r1, r7, #4
 800428a:	f242 7310 	movw	r3, #10000	; 0x2710
 800428e:	4809      	ldr	r0, [pc, #36]	; (80042b4 <main+0x130>)
 8004290:	f7fe fef0 	bl	8003074 <HAL_UART_Transmit>
 8004294:	4603      	mov	r3, r0
 8004296:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
	if (UART_status != HAL_OK)
 800429a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d003      	beq.n	80042aa <main+0x126>
		HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 80042a2:	2108      	movs	r1, #8
 80042a4:	4809      	ldr	r0, [pc, #36]	; (80042cc <main+0x148>)
 80042a6:	f7fc fdc7 	bl	8000e38 <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 80042aa:	2064      	movs	r0, #100	; 0x64
 80042ac:	f7fc f9dc 	bl	8000668 <HAL_Delay>
	BSP_ACCELERO_AccGetXYZ(accelero);
 80042b0:	e780      	b.n	80041b4 <main+0x30>
 80042b2:	bf00      	nop
 80042b4:	200001a4 	.word	0x200001a4
 80042b8:	20000134 	.word	0x20000134
 80042bc:	080056a4 	.word	0x080056a4
 80042c0:	080056cc 	.word	0x080056cc
 80042c4:	080056ec 	.word	0x080056ec
 80042c8:	08005710 	.word	0x08005710
 80042cc:	48001000 	.word	0x48001000

080042d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b0b8      	sub	sp, #224	; 0xe0
 80042d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80042d6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80042da:	2244      	movs	r2, #68	; 0x44
 80042dc:	2100      	movs	r1, #0
 80042de:	4618      	mov	r0, r3
 80042e0:	f000 fdc6 	bl	8004e70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80042e4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80042e8:	2200      	movs	r2, #0
 80042ea:	601a      	str	r2, [r3, #0]
 80042ec:	605a      	str	r2, [r3, #4]
 80042ee:	609a      	str	r2, [r3, #8]
 80042f0:	60da      	str	r2, [r3, #12]
 80042f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80042f4:	463b      	mov	r3, r7
 80042f6:	2288      	movs	r2, #136	; 0x88
 80042f8:	2100      	movs	r1, #0
 80042fa:	4618      	mov	r0, r3
 80042fc:	f000 fdb8 	bl	8004e70 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8004300:	2310      	movs	r3, #16
 8004302:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8004306:	2301      	movs	r3, #1
 8004308:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800430c:	2300      	movs	r3, #0
 800430e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8004312:	2360      	movs	r3, #96	; 0x60
 8004314:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004318:	2302      	movs	r3, #2
 800431a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800431e:	2301      	movs	r3, #1
 8004320:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8004324:	2301      	movs	r3, #1
 8004326:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 800432a:	2328      	movs	r3, #40	; 0x28
 800432c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8004330:	2307      	movs	r3, #7
 8004332:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004336:	2302      	movs	r3, #2
 8004338:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800433c:	2302      	movs	r3, #2
 800433e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004342:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004346:	4618      	mov	r0, r3
 8004348:	f7fd fbac 	bl	8001aa4 <HAL_RCC_OscConfig>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d001      	beq.n	8004356 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8004352:	f000 f94d 	bl	80045f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004356:	230f      	movs	r3, #15
 8004358:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800435c:	2303      	movs	r3, #3
 800435e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004362:	2300      	movs	r3, #0
 8004364:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004368:	2300      	movs	r3, #0
 800436a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800436e:	2300      	movs	r3, #0
 8004370:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004374:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8004378:	2104      	movs	r1, #4
 800437a:	4618      	mov	r0, r3
 800437c:	f7fd ff78 	bl	8002270 <HAL_RCC_ClockConfig>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d001      	beq.n	800438a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8004386:	f000 f933 	bl	80045f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C2;
 800438a:	2381      	movs	r3, #129	; 0x81
 800438c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800438e:	2300      	movs	r3, #0
 8004390:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8004392:	2300      	movs	r3, #0
 8004394:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004396:	463b      	mov	r3, r7
 8004398:	4618      	mov	r0, r3
 800439a:	f7fe f96d 	bl	8002678 <HAL_RCCEx_PeriphCLKConfig>
 800439e:	4603      	mov	r3, r0
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d001      	beq.n	80043a8 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 80043a4:	f000 f924 	bl	80045f0 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80043a8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80043ac:	f7fd fb24 	bl	80019f8 <HAL_PWREx_ControlVoltageScaling>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d001      	beq.n	80043ba <SystemClock_Config+0xea>
  {
    Error_Handler();
 80043b6:	f000 f91b 	bl	80045f0 <Error_Handler>
  }
}
 80043ba:	bf00      	nop
 80043bc:	37e0      	adds	r7, #224	; 0xe0
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
	...

080043c4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80043c8:	4b1b      	ldr	r3, [pc, #108]	; (8004438 <MX_I2C2_Init+0x74>)
 80043ca:	4a1c      	ldr	r2, [pc, #112]	; (800443c <MX_I2C2_Init+0x78>)
 80043cc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 80043ce:	4b1a      	ldr	r3, [pc, #104]	; (8004438 <MX_I2C2_Init+0x74>)
 80043d0:	4a1b      	ldr	r2, [pc, #108]	; (8004440 <MX_I2C2_Init+0x7c>)
 80043d2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80043d4:	4b18      	ldr	r3, [pc, #96]	; (8004438 <MX_I2C2_Init+0x74>)
 80043d6:	2200      	movs	r2, #0
 80043d8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80043da:	4b17      	ldr	r3, [pc, #92]	; (8004438 <MX_I2C2_Init+0x74>)
 80043dc:	2201      	movs	r2, #1
 80043de:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80043e0:	4b15      	ldr	r3, [pc, #84]	; (8004438 <MX_I2C2_Init+0x74>)
 80043e2:	2200      	movs	r2, #0
 80043e4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80043e6:	4b14      	ldr	r3, [pc, #80]	; (8004438 <MX_I2C2_Init+0x74>)
 80043e8:	2200      	movs	r2, #0
 80043ea:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80043ec:	4b12      	ldr	r3, [pc, #72]	; (8004438 <MX_I2C2_Init+0x74>)
 80043ee:	2200      	movs	r2, #0
 80043f0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80043f2:	4b11      	ldr	r3, [pc, #68]	; (8004438 <MX_I2C2_Init+0x74>)
 80043f4:	2200      	movs	r2, #0
 80043f6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80043f8:	4b0f      	ldr	r3, [pc, #60]	; (8004438 <MX_I2C2_Init+0x74>)
 80043fa:	2200      	movs	r2, #0
 80043fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80043fe:	480e      	ldr	r0, [pc, #56]	; (8004438 <MX_I2C2_Init+0x74>)
 8004400:	f7fc fd4c 	bl	8000e9c <HAL_I2C_Init>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d001      	beq.n	800440e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800440a:	f000 f8f1 	bl	80045f0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800440e:	2100      	movs	r1, #0
 8004410:	4809      	ldr	r0, [pc, #36]	; (8004438 <MX_I2C2_Init+0x74>)
 8004412:	f7fd fa4b 	bl	80018ac <HAL_I2CEx_ConfigAnalogFilter>
 8004416:	4603      	mov	r3, r0
 8004418:	2b00      	cmp	r3, #0
 800441a:	d001      	beq.n	8004420 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800441c:	f000 f8e8 	bl	80045f0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8004420:	2100      	movs	r1, #0
 8004422:	4805      	ldr	r0, [pc, #20]	; (8004438 <MX_I2C2_Init+0x74>)
 8004424:	f7fd fa8d 	bl	8001942 <HAL_I2CEx_ConfigDigitalFilter>
 8004428:	4603      	mov	r3, r0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d001      	beq.n	8004432 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800442e:	f000 f8df 	bl	80045f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8004432:	bf00      	nop
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	20000158 	.word	0x20000158
 800443c:	40005800 	.word	0x40005800
 8004440:	10909cec 	.word	0x10909cec

08004444 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004448:	4b14      	ldr	r3, [pc, #80]	; (800449c <MX_USART1_UART_Init+0x58>)
 800444a:	4a15      	ldr	r2, [pc, #84]	; (80044a0 <MX_USART1_UART_Init+0x5c>)
 800444c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800444e:	4b13      	ldr	r3, [pc, #76]	; (800449c <MX_USART1_UART_Init+0x58>)
 8004450:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004454:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004456:	4b11      	ldr	r3, [pc, #68]	; (800449c <MX_USART1_UART_Init+0x58>)
 8004458:	2200      	movs	r2, #0
 800445a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800445c:	4b0f      	ldr	r3, [pc, #60]	; (800449c <MX_USART1_UART_Init+0x58>)
 800445e:	2200      	movs	r2, #0
 8004460:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004462:	4b0e      	ldr	r3, [pc, #56]	; (800449c <MX_USART1_UART_Init+0x58>)
 8004464:	2200      	movs	r2, #0
 8004466:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004468:	4b0c      	ldr	r3, [pc, #48]	; (800449c <MX_USART1_UART_Init+0x58>)
 800446a:	220c      	movs	r2, #12
 800446c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800446e:	4b0b      	ldr	r3, [pc, #44]	; (800449c <MX_USART1_UART_Init+0x58>)
 8004470:	2200      	movs	r2, #0
 8004472:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004474:	4b09      	ldr	r3, [pc, #36]	; (800449c <MX_USART1_UART_Init+0x58>)
 8004476:	2200      	movs	r2, #0
 8004478:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800447a:	4b08      	ldr	r3, [pc, #32]	; (800449c <MX_USART1_UART_Init+0x58>)
 800447c:	2200      	movs	r2, #0
 800447e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004480:	4b06      	ldr	r3, [pc, #24]	; (800449c <MX_USART1_UART_Init+0x58>)
 8004482:	2200      	movs	r2, #0
 8004484:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004486:	4805      	ldr	r0, [pc, #20]	; (800449c <MX_USART1_UART_Init+0x58>)
 8004488:	f7fe fda6 	bl	8002fd8 <HAL_UART_Init>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d001      	beq.n	8004496 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8004492:	f000 f8ad 	bl	80045f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004496:	bf00      	nop
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	200001a4 	.word	0x200001a4
 80044a0:	40013800 	.word	0x40013800

080044a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b08a      	sub	sp, #40	; 0x28
 80044a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044aa:	f107 0314 	add.w	r3, r7, #20
 80044ae:	2200      	movs	r2, #0
 80044b0:	601a      	str	r2, [r3, #0]
 80044b2:	605a      	str	r2, [r3, #4]
 80044b4:	609a      	str	r2, [r3, #8]
 80044b6:	60da      	str	r2, [r3, #12]
 80044b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80044ba:	4b38      	ldr	r3, [pc, #224]	; (800459c <MX_GPIO_Init+0xf8>)
 80044bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044be:	4a37      	ldr	r2, [pc, #220]	; (800459c <MX_GPIO_Init+0xf8>)
 80044c0:	f043 0310 	orr.w	r3, r3, #16
 80044c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80044c6:	4b35      	ldr	r3, [pc, #212]	; (800459c <MX_GPIO_Init+0xf8>)
 80044c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ca:	f003 0310 	and.w	r3, r3, #16
 80044ce:	613b      	str	r3, [r7, #16]
 80044d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80044d2:	4b32      	ldr	r3, [pc, #200]	; (800459c <MX_GPIO_Init+0xf8>)
 80044d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044d6:	4a31      	ldr	r2, [pc, #196]	; (800459c <MX_GPIO_Init+0xf8>)
 80044d8:	f043 0304 	orr.w	r3, r3, #4
 80044dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80044de:	4b2f      	ldr	r3, [pc, #188]	; (800459c <MX_GPIO_Init+0xf8>)
 80044e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044e2:	f003 0304 	and.w	r3, r3, #4
 80044e6:	60fb      	str	r3, [r7, #12]
 80044e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80044ea:	4b2c      	ldr	r3, [pc, #176]	; (800459c <MX_GPIO_Init+0xf8>)
 80044ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ee:	4a2b      	ldr	r2, [pc, #172]	; (800459c <MX_GPIO_Init+0xf8>)
 80044f0:	f043 0302 	orr.w	r3, r3, #2
 80044f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80044f6:	4b29      	ldr	r3, [pc, #164]	; (800459c <MX_GPIO_Init+0xf8>)
 80044f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044fa:	f003 0302 	and.w	r3, r3, #2
 80044fe:	60bb      	str	r3, [r7, #8]
 8004500:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004502:	4b26      	ldr	r3, [pc, #152]	; (800459c <MX_GPIO_Init+0xf8>)
 8004504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004506:	4a25      	ldr	r2, [pc, #148]	; (800459c <MX_GPIO_Init+0xf8>)
 8004508:	f043 0301 	orr.w	r3, r3, #1
 800450c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800450e:	4b23      	ldr	r3, [pc, #140]	; (800459c <MX_GPIO_Init+0xf8>)
 8004510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004512:	f003 0301 	and.w	r3, r3, #1
 8004516:	607b      	str	r3, [r7, #4]
 8004518:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 800451a:	2200      	movs	r2, #0
 800451c:	2108      	movs	r1, #8
 800451e:	4820      	ldr	r0, [pc, #128]	; (80045a0 <MX_GPIO_Init+0xfc>)
 8004520:	f7fc fc72 	bl	8000e08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8004524:	2200      	movs	r2, #0
 8004526:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800452a:	481e      	ldr	r0, [pc, #120]	; (80045a4 <MX_GPIO_Init+0x100>)
 800452c:	f7fc fc6c 	bl	8000e08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8004530:	2308      	movs	r3, #8
 8004532:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004534:	2301      	movs	r3, #1
 8004536:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004538:	2300      	movs	r3, #0
 800453a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800453c:	2300      	movs	r3, #0
 800453e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8004540:	f107 0314 	add.w	r3, r7, #20
 8004544:	4619      	mov	r1, r3
 8004546:	4816      	ldr	r0, [pc, #88]	; (80045a0 <MX_GPIO_Init+0xfc>)
 8004548:	f7fc f9c2 	bl	80008d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800454c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004550:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004552:	4b15      	ldr	r3, [pc, #84]	; (80045a8 <MX_GPIO_Init+0x104>)
 8004554:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004556:	2300      	movs	r3, #0
 8004558:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 800455a:	f107 0314 	add.w	r3, r7, #20
 800455e:	4619      	mov	r1, r3
 8004560:	4812      	ldr	r0, [pc, #72]	; (80045ac <MX_GPIO_Init+0x108>)
 8004562:	f7fc f9b5 	bl	80008d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8004566:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800456a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800456c:	2301      	movs	r3, #1
 800456e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004570:	2300      	movs	r3, #0
 8004572:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004574:	2300      	movs	r3, #0
 8004576:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8004578:	f107 0314 	add.w	r3, r7, #20
 800457c:	4619      	mov	r1, r3
 800457e:	4809      	ldr	r0, [pc, #36]	; (80045a4 <MX_GPIO_Init+0x100>)
 8004580:	f7fc f9a6 	bl	80008d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004584:	2200      	movs	r2, #0
 8004586:	2100      	movs	r1, #0
 8004588:	2028      	movs	r0, #40	; 0x28
 800458a:	f7fc f96a 	bl	8000862 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800458e:	2028      	movs	r0, #40	; 0x28
 8004590:	f7fc f983 	bl	800089a <HAL_NVIC_EnableIRQ>

}
 8004594:	bf00      	nop
 8004596:	3728      	adds	r7, #40	; 0x28
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}
 800459c:	40021000 	.word	0x40021000
 80045a0:	48001000 	.word	0x48001000
 80045a4:	48000400 	.word	0x48000400
 80045a8:	10110000 	.word	0x10110000
 80045ac:	48000800 	.word	0x48000800

080045b0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b082      	sub	sp, #8
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	4603      	mov	r3, r0
 80045b8:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 80045ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80045be:	480a      	ldr	r0, [pc, #40]	; (80045e8 <HAL_GPIO_EXTI_Callback+0x38>)
 80045c0:	f7fc fc3a 	bl	8000e38 <HAL_GPIO_TogglePin>
	mode = (mode + 1) % 4;
 80045c4:	4b09      	ldr	r3, [pc, #36]	; (80045ec <HAL_GPIO_EXTI_Callback+0x3c>)
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	3301      	adds	r3, #1
 80045ca:	425a      	negs	r2, r3
 80045cc:	f003 0303 	and.w	r3, r3, #3
 80045d0:	f002 0203 	and.w	r2, r2, #3
 80045d4:	bf58      	it	pl
 80045d6:	4253      	negpl	r3, r2
 80045d8:	b2da      	uxtb	r2, r3
 80045da:	4b04      	ldr	r3, [pc, #16]	; (80045ec <HAL_GPIO_EXTI_Callback+0x3c>)
 80045dc:	701a      	strb	r2, [r3, #0]
}
 80045de:	bf00      	nop
 80045e0:	3708      	adds	r7, #8
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	bf00      	nop
 80045e8:	48000400 	.word	0x48000400
 80045ec:	20000134 	.word	0x20000134

080045f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80045f0:	b480      	push	{r7}
 80045f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80045f4:	bf00      	nop
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr
	...

08004600 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b08a      	sub	sp, #40	; 0x28
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8004608:	4b27      	ldr	r3, [pc, #156]	; (80046a8 <I2Cx_MspInit+0xa8>)
 800460a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800460c:	4a26      	ldr	r2, [pc, #152]	; (80046a8 <I2Cx_MspInit+0xa8>)
 800460e:	f043 0302 	orr.w	r3, r3, #2
 8004612:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004614:	4b24      	ldr	r3, [pc, #144]	; (80046a8 <I2Cx_MspInit+0xa8>)
 8004616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004618:	f003 0302 	and.w	r3, r3, #2
 800461c:	613b      	str	r3, [r7, #16]
 800461e:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8004620:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004624:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8004626:	2312      	movs	r3, #18
 8004628:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800462a:	2301      	movs	r3, #1
 800462c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800462e:	2303      	movs	r3, #3
 8004630:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8004632:	2304      	movs	r3, #4
 8004634:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8004636:	f107 0314 	add.w	r3, r7, #20
 800463a:	4619      	mov	r1, r3
 800463c:	481b      	ldr	r0, [pc, #108]	; (80046ac <I2Cx_MspInit+0xac>)
 800463e:	f7fc f947 	bl	80008d0 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8004642:	f107 0314 	add.w	r3, r7, #20
 8004646:	4619      	mov	r1, r3
 8004648:	4818      	ldr	r0, [pc, #96]	; (80046ac <I2Cx_MspInit+0xac>)
 800464a:	f7fc f941 	bl	80008d0 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 800464e:	4b16      	ldr	r3, [pc, #88]	; (80046a8 <I2Cx_MspInit+0xa8>)
 8004650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004652:	4a15      	ldr	r2, [pc, #84]	; (80046a8 <I2Cx_MspInit+0xa8>)
 8004654:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004658:	6593      	str	r3, [r2, #88]	; 0x58
 800465a:	4b13      	ldr	r3, [pc, #76]	; (80046a8 <I2Cx_MspInit+0xa8>)
 800465c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800465e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004662:	60fb      	str	r3, [r7, #12]
 8004664:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8004666:	4b10      	ldr	r3, [pc, #64]	; (80046a8 <I2Cx_MspInit+0xa8>)
 8004668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800466a:	4a0f      	ldr	r2, [pc, #60]	; (80046a8 <I2Cx_MspInit+0xa8>)
 800466c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004670:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8004672:	4b0d      	ldr	r3, [pc, #52]	; (80046a8 <I2Cx_MspInit+0xa8>)
 8004674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004676:	4a0c      	ldr	r2, [pc, #48]	; (80046a8 <I2Cx_MspInit+0xa8>)
 8004678:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800467c:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800467e:	2200      	movs	r2, #0
 8004680:	210f      	movs	r1, #15
 8004682:	2021      	movs	r0, #33	; 0x21
 8004684:	f7fc f8ed 	bl	8000862 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8004688:	2021      	movs	r0, #33	; 0x21
 800468a:	f7fc f906 	bl	800089a <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800468e:	2200      	movs	r2, #0
 8004690:	210f      	movs	r1, #15
 8004692:	2022      	movs	r0, #34	; 0x22
 8004694:	f7fc f8e5 	bl	8000862 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8004698:	2022      	movs	r0, #34	; 0x22
 800469a:	f7fc f8fe 	bl	800089a <HAL_NVIC_EnableIRQ>
}
 800469e:	bf00      	nop
 80046a0:	3728      	adds	r7, #40	; 0x28
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	40021000 	.word	0x40021000
 80046ac:	48000400 	.word	0x48000400

080046b0 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b082      	sub	sp, #8
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4a12      	ldr	r2, [pc, #72]	; (8004704 <I2Cx_Init+0x54>)
 80046bc:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a11      	ldr	r2, [pc, #68]	; (8004708 <I2Cx_Init+0x58>)
 80046c2:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2201      	movs	r2, #1
 80046ce:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f7ff ff89 	bl	8004600 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f7fc fbd4 	bl	8000e9c <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 80046f4:	2100      	movs	r1, #0
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f7fd f8d8 	bl	80018ac <HAL_I2CEx_ConfigAnalogFilter>
}
 80046fc:	bf00      	nop
 80046fe:	3708      	adds	r7, #8
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}
 8004704:	40005800 	.word	0x40005800
 8004708:	00702681 	.word	0x00702681

0800470c <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b08a      	sub	sp, #40	; 0x28
 8004710:	af04      	add	r7, sp, #16
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	4608      	mov	r0, r1
 8004716:	4611      	mov	r1, r2
 8004718:	461a      	mov	r2, r3
 800471a:	4603      	mov	r3, r0
 800471c:	72fb      	strb	r3, [r7, #11]
 800471e:	460b      	mov	r3, r1
 8004720:	813b      	strh	r3, [r7, #8]
 8004722:	4613      	mov	r3, r2
 8004724:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8004726:	2300      	movs	r3, #0
 8004728:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800472a:	7afb      	ldrb	r3, [r7, #11]
 800472c:	b299      	uxth	r1, r3
 800472e:	88f8      	ldrh	r0, [r7, #6]
 8004730:	893a      	ldrh	r2, [r7, #8]
 8004732:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004736:	9302      	str	r3, [sp, #8]
 8004738:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800473a:	9301      	str	r3, [sp, #4]
 800473c:	6a3b      	ldr	r3, [r7, #32]
 800473e:	9300      	str	r3, [sp, #0]
 8004740:	4603      	mov	r3, r0
 8004742:	68f8      	ldr	r0, [r7, #12]
 8004744:	f7fc fd7c 	bl	8001240 <HAL_I2C_Mem_Read>
 8004748:	4603      	mov	r3, r0
 800474a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800474c:	7dfb      	ldrb	r3, [r7, #23]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d004      	beq.n	800475c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 8004752:	7afb      	ldrb	r3, [r7, #11]
 8004754:	4619      	mov	r1, r3
 8004756:	68f8      	ldr	r0, [r7, #12]
 8004758:	f000 f832 	bl	80047c0 <I2Cx_Error>
  }
  return status;
 800475c:	7dfb      	ldrb	r3, [r7, #23]
}
 800475e:	4618      	mov	r0, r3
 8004760:	3718      	adds	r7, #24
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}

08004766 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8004766:	b580      	push	{r7, lr}
 8004768:	b08a      	sub	sp, #40	; 0x28
 800476a:	af04      	add	r7, sp, #16
 800476c:	60f8      	str	r0, [r7, #12]
 800476e:	4608      	mov	r0, r1
 8004770:	4611      	mov	r1, r2
 8004772:	461a      	mov	r2, r3
 8004774:	4603      	mov	r3, r0
 8004776:	72fb      	strb	r3, [r7, #11]
 8004778:	460b      	mov	r3, r1
 800477a:	813b      	strh	r3, [r7, #8]
 800477c:	4613      	mov	r3, r2
 800477e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8004780:	2300      	movs	r3, #0
 8004782:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8004784:	7afb      	ldrb	r3, [r7, #11]
 8004786:	b299      	uxth	r1, r3
 8004788:	88f8      	ldrh	r0, [r7, #6]
 800478a:	893a      	ldrh	r2, [r7, #8]
 800478c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004790:	9302      	str	r3, [sp, #8]
 8004792:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004794:	9301      	str	r3, [sp, #4]
 8004796:	6a3b      	ldr	r3, [r7, #32]
 8004798:	9300      	str	r3, [sp, #0]
 800479a:	4603      	mov	r3, r0
 800479c:	68f8      	ldr	r0, [r7, #12]
 800479e:	f7fc fc3b 	bl	8001018 <HAL_I2C_Mem_Write>
 80047a2:	4603      	mov	r3, r0
 80047a4:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80047a6:	7dfb      	ldrb	r3, [r7, #23]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d004      	beq.n	80047b6 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80047ac:	7afb      	ldrb	r3, [r7, #11]
 80047ae:	4619      	mov	r1, r3
 80047b0:	68f8      	ldr	r0, [r7, #12]
 80047b2:	f000 f805 	bl	80047c0 <I2Cx_Error>
  }
  return status;
 80047b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3718      	adds	r7, #24
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}

080047c0 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b082      	sub	sp, #8
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	460b      	mov	r3, r1
 80047ca:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f7fc fbf4 	bl	8000fba <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f7ff ff6c 	bl	80046b0 <I2Cx_Init>
}
 80047d8:	bf00      	nop
 80047da:	3708      	adds	r7, #8
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}

080047e0 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 80047e4:	4802      	ldr	r0, [pc, #8]	; (80047f0 <SENSOR_IO_Init+0x10>)
 80047e6:	f7ff ff63 	bl	80046b0 <I2Cx_Init>
}
 80047ea:	bf00      	nop
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	200002a4 	.word	0x200002a4

080047f4 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af02      	add	r7, sp, #8
 80047fa:	4603      	mov	r3, r0
 80047fc:	71fb      	strb	r3, [r7, #7]
 80047fe:	460b      	mov	r3, r1
 8004800:	71bb      	strb	r3, [r7, #6]
 8004802:	4613      	mov	r3, r2
 8004804:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8004806:	79bb      	ldrb	r3, [r7, #6]
 8004808:	b29a      	uxth	r2, r3
 800480a:	79f9      	ldrb	r1, [r7, #7]
 800480c:	2301      	movs	r3, #1
 800480e:	9301      	str	r3, [sp, #4]
 8004810:	1d7b      	adds	r3, r7, #5
 8004812:	9300      	str	r3, [sp, #0]
 8004814:	2301      	movs	r3, #1
 8004816:	4803      	ldr	r0, [pc, #12]	; (8004824 <SENSOR_IO_Write+0x30>)
 8004818:	f7ff ffa5 	bl	8004766 <I2Cx_WriteMultiple>
}
 800481c:	bf00      	nop
 800481e:	3708      	adds	r7, #8
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}
 8004824:	200002a4 	.word	0x200002a4

08004828 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b086      	sub	sp, #24
 800482c:	af02      	add	r7, sp, #8
 800482e:	4603      	mov	r3, r0
 8004830:	460a      	mov	r2, r1
 8004832:	71fb      	strb	r3, [r7, #7]
 8004834:	4613      	mov	r3, r2
 8004836:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8004838:	2300      	movs	r3, #0
 800483a:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800483c:	79bb      	ldrb	r3, [r7, #6]
 800483e:	b29a      	uxth	r2, r3
 8004840:	79f9      	ldrb	r1, [r7, #7]
 8004842:	2301      	movs	r3, #1
 8004844:	9301      	str	r3, [sp, #4]
 8004846:	f107 030f 	add.w	r3, r7, #15
 800484a:	9300      	str	r3, [sp, #0]
 800484c:	2301      	movs	r3, #1
 800484e:	4804      	ldr	r0, [pc, #16]	; (8004860 <SENSOR_IO_Read+0x38>)
 8004850:	f7ff ff5c 	bl	800470c <I2Cx_ReadMultiple>

  return read_value;
 8004854:	7bfb      	ldrb	r3, [r7, #15]
}
 8004856:	4618      	mov	r0, r3
 8004858:	3710      	adds	r7, #16
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	200002a4 	.word	0x200002a4

08004864 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af02      	add	r7, sp, #8
 800486a:	603a      	str	r2, [r7, #0]
 800486c:	461a      	mov	r2, r3
 800486e:	4603      	mov	r3, r0
 8004870:	71fb      	strb	r3, [r7, #7]
 8004872:	460b      	mov	r3, r1
 8004874:	71bb      	strb	r3, [r7, #6]
 8004876:	4613      	mov	r3, r2
 8004878:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800487a:	79bb      	ldrb	r3, [r7, #6]
 800487c:	b29a      	uxth	r2, r3
 800487e:	79f9      	ldrb	r1, [r7, #7]
 8004880:	88bb      	ldrh	r3, [r7, #4]
 8004882:	9301      	str	r3, [sp, #4]
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	9300      	str	r3, [sp, #0]
 8004888:	2301      	movs	r3, #1
 800488a:	4804      	ldr	r0, [pc, #16]	; (800489c <SENSOR_IO_ReadMultiple+0x38>)
 800488c:	f7ff ff3e 	bl	800470c <I2Cx_ReadMultiple>
 8004890:	4603      	mov	r3, r0
 8004892:	b29b      	uxth	r3, r3
}
 8004894:	4618      	mov	r0, r3
 8004896:	3708      	adds	r7, #8
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}
 800489c:	200002a4 	.word	0x200002a4

080048a0 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b084      	sub	sp, #16
 80048a4:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 80048a6:	2300      	movs	r3, #0
 80048a8:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80048aa:	2300      	movs	r3, #0
 80048ac:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 80048ae:	4b19      	ldr	r3, [pc, #100]	; (8004914 <BSP_ACCELERO_Init+0x74>)
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	4798      	blx	r3
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b6a      	cmp	r3, #106	; 0x6a
 80048b8:	d002      	beq.n	80048c0 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	73fb      	strb	r3, [r7, #15]
 80048be:	e024      	b.n	800490a <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 80048c0:	4b15      	ldr	r3, [pc, #84]	; (8004918 <BSP_ACCELERO_Init+0x78>)
 80048c2:	4a14      	ldr	r2, [pc, #80]	; (8004914 <BSP_ACCELERO_Init+0x74>)
 80048c4:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 80048c6:	2330      	movs	r3, #48	; 0x30
 80048c8:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 80048ca:	2300      	movs	r3, #0
 80048cc:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 80048ce:	2300      	movs	r3, #0
 80048d0:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 80048d2:	2340      	movs	r3, #64	; 0x40
 80048d4:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 80048d6:	2300      	movs	r3, #0
 80048d8:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 80048da:	2300      	movs	r3, #0
 80048dc:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 80048de:	797a      	ldrb	r2, [r7, #5]
 80048e0:	7abb      	ldrb	r3, [r7, #10]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 80048e8:	7a3b      	ldrb	r3, [r7, #8]
 80048ea:	f043 0304 	orr.w	r3, r3, #4
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	021b      	lsls	r3, r3, #8
 80048f2:	b21a      	sxth	r2, r3
 80048f4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	b21b      	sxth	r3, r3
 80048fc:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 80048fe:	4b06      	ldr	r3, [pc, #24]	; (8004918 <BSP_ACCELERO_Init+0x78>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	89ba      	ldrh	r2, [r7, #12]
 8004906:	4610      	mov	r0, r2
 8004908:	4798      	blx	r3
  }  

  return ret;
 800490a:	7bfb      	ldrb	r3, [r7, #15]
}
 800490c:	4618      	mov	r0, r3
 800490e:	3710      	adds	r7, #16
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}
 8004914:	20000048 	.word	0x20000048
 8004918:	20000138 	.word	0x20000138

0800491c <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b082      	sub	sp, #8
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8004924:	4b08      	ldr	r3, [pc, #32]	; (8004948 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d009      	beq.n	8004940 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 800492c:	4b06      	ldr	r3, [pc, #24]	; (8004948 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004932:	2b00      	cmp	r3, #0
 8004934:	d004      	beq.n	8004940 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8004936:	4b04      	ldr	r3, [pc, #16]	; (8004948 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	4798      	blx	r3
    }
  }
}
 8004940:	bf00      	nop
 8004942:	3708      	adds	r7, #8
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}
 8004948:	20000138 	.word	0x20000138

0800494c <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8004956:	2300      	movs	r3, #0
 8004958:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 800495a:	4b1b      	ldr	r3, [pc, #108]	; (80049c8 <BSP_GYRO_Init+0x7c>)
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	4798      	blx	r3
 8004960:	4603      	mov	r3, r0
 8004962:	2b6a      	cmp	r3, #106	; 0x6a
 8004964:	d002      	beq.n	800496c <BSP_GYRO_Init+0x20>
  {
    ret = GYRO_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	73fb      	strb	r3, [r7, #15]
 800496a:	e028      	b.n	80049be <BSP_GYRO_Init+0x72>
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 800496c:	4b17      	ldr	r3, [pc, #92]	; (80049cc <BSP_GYRO_Init+0x80>)
 800496e:	4a16      	ldr	r2, [pc, #88]	; (80049c8 <BSP_GYRO_Init+0x7c>)
 8004970:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    LSM6DSL_InitStructure.Power_Mode = 0;
 8004972:	2300      	movs	r3, #0
 8004974:	713b      	strb	r3, [r7, #4]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_52Hz;
 8004976:	2330      	movs	r3, #48	; 0x30
 8004978:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 800497a:	2300      	movs	r3, #0
 800497c:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.Band_Width = 0;
 800497e:	2300      	movs	r3, #0
 8004980:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8004982:	2340      	movs	r3, #64	; 0x40
 8004984:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.Endianness = 0;
 8004986:	2300      	movs	r3, #0
 8004988:	727b      	strb	r3, [r7, #9]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_2000; 
 800498a:	230c      	movs	r3, #12
 800498c:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, full scale  */
    ctrl = (LSM6DSL_InitStructure.Full_Scale | LSM6DSL_InitStructure.Output_DataRate);
 800498e:	7aba      	ldrb	r2, [r7, #10]
 8004990:	797b      	ldrb	r3, [r7, #5]
 8004992:	4313      	orrs	r3, r2
 8004994:	b2db      	uxtb	r3, r3
 8004996:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8004998:	7a3b      	ldrb	r3, [r7, #8]
 800499a:	f043 0304 	orr.w	r3, r3, #4
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	021b      	lsls	r3, r3, #8
 80049a2:	b21a      	sxth	r2, r3
 80049a4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	b21b      	sxth	r3, r3
 80049ac:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 80049ae:	4b07      	ldr	r3, [pc, #28]	; (80049cc <BSP_GYRO_Init+0x80>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	89ba      	ldrh	r2, [r7, #12]
 80049b6:	4610      	mov	r0, r2
 80049b8:	4798      	blx	r3
    
    ret = GYRO_OK;
 80049ba:	2300      	movs	r3, #0
 80049bc:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 80049be:	7bfb      	ldrb	r3, [r7, #15]
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3710      	adds	r7, #16
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	2000007c 	.word	0x2000007c
 80049cc:	2000013c 	.word	0x2000013c

080049d0 <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b082      	sub	sp, #8
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv != NULL)
 80049d8:	4b08      	ldr	r3, [pc, #32]	; (80049fc <BSP_GYRO_GetXYZ+0x2c>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d009      	beq.n	80049f4 <BSP_GYRO_GetXYZ+0x24>
  {
    if(GyroscopeDrv->GetXYZ!= NULL)
 80049e0:	4b06      	ldr	r3, [pc, #24]	; (80049fc <BSP_GYRO_GetXYZ+0x2c>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d004      	beq.n	80049f4 <BSP_GYRO_GetXYZ+0x24>
    {
      GyroscopeDrv->GetXYZ(pfData);
 80049ea:	4b04      	ldr	r3, [pc, #16]	; (80049fc <BSP_GYRO_GetXYZ+0x2c>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	4798      	blx	r3
    }
  }
}
 80049f4:	bf00      	nop
 80049f6:	3708      	adds	r7, #8
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	2000013c 	.word	0x2000013c

08004a00 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b082      	sub	sp, #8
 8004a04:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 8004a06:	4b0c      	ldr	r3, [pc, #48]	; (8004a38 <BSP_HSENSOR_Init+0x38>)
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	20be      	movs	r0, #190	; 0xbe
 8004a0c:	4798      	blx	r3
 8004a0e:	4603      	mov	r3, r0
 8004a10:	2bbc      	cmp	r3, #188	; 0xbc
 8004a12:	d002      	beq.n	8004a1a <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	607b      	str	r3, [r7, #4]
 8004a18:	e009      	b.n	8004a2e <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 8004a1a:	4b08      	ldr	r3, [pc, #32]	; (8004a3c <BSP_HSENSOR_Init+0x3c>)
 8004a1c:	4a06      	ldr	r2, [pc, #24]	; (8004a38 <BSP_HSENSOR_Init+0x38>)
 8004a1e:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 8004a20:	4b06      	ldr	r3, [pc, #24]	; (8004a3c <BSP_HSENSOR_Init+0x3c>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	20be      	movs	r0, #190	; 0xbe
 8004a28:	4798      	blx	r3
    ret = HSENSOR_OK;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8004a2e:	687b      	ldr	r3, [r7, #4]
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3708      	adds	r7, #8
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	20000008 	.word	0x20000008
 8004a3c:	20000140 	.word	0x20000140

08004a40 <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 8004a40:	b580      	push	{r7, lr}
 8004a42:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 8004a44:	4b04      	ldr	r3, [pc, #16]	; (8004a58 <BSP_HSENSOR_ReadHumidity+0x18>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	20be      	movs	r0, #190	; 0xbe
 8004a4c:	4798      	blx	r3
 8004a4e:	eef0 7a40 	vmov.f32	s15, s0
}
 8004a52:	eeb0 0a67 	vmov.f32	s0, s15
 8004a56:	bd80      	pop	{r7, pc}
 8004a58:	20000140 	.word	0x20000140

08004a5c <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b082      	sub	sp, #8
 8004a60:	af00      	add	r7, sp, #0
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 8004a62:	2300      	movs	r3, #0
 8004a64:	71fb      	strb	r3, [r7, #7]
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 8004a66:	4b11      	ldr	r3, [pc, #68]	; (8004aac <BSP_MAGNETO_Init+0x50>)
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	4798      	blx	r3
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2b3d      	cmp	r3, #61	; 0x3d
 8004a70:	d002      	beq.n	8004a78 <BSP_MAGNETO_Init+0x1c>
  {
    ret = MAGNETO_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	71fb      	strb	r3, [r7, #7]
 8004a76:	e013      	b.n	8004aa0 <BSP_MAGNETO_Init+0x44>
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 8004a78:	4b0d      	ldr	r3, [pc, #52]	; (8004ab0 <BSP_MAGNETO_Init+0x54>)
 8004a7a:	4a0c      	ldr	r2, [pc, #48]	; (8004aac <BSP_MAGNETO_Init+0x50>)
 8004a7c:	601a      	str	r2, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 8004a7e:	2358      	movs	r3, #88	; 0x58
 8004a80:	703b      	strb	r3, [r7, #0]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 8004a82:	2300      	movs	r3, #0
 8004a84:	707b      	strb	r3, [r7, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 8004a86:	2300      	movs	r3, #0
 8004a88:	70bb      	strb	r3, [r7, #2]
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 8004a8a:	2308      	movs	r3, #8
 8004a8c:	70fb      	strb	r3, [r7, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 8004a8e:	2340      	movs	r3, #64	; 0x40
 8004a90:	713b      	strb	r3, [r7, #4]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 8004a92:	4b07      	ldr	r3, [pc, #28]	; (8004ab0 <BSP_MAGNETO_Init+0x54>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	463a      	mov	r2, r7
 8004a9a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004a9e:	4798      	blx	r3
  } 

  return ret;  
 8004aa0:	79fb      	ldrb	r3, [r7, #7]
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3708      	adds	r7, #8
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	20000014 	.word	0x20000014
 8004ab0:	20000144 	.word	0x20000144

08004ab4 <BSP_MAGNETO_GetXYZ>:
  * @brief  Get XYZ magnetometer values.
  * @param  pDataXYZ Pointer on 3 magnetometer values table with
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis 
  */
void BSP_MAGNETO_GetXYZ(int16_t *pDataXYZ)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  if(MagnetoDrv != NULL)
 8004abc:	4b08      	ldr	r3, [pc, #32]	; (8004ae0 <BSP_MAGNETO_GetXYZ+0x2c>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d009      	beq.n	8004ad8 <BSP_MAGNETO_GetXYZ+0x24>
  {
    if(MagnetoDrv->GetXYZ != NULL)
 8004ac4:	4b06      	ldr	r3, [pc, #24]	; (8004ae0 <BSP_MAGNETO_GetXYZ+0x2c>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d004      	beq.n	8004ad8 <BSP_MAGNETO_GetXYZ+0x24>
    {   
      MagnetoDrv->GetXYZ(pDataXYZ);
 8004ace:	4b04      	ldr	r3, [pc, #16]	; (8004ae0 <BSP_MAGNETO_GetXYZ+0x2c>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	4798      	blx	r3
    }
  }
}
 8004ad8:	bf00      	nop
 8004ada:	3708      	adds	r7, #8
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	20000144 	.word	0x20000144

08004ae4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004aea:	4b0f      	ldr	r3, [pc, #60]	; (8004b28 <HAL_MspInit+0x44>)
 8004aec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004aee:	4a0e      	ldr	r2, [pc, #56]	; (8004b28 <HAL_MspInit+0x44>)
 8004af0:	f043 0301 	orr.w	r3, r3, #1
 8004af4:	6613      	str	r3, [r2, #96]	; 0x60
 8004af6:	4b0c      	ldr	r3, [pc, #48]	; (8004b28 <HAL_MspInit+0x44>)
 8004af8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004afa:	f003 0301 	and.w	r3, r3, #1
 8004afe:	607b      	str	r3, [r7, #4]
 8004b00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004b02:	4b09      	ldr	r3, [pc, #36]	; (8004b28 <HAL_MspInit+0x44>)
 8004b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b06:	4a08      	ldr	r2, [pc, #32]	; (8004b28 <HAL_MspInit+0x44>)
 8004b08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b0c:	6593      	str	r3, [r2, #88]	; 0x58
 8004b0e:	4b06      	ldr	r3, [pc, #24]	; (8004b28 <HAL_MspInit+0x44>)
 8004b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b16:	603b      	str	r3, [r7, #0]
 8004b18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004b1a:	bf00      	nop
 8004b1c:	370c      	adds	r7, #12
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr
 8004b26:	bf00      	nop
 8004b28:	40021000 	.word	0x40021000

08004b2c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b08a      	sub	sp, #40	; 0x28
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b34:	f107 0314 	add.w	r3, r7, #20
 8004b38:	2200      	movs	r2, #0
 8004b3a:	601a      	str	r2, [r3, #0]
 8004b3c:	605a      	str	r2, [r3, #4]
 8004b3e:	609a      	str	r2, [r3, #8]
 8004b40:	60da      	str	r2, [r3, #12]
 8004b42:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a17      	ldr	r2, [pc, #92]	; (8004ba8 <HAL_I2C_MspInit+0x7c>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d128      	bne.n	8004ba0 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b4e:	4b17      	ldr	r3, [pc, #92]	; (8004bac <HAL_I2C_MspInit+0x80>)
 8004b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b52:	4a16      	ldr	r2, [pc, #88]	; (8004bac <HAL_I2C_MspInit+0x80>)
 8004b54:	f043 0302 	orr.w	r3, r3, #2
 8004b58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004b5a:	4b14      	ldr	r3, [pc, #80]	; (8004bac <HAL_I2C_MspInit+0x80>)
 8004b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b5e:	f003 0302 	and.w	r3, r3, #2
 8004b62:	613b      	str	r3, [r7, #16]
 8004b64:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004b66:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004b6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004b6c:	2312      	movs	r3, #18
 8004b6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004b70:	2301      	movs	r3, #1
 8004b72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b74:	2303      	movs	r3, #3
 8004b76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004b78:	2304      	movs	r3, #4
 8004b7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b7c:	f107 0314 	add.w	r3, r7, #20
 8004b80:	4619      	mov	r1, r3
 8004b82:	480b      	ldr	r0, [pc, #44]	; (8004bb0 <HAL_I2C_MspInit+0x84>)
 8004b84:	f7fb fea4 	bl	80008d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004b88:	4b08      	ldr	r3, [pc, #32]	; (8004bac <HAL_I2C_MspInit+0x80>)
 8004b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b8c:	4a07      	ldr	r2, [pc, #28]	; (8004bac <HAL_I2C_MspInit+0x80>)
 8004b8e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004b92:	6593      	str	r3, [r2, #88]	; 0x58
 8004b94:	4b05      	ldr	r3, [pc, #20]	; (8004bac <HAL_I2C_MspInit+0x80>)
 8004b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b9c:	60fb      	str	r3, [r7, #12]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8004ba0:	bf00      	nop
 8004ba2:	3728      	adds	r7, #40	; 0x28
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	40005800 	.word	0x40005800
 8004bac:	40021000 	.word	0x40021000
 8004bb0:	48000400 	.word	0x48000400

08004bb4 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b082      	sub	sp, #8
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a0b      	ldr	r2, [pc, #44]	; (8004bf0 <HAL_I2C_MspDeInit+0x3c>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d10f      	bne.n	8004be6 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8004bc6:	4b0b      	ldr	r3, [pc, #44]	; (8004bf4 <HAL_I2C_MspDeInit+0x40>)
 8004bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bca:	4a0a      	ldr	r2, [pc, #40]	; (8004bf4 <HAL_I2C_MspDeInit+0x40>)
 8004bcc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8004bd0:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8004bd2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004bd6:	4808      	ldr	r0, [pc, #32]	; (8004bf8 <HAL_I2C_MspDeInit+0x44>)
 8004bd8:	f7fc f822 	bl	8000c20 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8004bdc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004be0:	4805      	ldr	r0, [pc, #20]	; (8004bf8 <HAL_I2C_MspDeInit+0x44>)
 8004be2:	f7fc f81d 	bl	8000c20 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8004be6:	bf00      	nop
 8004be8:	3708      	adds	r7, #8
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	40005800 	.word	0x40005800
 8004bf4:	40021000 	.word	0x40021000
 8004bf8:	48000400 	.word	0x48000400

08004bfc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b08a      	sub	sp, #40	; 0x28
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c04:	f107 0314 	add.w	r3, r7, #20
 8004c08:	2200      	movs	r2, #0
 8004c0a:	601a      	str	r2, [r3, #0]
 8004c0c:	605a      	str	r2, [r3, #4]
 8004c0e:	609a      	str	r2, [r3, #8]
 8004c10:	60da      	str	r2, [r3, #12]
 8004c12:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a17      	ldr	r2, [pc, #92]	; (8004c78 <HAL_UART_MspInit+0x7c>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d127      	bne.n	8004c6e <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004c1e:	4b17      	ldr	r3, [pc, #92]	; (8004c7c <HAL_UART_MspInit+0x80>)
 8004c20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c22:	4a16      	ldr	r2, [pc, #88]	; (8004c7c <HAL_UART_MspInit+0x80>)
 8004c24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c28:	6613      	str	r3, [r2, #96]	; 0x60
 8004c2a:	4b14      	ldr	r3, [pc, #80]	; (8004c7c <HAL_UART_MspInit+0x80>)
 8004c2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c32:	613b      	str	r3, [r7, #16]
 8004c34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c36:	4b11      	ldr	r3, [pc, #68]	; (8004c7c <HAL_UART_MspInit+0x80>)
 8004c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c3a:	4a10      	ldr	r2, [pc, #64]	; (8004c7c <HAL_UART_MspInit+0x80>)
 8004c3c:	f043 0302 	orr.w	r3, r3, #2
 8004c40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c42:	4b0e      	ldr	r3, [pc, #56]	; (8004c7c <HAL_UART_MspInit+0x80>)
 8004c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c46:	f003 0302 	and.w	r3, r3, #2
 8004c4a:	60fb      	str	r3, [r7, #12]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004c4e:	23c0      	movs	r3, #192	; 0xc0
 8004c50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c52:	2302      	movs	r3, #2
 8004c54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c56:	2300      	movs	r3, #0
 8004c58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004c5e:	2307      	movs	r3, #7
 8004c60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c62:	f107 0314 	add.w	r3, r7, #20
 8004c66:	4619      	mov	r1, r3
 8004c68:	4805      	ldr	r0, [pc, #20]	; (8004c80 <HAL_UART_MspInit+0x84>)
 8004c6a:	f7fb fe31 	bl	80008d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004c6e:	bf00      	nop
 8004c70:	3728      	adds	r7, #40	; 0x28
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	40013800 	.word	0x40013800
 8004c7c:	40021000 	.word	0x40021000
 8004c80:	48000400 	.word	0x48000400

08004c84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004c84:	b480      	push	{r7}
 8004c86:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004c88:	bf00      	nop
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr

08004c92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004c92:	b480      	push	{r7}
 8004c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004c96:	e7fe      	b.n	8004c96 <HardFault_Handler+0x4>

08004c98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004c9c:	e7fe      	b.n	8004c9c <MemManage_Handler+0x4>

08004c9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004c9e:	b480      	push	{r7}
 8004ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004ca2:	e7fe      	b.n	8004ca2 <BusFault_Handler+0x4>

08004ca4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004ca8:	e7fe      	b.n	8004ca8 <UsageFault_Handler+0x4>

08004caa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004caa:	b480      	push	{r7}
 8004cac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004cae:	bf00      	nop
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr

08004cb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004cbc:	bf00      	nop
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr

08004cc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004cc6:	b480      	push	{r7}
 8004cc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004cca:	bf00      	nop
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr

08004cd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004cd8:	f7fb fca6 	bl	8000628 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004cdc:	bf00      	nop
 8004cde:	bd80      	pop	{r7, pc}

08004ce0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004ce4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004ce8:	f7fc f8c0 	bl	8000e6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004cec:	bf00      	nop
 8004cee:	bd80      	pop	{r7, pc}

08004cf0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b086      	sub	sp, #24
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004cf8:	4a14      	ldr	r2, [pc, #80]	; (8004d4c <_sbrk+0x5c>)
 8004cfa:	4b15      	ldr	r3, [pc, #84]	; (8004d50 <_sbrk+0x60>)
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004d04:	4b13      	ldr	r3, [pc, #76]	; (8004d54 <_sbrk+0x64>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d102      	bne.n	8004d12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004d0c:	4b11      	ldr	r3, [pc, #68]	; (8004d54 <_sbrk+0x64>)
 8004d0e:	4a12      	ldr	r2, [pc, #72]	; (8004d58 <_sbrk+0x68>)
 8004d10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004d12:	4b10      	ldr	r3, [pc, #64]	; (8004d54 <_sbrk+0x64>)
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4413      	add	r3, r2
 8004d1a:	693a      	ldr	r2, [r7, #16]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d207      	bcs.n	8004d30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004d20:	f000 f87c 	bl	8004e1c <__errno>
 8004d24:	4602      	mov	r2, r0
 8004d26:	230c      	movs	r3, #12
 8004d28:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8004d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8004d2e:	e009      	b.n	8004d44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004d30:	4b08      	ldr	r3, [pc, #32]	; (8004d54 <_sbrk+0x64>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004d36:	4b07      	ldr	r3, [pc, #28]	; (8004d54 <_sbrk+0x64>)
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4413      	add	r3, r2
 8004d3e:	4a05      	ldr	r2, [pc, #20]	; (8004d54 <_sbrk+0x64>)
 8004d40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004d42:	68fb      	ldr	r3, [r7, #12]
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3718      	adds	r7, #24
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	20018000 	.word	0x20018000
 8004d50:	00000400 	.word	0x00000400
 8004d54:	20000148 	.word	0x20000148
 8004d58:	200002f8 	.word	0x200002f8

08004d5c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004d60:	4b17      	ldr	r3, [pc, #92]	; (8004dc0 <SystemInit+0x64>)
 8004d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d66:	4a16      	ldr	r2, [pc, #88]	; (8004dc0 <SystemInit+0x64>)
 8004d68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004d6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8004d70:	4b14      	ldr	r3, [pc, #80]	; (8004dc4 <SystemInit+0x68>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a13      	ldr	r2, [pc, #76]	; (8004dc4 <SystemInit+0x68>)
 8004d76:	f043 0301 	orr.w	r3, r3, #1
 8004d7a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8004d7c:	4b11      	ldr	r3, [pc, #68]	; (8004dc4 <SystemInit+0x68>)
 8004d7e:	2200      	movs	r2, #0
 8004d80:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8004d82:	4b10      	ldr	r3, [pc, #64]	; (8004dc4 <SystemInit+0x68>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a0f      	ldr	r2, [pc, #60]	; (8004dc4 <SystemInit+0x68>)
 8004d88:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8004d8c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8004d90:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8004d92:	4b0c      	ldr	r3, [pc, #48]	; (8004dc4 <SystemInit+0x68>)
 8004d94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004d98:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004d9a:	4b0a      	ldr	r3, [pc, #40]	; (8004dc4 <SystemInit+0x68>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a09      	ldr	r2, [pc, #36]	; (8004dc4 <SystemInit+0x68>)
 8004da0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004da4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8004da6:	4b07      	ldr	r3, [pc, #28]	; (8004dc4 <SystemInit+0x68>)
 8004da8:	2200      	movs	r2, #0
 8004daa:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004dac:	4b04      	ldr	r3, [pc, #16]	; (8004dc0 <SystemInit+0x64>)
 8004dae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004db2:	609a      	str	r2, [r3, #8]
#endif
}
 8004db4:	bf00      	nop
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr
 8004dbe:	bf00      	nop
 8004dc0:	e000ed00 	.word	0xe000ed00
 8004dc4:	40021000 	.word	0x40021000

08004dc8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004dc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004e00 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004dcc:	f7ff ffc6 	bl	8004d5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004dd0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004dd2:	e003      	b.n	8004ddc <LoopCopyDataInit>

08004dd4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004dd4:	4b0b      	ldr	r3, [pc, #44]	; (8004e04 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004dd6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004dd8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004dda:	3104      	adds	r1, #4

08004ddc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004ddc:	480a      	ldr	r0, [pc, #40]	; (8004e08 <LoopForever+0xa>)
	ldr	r3, =_edata
 8004dde:	4b0b      	ldr	r3, [pc, #44]	; (8004e0c <LoopForever+0xe>)
	adds	r2, r0, r1
 8004de0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004de2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004de4:	d3f6      	bcc.n	8004dd4 <CopyDataInit>
	ldr	r2, =_sbss
 8004de6:	4a0a      	ldr	r2, [pc, #40]	; (8004e10 <LoopForever+0x12>)
	b	LoopFillZerobss
 8004de8:	e002      	b.n	8004df0 <LoopFillZerobss>

08004dea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004dea:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004dec:	f842 3b04 	str.w	r3, [r2], #4

08004df0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004df0:	4b08      	ldr	r3, [pc, #32]	; (8004e14 <LoopForever+0x16>)
	cmp	r2, r3
 8004df2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004df4:	d3f9      	bcc.n	8004dea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004df6:	f000 f817 	bl	8004e28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004dfa:	f7ff f9c3 	bl	8004184 <main>

08004dfe <LoopForever>:

LoopForever:
    b LoopForever
 8004dfe:	e7fe      	b.n	8004dfe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004e00:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8004e04:	080057ac 	.word	0x080057ac
	ldr	r0, =_sdata
 8004e08:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004e0c:	20000118 	.word	0x20000118
	ldr	r2, =_sbss
 8004e10:	20000118 	.word	0x20000118
	ldr	r3, = _ebss
 8004e14:	200002f4 	.word	0x200002f4

08004e18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004e18:	e7fe      	b.n	8004e18 <ADC1_2_IRQHandler>
	...

08004e1c <__errno>:
 8004e1c:	4b01      	ldr	r3, [pc, #4]	; (8004e24 <__errno+0x8>)
 8004e1e:	6818      	ldr	r0, [r3, #0]
 8004e20:	4770      	bx	lr
 8004e22:	bf00      	nop
 8004e24:	200000b4 	.word	0x200000b4

08004e28 <__libc_init_array>:
 8004e28:	b570      	push	{r4, r5, r6, lr}
 8004e2a:	4e0d      	ldr	r6, [pc, #52]	; (8004e60 <__libc_init_array+0x38>)
 8004e2c:	4c0d      	ldr	r4, [pc, #52]	; (8004e64 <__libc_init_array+0x3c>)
 8004e2e:	1ba4      	subs	r4, r4, r6
 8004e30:	10a4      	asrs	r4, r4, #2
 8004e32:	2500      	movs	r5, #0
 8004e34:	42a5      	cmp	r5, r4
 8004e36:	d109      	bne.n	8004e4c <__libc_init_array+0x24>
 8004e38:	4e0b      	ldr	r6, [pc, #44]	; (8004e68 <__libc_init_array+0x40>)
 8004e3a:	4c0c      	ldr	r4, [pc, #48]	; (8004e6c <__libc_init_array+0x44>)
 8004e3c:	f000 fc26 	bl	800568c <_init>
 8004e40:	1ba4      	subs	r4, r4, r6
 8004e42:	10a4      	asrs	r4, r4, #2
 8004e44:	2500      	movs	r5, #0
 8004e46:	42a5      	cmp	r5, r4
 8004e48:	d105      	bne.n	8004e56 <__libc_init_array+0x2e>
 8004e4a:	bd70      	pop	{r4, r5, r6, pc}
 8004e4c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004e50:	4798      	blx	r3
 8004e52:	3501      	adds	r5, #1
 8004e54:	e7ee      	b.n	8004e34 <__libc_init_array+0xc>
 8004e56:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004e5a:	4798      	blx	r3
 8004e5c:	3501      	adds	r5, #1
 8004e5e:	e7f2      	b.n	8004e46 <__libc_init_array+0x1e>
 8004e60:	080057a4 	.word	0x080057a4
 8004e64:	080057a4 	.word	0x080057a4
 8004e68:	080057a4 	.word	0x080057a4
 8004e6c:	080057a8 	.word	0x080057a8

08004e70 <memset>:
 8004e70:	4402      	add	r2, r0
 8004e72:	4603      	mov	r3, r0
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d100      	bne.n	8004e7a <memset+0xa>
 8004e78:	4770      	bx	lr
 8004e7a:	f803 1b01 	strb.w	r1, [r3], #1
 8004e7e:	e7f9      	b.n	8004e74 <memset+0x4>

08004e80 <siprintf>:
 8004e80:	b40e      	push	{r1, r2, r3}
 8004e82:	b500      	push	{lr}
 8004e84:	b09c      	sub	sp, #112	; 0x70
 8004e86:	ab1d      	add	r3, sp, #116	; 0x74
 8004e88:	9002      	str	r0, [sp, #8]
 8004e8a:	9006      	str	r0, [sp, #24]
 8004e8c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004e90:	4809      	ldr	r0, [pc, #36]	; (8004eb8 <siprintf+0x38>)
 8004e92:	9107      	str	r1, [sp, #28]
 8004e94:	9104      	str	r1, [sp, #16]
 8004e96:	4909      	ldr	r1, [pc, #36]	; (8004ebc <siprintf+0x3c>)
 8004e98:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e9c:	9105      	str	r1, [sp, #20]
 8004e9e:	6800      	ldr	r0, [r0, #0]
 8004ea0:	9301      	str	r3, [sp, #4]
 8004ea2:	a902      	add	r1, sp, #8
 8004ea4:	f000 f866 	bl	8004f74 <_svfiprintf_r>
 8004ea8:	9b02      	ldr	r3, [sp, #8]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	701a      	strb	r2, [r3, #0]
 8004eae:	b01c      	add	sp, #112	; 0x70
 8004eb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004eb4:	b003      	add	sp, #12
 8004eb6:	4770      	bx	lr
 8004eb8:	200000b4 	.word	0x200000b4
 8004ebc:	ffff0208 	.word	0xffff0208

08004ec0 <__ssputs_r>:
 8004ec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ec4:	688e      	ldr	r6, [r1, #8]
 8004ec6:	429e      	cmp	r6, r3
 8004ec8:	4682      	mov	sl, r0
 8004eca:	460c      	mov	r4, r1
 8004ecc:	4690      	mov	r8, r2
 8004ece:	4699      	mov	r9, r3
 8004ed0:	d837      	bhi.n	8004f42 <__ssputs_r+0x82>
 8004ed2:	898a      	ldrh	r2, [r1, #12]
 8004ed4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004ed8:	d031      	beq.n	8004f3e <__ssputs_r+0x7e>
 8004eda:	6825      	ldr	r5, [r4, #0]
 8004edc:	6909      	ldr	r1, [r1, #16]
 8004ede:	1a6f      	subs	r7, r5, r1
 8004ee0:	6965      	ldr	r5, [r4, #20]
 8004ee2:	2302      	movs	r3, #2
 8004ee4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004ee8:	fb95 f5f3 	sdiv	r5, r5, r3
 8004eec:	f109 0301 	add.w	r3, r9, #1
 8004ef0:	443b      	add	r3, r7
 8004ef2:	429d      	cmp	r5, r3
 8004ef4:	bf38      	it	cc
 8004ef6:	461d      	movcc	r5, r3
 8004ef8:	0553      	lsls	r3, r2, #21
 8004efa:	d530      	bpl.n	8004f5e <__ssputs_r+0x9e>
 8004efc:	4629      	mov	r1, r5
 8004efe:	f000 fb2b 	bl	8005558 <_malloc_r>
 8004f02:	4606      	mov	r6, r0
 8004f04:	b950      	cbnz	r0, 8004f1c <__ssputs_r+0x5c>
 8004f06:	230c      	movs	r3, #12
 8004f08:	f8ca 3000 	str.w	r3, [sl]
 8004f0c:	89a3      	ldrh	r3, [r4, #12]
 8004f0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f12:	81a3      	strh	r3, [r4, #12]
 8004f14:	f04f 30ff 	mov.w	r0, #4294967295
 8004f18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f1c:	463a      	mov	r2, r7
 8004f1e:	6921      	ldr	r1, [r4, #16]
 8004f20:	f000 faa8 	bl	8005474 <memcpy>
 8004f24:	89a3      	ldrh	r3, [r4, #12]
 8004f26:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004f2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f2e:	81a3      	strh	r3, [r4, #12]
 8004f30:	6126      	str	r6, [r4, #16]
 8004f32:	6165      	str	r5, [r4, #20]
 8004f34:	443e      	add	r6, r7
 8004f36:	1bed      	subs	r5, r5, r7
 8004f38:	6026      	str	r6, [r4, #0]
 8004f3a:	60a5      	str	r5, [r4, #8]
 8004f3c:	464e      	mov	r6, r9
 8004f3e:	454e      	cmp	r6, r9
 8004f40:	d900      	bls.n	8004f44 <__ssputs_r+0x84>
 8004f42:	464e      	mov	r6, r9
 8004f44:	4632      	mov	r2, r6
 8004f46:	4641      	mov	r1, r8
 8004f48:	6820      	ldr	r0, [r4, #0]
 8004f4a:	f000 fa9e 	bl	800548a <memmove>
 8004f4e:	68a3      	ldr	r3, [r4, #8]
 8004f50:	1b9b      	subs	r3, r3, r6
 8004f52:	60a3      	str	r3, [r4, #8]
 8004f54:	6823      	ldr	r3, [r4, #0]
 8004f56:	441e      	add	r6, r3
 8004f58:	6026      	str	r6, [r4, #0]
 8004f5a:	2000      	movs	r0, #0
 8004f5c:	e7dc      	b.n	8004f18 <__ssputs_r+0x58>
 8004f5e:	462a      	mov	r2, r5
 8004f60:	f000 fb54 	bl	800560c <_realloc_r>
 8004f64:	4606      	mov	r6, r0
 8004f66:	2800      	cmp	r0, #0
 8004f68:	d1e2      	bne.n	8004f30 <__ssputs_r+0x70>
 8004f6a:	6921      	ldr	r1, [r4, #16]
 8004f6c:	4650      	mov	r0, sl
 8004f6e:	f000 faa5 	bl	80054bc <_free_r>
 8004f72:	e7c8      	b.n	8004f06 <__ssputs_r+0x46>

08004f74 <_svfiprintf_r>:
 8004f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f78:	461d      	mov	r5, r3
 8004f7a:	898b      	ldrh	r3, [r1, #12]
 8004f7c:	061f      	lsls	r7, r3, #24
 8004f7e:	b09d      	sub	sp, #116	; 0x74
 8004f80:	4680      	mov	r8, r0
 8004f82:	460c      	mov	r4, r1
 8004f84:	4616      	mov	r6, r2
 8004f86:	d50f      	bpl.n	8004fa8 <_svfiprintf_r+0x34>
 8004f88:	690b      	ldr	r3, [r1, #16]
 8004f8a:	b96b      	cbnz	r3, 8004fa8 <_svfiprintf_r+0x34>
 8004f8c:	2140      	movs	r1, #64	; 0x40
 8004f8e:	f000 fae3 	bl	8005558 <_malloc_r>
 8004f92:	6020      	str	r0, [r4, #0]
 8004f94:	6120      	str	r0, [r4, #16]
 8004f96:	b928      	cbnz	r0, 8004fa4 <_svfiprintf_r+0x30>
 8004f98:	230c      	movs	r3, #12
 8004f9a:	f8c8 3000 	str.w	r3, [r8]
 8004f9e:	f04f 30ff 	mov.w	r0, #4294967295
 8004fa2:	e0c8      	b.n	8005136 <_svfiprintf_r+0x1c2>
 8004fa4:	2340      	movs	r3, #64	; 0x40
 8004fa6:	6163      	str	r3, [r4, #20]
 8004fa8:	2300      	movs	r3, #0
 8004faa:	9309      	str	r3, [sp, #36]	; 0x24
 8004fac:	2320      	movs	r3, #32
 8004fae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004fb2:	2330      	movs	r3, #48	; 0x30
 8004fb4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004fb8:	9503      	str	r5, [sp, #12]
 8004fba:	f04f 0b01 	mov.w	fp, #1
 8004fbe:	4637      	mov	r7, r6
 8004fc0:	463d      	mov	r5, r7
 8004fc2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004fc6:	b10b      	cbz	r3, 8004fcc <_svfiprintf_r+0x58>
 8004fc8:	2b25      	cmp	r3, #37	; 0x25
 8004fca:	d13e      	bne.n	800504a <_svfiprintf_r+0xd6>
 8004fcc:	ebb7 0a06 	subs.w	sl, r7, r6
 8004fd0:	d00b      	beq.n	8004fea <_svfiprintf_r+0x76>
 8004fd2:	4653      	mov	r3, sl
 8004fd4:	4632      	mov	r2, r6
 8004fd6:	4621      	mov	r1, r4
 8004fd8:	4640      	mov	r0, r8
 8004fda:	f7ff ff71 	bl	8004ec0 <__ssputs_r>
 8004fde:	3001      	adds	r0, #1
 8004fe0:	f000 80a4 	beq.w	800512c <_svfiprintf_r+0x1b8>
 8004fe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fe6:	4453      	add	r3, sl
 8004fe8:	9309      	str	r3, [sp, #36]	; 0x24
 8004fea:	783b      	ldrb	r3, [r7, #0]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	f000 809d 	beq.w	800512c <_svfiprintf_r+0x1b8>
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8004ff8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ffc:	9304      	str	r3, [sp, #16]
 8004ffe:	9307      	str	r3, [sp, #28]
 8005000:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005004:	931a      	str	r3, [sp, #104]	; 0x68
 8005006:	462f      	mov	r7, r5
 8005008:	2205      	movs	r2, #5
 800500a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800500e:	4850      	ldr	r0, [pc, #320]	; (8005150 <_svfiprintf_r+0x1dc>)
 8005010:	f7fb f8e6 	bl	80001e0 <memchr>
 8005014:	9b04      	ldr	r3, [sp, #16]
 8005016:	b9d0      	cbnz	r0, 800504e <_svfiprintf_r+0xda>
 8005018:	06d9      	lsls	r1, r3, #27
 800501a:	bf44      	itt	mi
 800501c:	2220      	movmi	r2, #32
 800501e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005022:	071a      	lsls	r2, r3, #28
 8005024:	bf44      	itt	mi
 8005026:	222b      	movmi	r2, #43	; 0x2b
 8005028:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800502c:	782a      	ldrb	r2, [r5, #0]
 800502e:	2a2a      	cmp	r2, #42	; 0x2a
 8005030:	d015      	beq.n	800505e <_svfiprintf_r+0xea>
 8005032:	9a07      	ldr	r2, [sp, #28]
 8005034:	462f      	mov	r7, r5
 8005036:	2000      	movs	r0, #0
 8005038:	250a      	movs	r5, #10
 800503a:	4639      	mov	r1, r7
 800503c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005040:	3b30      	subs	r3, #48	; 0x30
 8005042:	2b09      	cmp	r3, #9
 8005044:	d94d      	bls.n	80050e2 <_svfiprintf_r+0x16e>
 8005046:	b1b8      	cbz	r0, 8005078 <_svfiprintf_r+0x104>
 8005048:	e00f      	b.n	800506a <_svfiprintf_r+0xf6>
 800504a:	462f      	mov	r7, r5
 800504c:	e7b8      	b.n	8004fc0 <_svfiprintf_r+0x4c>
 800504e:	4a40      	ldr	r2, [pc, #256]	; (8005150 <_svfiprintf_r+0x1dc>)
 8005050:	1a80      	subs	r0, r0, r2
 8005052:	fa0b f000 	lsl.w	r0, fp, r0
 8005056:	4318      	orrs	r0, r3
 8005058:	9004      	str	r0, [sp, #16]
 800505a:	463d      	mov	r5, r7
 800505c:	e7d3      	b.n	8005006 <_svfiprintf_r+0x92>
 800505e:	9a03      	ldr	r2, [sp, #12]
 8005060:	1d11      	adds	r1, r2, #4
 8005062:	6812      	ldr	r2, [r2, #0]
 8005064:	9103      	str	r1, [sp, #12]
 8005066:	2a00      	cmp	r2, #0
 8005068:	db01      	blt.n	800506e <_svfiprintf_r+0xfa>
 800506a:	9207      	str	r2, [sp, #28]
 800506c:	e004      	b.n	8005078 <_svfiprintf_r+0x104>
 800506e:	4252      	negs	r2, r2
 8005070:	f043 0302 	orr.w	r3, r3, #2
 8005074:	9207      	str	r2, [sp, #28]
 8005076:	9304      	str	r3, [sp, #16]
 8005078:	783b      	ldrb	r3, [r7, #0]
 800507a:	2b2e      	cmp	r3, #46	; 0x2e
 800507c:	d10c      	bne.n	8005098 <_svfiprintf_r+0x124>
 800507e:	787b      	ldrb	r3, [r7, #1]
 8005080:	2b2a      	cmp	r3, #42	; 0x2a
 8005082:	d133      	bne.n	80050ec <_svfiprintf_r+0x178>
 8005084:	9b03      	ldr	r3, [sp, #12]
 8005086:	1d1a      	adds	r2, r3, #4
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	9203      	str	r2, [sp, #12]
 800508c:	2b00      	cmp	r3, #0
 800508e:	bfb8      	it	lt
 8005090:	f04f 33ff 	movlt.w	r3, #4294967295
 8005094:	3702      	adds	r7, #2
 8005096:	9305      	str	r3, [sp, #20]
 8005098:	4d2e      	ldr	r5, [pc, #184]	; (8005154 <_svfiprintf_r+0x1e0>)
 800509a:	7839      	ldrb	r1, [r7, #0]
 800509c:	2203      	movs	r2, #3
 800509e:	4628      	mov	r0, r5
 80050a0:	f7fb f89e 	bl	80001e0 <memchr>
 80050a4:	b138      	cbz	r0, 80050b6 <_svfiprintf_r+0x142>
 80050a6:	2340      	movs	r3, #64	; 0x40
 80050a8:	1b40      	subs	r0, r0, r5
 80050aa:	fa03 f000 	lsl.w	r0, r3, r0
 80050ae:	9b04      	ldr	r3, [sp, #16]
 80050b0:	4303      	orrs	r3, r0
 80050b2:	3701      	adds	r7, #1
 80050b4:	9304      	str	r3, [sp, #16]
 80050b6:	7839      	ldrb	r1, [r7, #0]
 80050b8:	4827      	ldr	r0, [pc, #156]	; (8005158 <_svfiprintf_r+0x1e4>)
 80050ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80050be:	2206      	movs	r2, #6
 80050c0:	1c7e      	adds	r6, r7, #1
 80050c2:	f7fb f88d 	bl	80001e0 <memchr>
 80050c6:	2800      	cmp	r0, #0
 80050c8:	d038      	beq.n	800513c <_svfiprintf_r+0x1c8>
 80050ca:	4b24      	ldr	r3, [pc, #144]	; (800515c <_svfiprintf_r+0x1e8>)
 80050cc:	bb13      	cbnz	r3, 8005114 <_svfiprintf_r+0x1a0>
 80050ce:	9b03      	ldr	r3, [sp, #12]
 80050d0:	3307      	adds	r3, #7
 80050d2:	f023 0307 	bic.w	r3, r3, #7
 80050d6:	3308      	adds	r3, #8
 80050d8:	9303      	str	r3, [sp, #12]
 80050da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050dc:	444b      	add	r3, r9
 80050de:	9309      	str	r3, [sp, #36]	; 0x24
 80050e0:	e76d      	b.n	8004fbe <_svfiprintf_r+0x4a>
 80050e2:	fb05 3202 	mla	r2, r5, r2, r3
 80050e6:	2001      	movs	r0, #1
 80050e8:	460f      	mov	r7, r1
 80050ea:	e7a6      	b.n	800503a <_svfiprintf_r+0xc6>
 80050ec:	2300      	movs	r3, #0
 80050ee:	3701      	adds	r7, #1
 80050f0:	9305      	str	r3, [sp, #20]
 80050f2:	4619      	mov	r1, r3
 80050f4:	250a      	movs	r5, #10
 80050f6:	4638      	mov	r0, r7
 80050f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80050fc:	3a30      	subs	r2, #48	; 0x30
 80050fe:	2a09      	cmp	r2, #9
 8005100:	d903      	bls.n	800510a <_svfiprintf_r+0x196>
 8005102:	2b00      	cmp	r3, #0
 8005104:	d0c8      	beq.n	8005098 <_svfiprintf_r+0x124>
 8005106:	9105      	str	r1, [sp, #20]
 8005108:	e7c6      	b.n	8005098 <_svfiprintf_r+0x124>
 800510a:	fb05 2101 	mla	r1, r5, r1, r2
 800510e:	2301      	movs	r3, #1
 8005110:	4607      	mov	r7, r0
 8005112:	e7f0      	b.n	80050f6 <_svfiprintf_r+0x182>
 8005114:	ab03      	add	r3, sp, #12
 8005116:	9300      	str	r3, [sp, #0]
 8005118:	4622      	mov	r2, r4
 800511a:	4b11      	ldr	r3, [pc, #68]	; (8005160 <_svfiprintf_r+0x1ec>)
 800511c:	a904      	add	r1, sp, #16
 800511e:	4640      	mov	r0, r8
 8005120:	f3af 8000 	nop.w
 8005124:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005128:	4681      	mov	r9, r0
 800512a:	d1d6      	bne.n	80050da <_svfiprintf_r+0x166>
 800512c:	89a3      	ldrh	r3, [r4, #12]
 800512e:	065b      	lsls	r3, r3, #25
 8005130:	f53f af35 	bmi.w	8004f9e <_svfiprintf_r+0x2a>
 8005134:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005136:	b01d      	add	sp, #116	; 0x74
 8005138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800513c:	ab03      	add	r3, sp, #12
 800513e:	9300      	str	r3, [sp, #0]
 8005140:	4622      	mov	r2, r4
 8005142:	4b07      	ldr	r3, [pc, #28]	; (8005160 <_svfiprintf_r+0x1ec>)
 8005144:	a904      	add	r1, sp, #16
 8005146:	4640      	mov	r0, r8
 8005148:	f000 f882 	bl	8005250 <_printf_i>
 800514c:	e7ea      	b.n	8005124 <_svfiprintf_r+0x1b0>
 800514e:	bf00      	nop
 8005150:	08005768 	.word	0x08005768
 8005154:	0800576e 	.word	0x0800576e
 8005158:	08005772 	.word	0x08005772
 800515c:	00000000 	.word	0x00000000
 8005160:	08004ec1 	.word	0x08004ec1

08005164 <_printf_common>:
 8005164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005168:	4691      	mov	r9, r2
 800516a:	461f      	mov	r7, r3
 800516c:	688a      	ldr	r2, [r1, #8]
 800516e:	690b      	ldr	r3, [r1, #16]
 8005170:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005174:	4293      	cmp	r3, r2
 8005176:	bfb8      	it	lt
 8005178:	4613      	movlt	r3, r2
 800517a:	f8c9 3000 	str.w	r3, [r9]
 800517e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005182:	4606      	mov	r6, r0
 8005184:	460c      	mov	r4, r1
 8005186:	b112      	cbz	r2, 800518e <_printf_common+0x2a>
 8005188:	3301      	adds	r3, #1
 800518a:	f8c9 3000 	str.w	r3, [r9]
 800518e:	6823      	ldr	r3, [r4, #0]
 8005190:	0699      	lsls	r1, r3, #26
 8005192:	bf42      	ittt	mi
 8005194:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005198:	3302      	addmi	r3, #2
 800519a:	f8c9 3000 	strmi.w	r3, [r9]
 800519e:	6825      	ldr	r5, [r4, #0]
 80051a0:	f015 0506 	ands.w	r5, r5, #6
 80051a4:	d107      	bne.n	80051b6 <_printf_common+0x52>
 80051a6:	f104 0a19 	add.w	sl, r4, #25
 80051aa:	68e3      	ldr	r3, [r4, #12]
 80051ac:	f8d9 2000 	ldr.w	r2, [r9]
 80051b0:	1a9b      	subs	r3, r3, r2
 80051b2:	42ab      	cmp	r3, r5
 80051b4:	dc28      	bgt.n	8005208 <_printf_common+0xa4>
 80051b6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80051ba:	6822      	ldr	r2, [r4, #0]
 80051bc:	3300      	adds	r3, #0
 80051be:	bf18      	it	ne
 80051c0:	2301      	movne	r3, #1
 80051c2:	0692      	lsls	r2, r2, #26
 80051c4:	d42d      	bmi.n	8005222 <_printf_common+0xbe>
 80051c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80051ca:	4639      	mov	r1, r7
 80051cc:	4630      	mov	r0, r6
 80051ce:	47c0      	blx	r8
 80051d0:	3001      	adds	r0, #1
 80051d2:	d020      	beq.n	8005216 <_printf_common+0xb2>
 80051d4:	6823      	ldr	r3, [r4, #0]
 80051d6:	68e5      	ldr	r5, [r4, #12]
 80051d8:	f8d9 2000 	ldr.w	r2, [r9]
 80051dc:	f003 0306 	and.w	r3, r3, #6
 80051e0:	2b04      	cmp	r3, #4
 80051e2:	bf08      	it	eq
 80051e4:	1aad      	subeq	r5, r5, r2
 80051e6:	68a3      	ldr	r3, [r4, #8]
 80051e8:	6922      	ldr	r2, [r4, #16]
 80051ea:	bf0c      	ite	eq
 80051ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80051f0:	2500      	movne	r5, #0
 80051f2:	4293      	cmp	r3, r2
 80051f4:	bfc4      	itt	gt
 80051f6:	1a9b      	subgt	r3, r3, r2
 80051f8:	18ed      	addgt	r5, r5, r3
 80051fa:	f04f 0900 	mov.w	r9, #0
 80051fe:	341a      	adds	r4, #26
 8005200:	454d      	cmp	r5, r9
 8005202:	d11a      	bne.n	800523a <_printf_common+0xd6>
 8005204:	2000      	movs	r0, #0
 8005206:	e008      	b.n	800521a <_printf_common+0xb6>
 8005208:	2301      	movs	r3, #1
 800520a:	4652      	mov	r2, sl
 800520c:	4639      	mov	r1, r7
 800520e:	4630      	mov	r0, r6
 8005210:	47c0      	blx	r8
 8005212:	3001      	adds	r0, #1
 8005214:	d103      	bne.n	800521e <_printf_common+0xba>
 8005216:	f04f 30ff 	mov.w	r0, #4294967295
 800521a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800521e:	3501      	adds	r5, #1
 8005220:	e7c3      	b.n	80051aa <_printf_common+0x46>
 8005222:	18e1      	adds	r1, r4, r3
 8005224:	1c5a      	adds	r2, r3, #1
 8005226:	2030      	movs	r0, #48	; 0x30
 8005228:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800522c:	4422      	add	r2, r4
 800522e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005232:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005236:	3302      	adds	r3, #2
 8005238:	e7c5      	b.n	80051c6 <_printf_common+0x62>
 800523a:	2301      	movs	r3, #1
 800523c:	4622      	mov	r2, r4
 800523e:	4639      	mov	r1, r7
 8005240:	4630      	mov	r0, r6
 8005242:	47c0      	blx	r8
 8005244:	3001      	adds	r0, #1
 8005246:	d0e6      	beq.n	8005216 <_printf_common+0xb2>
 8005248:	f109 0901 	add.w	r9, r9, #1
 800524c:	e7d8      	b.n	8005200 <_printf_common+0x9c>
	...

08005250 <_printf_i>:
 8005250:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005254:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005258:	460c      	mov	r4, r1
 800525a:	7e09      	ldrb	r1, [r1, #24]
 800525c:	b085      	sub	sp, #20
 800525e:	296e      	cmp	r1, #110	; 0x6e
 8005260:	4617      	mov	r7, r2
 8005262:	4606      	mov	r6, r0
 8005264:	4698      	mov	r8, r3
 8005266:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005268:	f000 80b3 	beq.w	80053d2 <_printf_i+0x182>
 800526c:	d822      	bhi.n	80052b4 <_printf_i+0x64>
 800526e:	2963      	cmp	r1, #99	; 0x63
 8005270:	d036      	beq.n	80052e0 <_printf_i+0x90>
 8005272:	d80a      	bhi.n	800528a <_printf_i+0x3a>
 8005274:	2900      	cmp	r1, #0
 8005276:	f000 80b9 	beq.w	80053ec <_printf_i+0x19c>
 800527a:	2958      	cmp	r1, #88	; 0x58
 800527c:	f000 8083 	beq.w	8005386 <_printf_i+0x136>
 8005280:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005284:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005288:	e032      	b.n	80052f0 <_printf_i+0xa0>
 800528a:	2964      	cmp	r1, #100	; 0x64
 800528c:	d001      	beq.n	8005292 <_printf_i+0x42>
 800528e:	2969      	cmp	r1, #105	; 0x69
 8005290:	d1f6      	bne.n	8005280 <_printf_i+0x30>
 8005292:	6820      	ldr	r0, [r4, #0]
 8005294:	6813      	ldr	r3, [r2, #0]
 8005296:	0605      	lsls	r5, r0, #24
 8005298:	f103 0104 	add.w	r1, r3, #4
 800529c:	d52a      	bpl.n	80052f4 <_printf_i+0xa4>
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	6011      	str	r1, [r2, #0]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	da03      	bge.n	80052ae <_printf_i+0x5e>
 80052a6:	222d      	movs	r2, #45	; 0x2d
 80052a8:	425b      	negs	r3, r3
 80052aa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80052ae:	486f      	ldr	r0, [pc, #444]	; (800546c <_printf_i+0x21c>)
 80052b0:	220a      	movs	r2, #10
 80052b2:	e039      	b.n	8005328 <_printf_i+0xd8>
 80052b4:	2973      	cmp	r1, #115	; 0x73
 80052b6:	f000 809d 	beq.w	80053f4 <_printf_i+0x1a4>
 80052ba:	d808      	bhi.n	80052ce <_printf_i+0x7e>
 80052bc:	296f      	cmp	r1, #111	; 0x6f
 80052be:	d020      	beq.n	8005302 <_printf_i+0xb2>
 80052c0:	2970      	cmp	r1, #112	; 0x70
 80052c2:	d1dd      	bne.n	8005280 <_printf_i+0x30>
 80052c4:	6823      	ldr	r3, [r4, #0]
 80052c6:	f043 0320 	orr.w	r3, r3, #32
 80052ca:	6023      	str	r3, [r4, #0]
 80052cc:	e003      	b.n	80052d6 <_printf_i+0x86>
 80052ce:	2975      	cmp	r1, #117	; 0x75
 80052d0:	d017      	beq.n	8005302 <_printf_i+0xb2>
 80052d2:	2978      	cmp	r1, #120	; 0x78
 80052d4:	d1d4      	bne.n	8005280 <_printf_i+0x30>
 80052d6:	2378      	movs	r3, #120	; 0x78
 80052d8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80052dc:	4864      	ldr	r0, [pc, #400]	; (8005470 <_printf_i+0x220>)
 80052de:	e055      	b.n	800538c <_printf_i+0x13c>
 80052e0:	6813      	ldr	r3, [r2, #0]
 80052e2:	1d19      	adds	r1, r3, #4
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	6011      	str	r1, [r2, #0]
 80052e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80052f0:	2301      	movs	r3, #1
 80052f2:	e08c      	b.n	800540e <_printf_i+0x1be>
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	6011      	str	r1, [r2, #0]
 80052f8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80052fc:	bf18      	it	ne
 80052fe:	b21b      	sxthne	r3, r3
 8005300:	e7cf      	b.n	80052a2 <_printf_i+0x52>
 8005302:	6813      	ldr	r3, [r2, #0]
 8005304:	6825      	ldr	r5, [r4, #0]
 8005306:	1d18      	adds	r0, r3, #4
 8005308:	6010      	str	r0, [r2, #0]
 800530a:	0628      	lsls	r0, r5, #24
 800530c:	d501      	bpl.n	8005312 <_printf_i+0xc2>
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	e002      	b.n	8005318 <_printf_i+0xc8>
 8005312:	0668      	lsls	r0, r5, #25
 8005314:	d5fb      	bpl.n	800530e <_printf_i+0xbe>
 8005316:	881b      	ldrh	r3, [r3, #0]
 8005318:	4854      	ldr	r0, [pc, #336]	; (800546c <_printf_i+0x21c>)
 800531a:	296f      	cmp	r1, #111	; 0x6f
 800531c:	bf14      	ite	ne
 800531e:	220a      	movne	r2, #10
 8005320:	2208      	moveq	r2, #8
 8005322:	2100      	movs	r1, #0
 8005324:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005328:	6865      	ldr	r5, [r4, #4]
 800532a:	60a5      	str	r5, [r4, #8]
 800532c:	2d00      	cmp	r5, #0
 800532e:	f2c0 8095 	blt.w	800545c <_printf_i+0x20c>
 8005332:	6821      	ldr	r1, [r4, #0]
 8005334:	f021 0104 	bic.w	r1, r1, #4
 8005338:	6021      	str	r1, [r4, #0]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d13d      	bne.n	80053ba <_printf_i+0x16a>
 800533e:	2d00      	cmp	r5, #0
 8005340:	f040 808e 	bne.w	8005460 <_printf_i+0x210>
 8005344:	4665      	mov	r5, ip
 8005346:	2a08      	cmp	r2, #8
 8005348:	d10b      	bne.n	8005362 <_printf_i+0x112>
 800534a:	6823      	ldr	r3, [r4, #0]
 800534c:	07db      	lsls	r3, r3, #31
 800534e:	d508      	bpl.n	8005362 <_printf_i+0x112>
 8005350:	6923      	ldr	r3, [r4, #16]
 8005352:	6862      	ldr	r2, [r4, #4]
 8005354:	429a      	cmp	r2, r3
 8005356:	bfde      	ittt	le
 8005358:	2330      	movle	r3, #48	; 0x30
 800535a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800535e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005362:	ebac 0305 	sub.w	r3, ip, r5
 8005366:	6123      	str	r3, [r4, #16]
 8005368:	f8cd 8000 	str.w	r8, [sp]
 800536c:	463b      	mov	r3, r7
 800536e:	aa03      	add	r2, sp, #12
 8005370:	4621      	mov	r1, r4
 8005372:	4630      	mov	r0, r6
 8005374:	f7ff fef6 	bl	8005164 <_printf_common>
 8005378:	3001      	adds	r0, #1
 800537a:	d14d      	bne.n	8005418 <_printf_i+0x1c8>
 800537c:	f04f 30ff 	mov.w	r0, #4294967295
 8005380:	b005      	add	sp, #20
 8005382:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005386:	4839      	ldr	r0, [pc, #228]	; (800546c <_printf_i+0x21c>)
 8005388:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800538c:	6813      	ldr	r3, [r2, #0]
 800538e:	6821      	ldr	r1, [r4, #0]
 8005390:	1d1d      	adds	r5, r3, #4
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	6015      	str	r5, [r2, #0]
 8005396:	060a      	lsls	r2, r1, #24
 8005398:	d50b      	bpl.n	80053b2 <_printf_i+0x162>
 800539a:	07ca      	lsls	r2, r1, #31
 800539c:	bf44      	itt	mi
 800539e:	f041 0120 	orrmi.w	r1, r1, #32
 80053a2:	6021      	strmi	r1, [r4, #0]
 80053a4:	b91b      	cbnz	r3, 80053ae <_printf_i+0x15e>
 80053a6:	6822      	ldr	r2, [r4, #0]
 80053a8:	f022 0220 	bic.w	r2, r2, #32
 80053ac:	6022      	str	r2, [r4, #0]
 80053ae:	2210      	movs	r2, #16
 80053b0:	e7b7      	b.n	8005322 <_printf_i+0xd2>
 80053b2:	064d      	lsls	r5, r1, #25
 80053b4:	bf48      	it	mi
 80053b6:	b29b      	uxthmi	r3, r3
 80053b8:	e7ef      	b.n	800539a <_printf_i+0x14a>
 80053ba:	4665      	mov	r5, ip
 80053bc:	fbb3 f1f2 	udiv	r1, r3, r2
 80053c0:	fb02 3311 	mls	r3, r2, r1, r3
 80053c4:	5cc3      	ldrb	r3, [r0, r3]
 80053c6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80053ca:	460b      	mov	r3, r1
 80053cc:	2900      	cmp	r1, #0
 80053ce:	d1f5      	bne.n	80053bc <_printf_i+0x16c>
 80053d0:	e7b9      	b.n	8005346 <_printf_i+0xf6>
 80053d2:	6813      	ldr	r3, [r2, #0]
 80053d4:	6825      	ldr	r5, [r4, #0]
 80053d6:	6961      	ldr	r1, [r4, #20]
 80053d8:	1d18      	adds	r0, r3, #4
 80053da:	6010      	str	r0, [r2, #0]
 80053dc:	0628      	lsls	r0, r5, #24
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	d501      	bpl.n	80053e6 <_printf_i+0x196>
 80053e2:	6019      	str	r1, [r3, #0]
 80053e4:	e002      	b.n	80053ec <_printf_i+0x19c>
 80053e6:	066a      	lsls	r2, r5, #25
 80053e8:	d5fb      	bpl.n	80053e2 <_printf_i+0x192>
 80053ea:	8019      	strh	r1, [r3, #0]
 80053ec:	2300      	movs	r3, #0
 80053ee:	6123      	str	r3, [r4, #16]
 80053f0:	4665      	mov	r5, ip
 80053f2:	e7b9      	b.n	8005368 <_printf_i+0x118>
 80053f4:	6813      	ldr	r3, [r2, #0]
 80053f6:	1d19      	adds	r1, r3, #4
 80053f8:	6011      	str	r1, [r2, #0]
 80053fa:	681d      	ldr	r5, [r3, #0]
 80053fc:	6862      	ldr	r2, [r4, #4]
 80053fe:	2100      	movs	r1, #0
 8005400:	4628      	mov	r0, r5
 8005402:	f7fa feed 	bl	80001e0 <memchr>
 8005406:	b108      	cbz	r0, 800540c <_printf_i+0x1bc>
 8005408:	1b40      	subs	r0, r0, r5
 800540a:	6060      	str	r0, [r4, #4]
 800540c:	6863      	ldr	r3, [r4, #4]
 800540e:	6123      	str	r3, [r4, #16]
 8005410:	2300      	movs	r3, #0
 8005412:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005416:	e7a7      	b.n	8005368 <_printf_i+0x118>
 8005418:	6923      	ldr	r3, [r4, #16]
 800541a:	462a      	mov	r2, r5
 800541c:	4639      	mov	r1, r7
 800541e:	4630      	mov	r0, r6
 8005420:	47c0      	blx	r8
 8005422:	3001      	adds	r0, #1
 8005424:	d0aa      	beq.n	800537c <_printf_i+0x12c>
 8005426:	6823      	ldr	r3, [r4, #0]
 8005428:	079b      	lsls	r3, r3, #30
 800542a:	d413      	bmi.n	8005454 <_printf_i+0x204>
 800542c:	68e0      	ldr	r0, [r4, #12]
 800542e:	9b03      	ldr	r3, [sp, #12]
 8005430:	4298      	cmp	r0, r3
 8005432:	bfb8      	it	lt
 8005434:	4618      	movlt	r0, r3
 8005436:	e7a3      	b.n	8005380 <_printf_i+0x130>
 8005438:	2301      	movs	r3, #1
 800543a:	464a      	mov	r2, r9
 800543c:	4639      	mov	r1, r7
 800543e:	4630      	mov	r0, r6
 8005440:	47c0      	blx	r8
 8005442:	3001      	adds	r0, #1
 8005444:	d09a      	beq.n	800537c <_printf_i+0x12c>
 8005446:	3501      	adds	r5, #1
 8005448:	68e3      	ldr	r3, [r4, #12]
 800544a:	9a03      	ldr	r2, [sp, #12]
 800544c:	1a9b      	subs	r3, r3, r2
 800544e:	42ab      	cmp	r3, r5
 8005450:	dcf2      	bgt.n	8005438 <_printf_i+0x1e8>
 8005452:	e7eb      	b.n	800542c <_printf_i+0x1dc>
 8005454:	2500      	movs	r5, #0
 8005456:	f104 0919 	add.w	r9, r4, #25
 800545a:	e7f5      	b.n	8005448 <_printf_i+0x1f8>
 800545c:	2b00      	cmp	r3, #0
 800545e:	d1ac      	bne.n	80053ba <_printf_i+0x16a>
 8005460:	7803      	ldrb	r3, [r0, #0]
 8005462:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005466:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800546a:	e76c      	b.n	8005346 <_printf_i+0xf6>
 800546c:	08005779 	.word	0x08005779
 8005470:	0800578a 	.word	0x0800578a

08005474 <memcpy>:
 8005474:	b510      	push	{r4, lr}
 8005476:	1e43      	subs	r3, r0, #1
 8005478:	440a      	add	r2, r1
 800547a:	4291      	cmp	r1, r2
 800547c:	d100      	bne.n	8005480 <memcpy+0xc>
 800547e:	bd10      	pop	{r4, pc}
 8005480:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005484:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005488:	e7f7      	b.n	800547a <memcpy+0x6>

0800548a <memmove>:
 800548a:	4288      	cmp	r0, r1
 800548c:	b510      	push	{r4, lr}
 800548e:	eb01 0302 	add.w	r3, r1, r2
 8005492:	d807      	bhi.n	80054a4 <memmove+0x1a>
 8005494:	1e42      	subs	r2, r0, #1
 8005496:	4299      	cmp	r1, r3
 8005498:	d00a      	beq.n	80054b0 <memmove+0x26>
 800549a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800549e:	f802 4f01 	strb.w	r4, [r2, #1]!
 80054a2:	e7f8      	b.n	8005496 <memmove+0xc>
 80054a4:	4283      	cmp	r3, r0
 80054a6:	d9f5      	bls.n	8005494 <memmove+0xa>
 80054a8:	1881      	adds	r1, r0, r2
 80054aa:	1ad2      	subs	r2, r2, r3
 80054ac:	42d3      	cmn	r3, r2
 80054ae:	d100      	bne.n	80054b2 <memmove+0x28>
 80054b0:	bd10      	pop	{r4, pc}
 80054b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80054b6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80054ba:	e7f7      	b.n	80054ac <memmove+0x22>

080054bc <_free_r>:
 80054bc:	b538      	push	{r3, r4, r5, lr}
 80054be:	4605      	mov	r5, r0
 80054c0:	2900      	cmp	r1, #0
 80054c2:	d045      	beq.n	8005550 <_free_r+0x94>
 80054c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054c8:	1f0c      	subs	r4, r1, #4
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	bfb8      	it	lt
 80054ce:	18e4      	addlt	r4, r4, r3
 80054d0:	f000 f8d2 	bl	8005678 <__malloc_lock>
 80054d4:	4a1f      	ldr	r2, [pc, #124]	; (8005554 <_free_r+0x98>)
 80054d6:	6813      	ldr	r3, [r2, #0]
 80054d8:	4610      	mov	r0, r2
 80054da:	b933      	cbnz	r3, 80054ea <_free_r+0x2e>
 80054dc:	6063      	str	r3, [r4, #4]
 80054de:	6014      	str	r4, [r2, #0]
 80054e0:	4628      	mov	r0, r5
 80054e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80054e6:	f000 b8c8 	b.w	800567a <__malloc_unlock>
 80054ea:	42a3      	cmp	r3, r4
 80054ec:	d90c      	bls.n	8005508 <_free_r+0x4c>
 80054ee:	6821      	ldr	r1, [r4, #0]
 80054f0:	1862      	adds	r2, r4, r1
 80054f2:	4293      	cmp	r3, r2
 80054f4:	bf04      	itt	eq
 80054f6:	681a      	ldreq	r2, [r3, #0]
 80054f8:	685b      	ldreq	r3, [r3, #4]
 80054fa:	6063      	str	r3, [r4, #4]
 80054fc:	bf04      	itt	eq
 80054fe:	1852      	addeq	r2, r2, r1
 8005500:	6022      	streq	r2, [r4, #0]
 8005502:	6004      	str	r4, [r0, #0]
 8005504:	e7ec      	b.n	80054e0 <_free_r+0x24>
 8005506:	4613      	mov	r3, r2
 8005508:	685a      	ldr	r2, [r3, #4]
 800550a:	b10a      	cbz	r2, 8005510 <_free_r+0x54>
 800550c:	42a2      	cmp	r2, r4
 800550e:	d9fa      	bls.n	8005506 <_free_r+0x4a>
 8005510:	6819      	ldr	r1, [r3, #0]
 8005512:	1858      	adds	r0, r3, r1
 8005514:	42a0      	cmp	r0, r4
 8005516:	d10b      	bne.n	8005530 <_free_r+0x74>
 8005518:	6820      	ldr	r0, [r4, #0]
 800551a:	4401      	add	r1, r0
 800551c:	1858      	adds	r0, r3, r1
 800551e:	4282      	cmp	r2, r0
 8005520:	6019      	str	r1, [r3, #0]
 8005522:	d1dd      	bne.n	80054e0 <_free_r+0x24>
 8005524:	6810      	ldr	r0, [r2, #0]
 8005526:	6852      	ldr	r2, [r2, #4]
 8005528:	605a      	str	r2, [r3, #4]
 800552a:	4401      	add	r1, r0
 800552c:	6019      	str	r1, [r3, #0]
 800552e:	e7d7      	b.n	80054e0 <_free_r+0x24>
 8005530:	d902      	bls.n	8005538 <_free_r+0x7c>
 8005532:	230c      	movs	r3, #12
 8005534:	602b      	str	r3, [r5, #0]
 8005536:	e7d3      	b.n	80054e0 <_free_r+0x24>
 8005538:	6820      	ldr	r0, [r4, #0]
 800553a:	1821      	adds	r1, r4, r0
 800553c:	428a      	cmp	r2, r1
 800553e:	bf04      	itt	eq
 8005540:	6811      	ldreq	r1, [r2, #0]
 8005542:	6852      	ldreq	r2, [r2, #4]
 8005544:	6062      	str	r2, [r4, #4]
 8005546:	bf04      	itt	eq
 8005548:	1809      	addeq	r1, r1, r0
 800554a:	6021      	streq	r1, [r4, #0]
 800554c:	605c      	str	r4, [r3, #4]
 800554e:	e7c7      	b.n	80054e0 <_free_r+0x24>
 8005550:	bd38      	pop	{r3, r4, r5, pc}
 8005552:	bf00      	nop
 8005554:	2000014c 	.word	0x2000014c

08005558 <_malloc_r>:
 8005558:	b570      	push	{r4, r5, r6, lr}
 800555a:	1ccd      	adds	r5, r1, #3
 800555c:	f025 0503 	bic.w	r5, r5, #3
 8005560:	3508      	adds	r5, #8
 8005562:	2d0c      	cmp	r5, #12
 8005564:	bf38      	it	cc
 8005566:	250c      	movcc	r5, #12
 8005568:	2d00      	cmp	r5, #0
 800556a:	4606      	mov	r6, r0
 800556c:	db01      	blt.n	8005572 <_malloc_r+0x1a>
 800556e:	42a9      	cmp	r1, r5
 8005570:	d903      	bls.n	800557a <_malloc_r+0x22>
 8005572:	230c      	movs	r3, #12
 8005574:	6033      	str	r3, [r6, #0]
 8005576:	2000      	movs	r0, #0
 8005578:	bd70      	pop	{r4, r5, r6, pc}
 800557a:	f000 f87d 	bl	8005678 <__malloc_lock>
 800557e:	4a21      	ldr	r2, [pc, #132]	; (8005604 <_malloc_r+0xac>)
 8005580:	6814      	ldr	r4, [r2, #0]
 8005582:	4621      	mov	r1, r4
 8005584:	b991      	cbnz	r1, 80055ac <_malloc_r+0x54>
 8005586:	4c20      	ldr	r4, [pc, #128]	; (8005608 <_malloc_r+0xb0>)
 8005588:	6823      	ldr	r3, [r4, #0]
 800558a:	b91b      	cbnz	r3, 8005594 <_malloc_r+0x3c>
 800558c:	4630      	mov	r0, r6
 800558e:	f000 f863 	bl	8005658 <_sbrk_r>
 8005592:	6020      	str	r0, [r4, #0]
 8005594:	4629      	mov	r1, r5
 8005596:	4630      	mov	r0, r6
 8005598:	f000 f85e 	bl	8005658 <_sbrk_r>
 800559c:	1c43      	adds	r3, r0, #1
 800559e:	d124      	bne.n	80055ea <_malloc_r+0x92>
 80055a0:	230c      	movs	r3, #12
 80055a2:	6033      	str	r3, [r6, #0]
 80055a4:	4630      	mov	r0, r6
 80055a6:	f000 f868 	bl	800567a <__malloc_unlock>
 80055aa:	e7e4      	b.n	8005576 <_malloc_r+0x1e>
 80055ac:	680b      	ldr	r3, [r1, #0]
 80055ae:	1b5b      	subs	r3, r3, r5
 80055b0:	d418      	bmi.n	80055e4 <_malloc_r+0x8c>
 80055b2:	2b0b      	cmp	r3, #11
 80055b4:	d90f      	bls.n	80055d6 <_malloc_r+0x7e>
 80055b6:	600b      	str	r3, [r1, #0]
 80055b8:	50cd      	str	r5, [r1, r3]
 80055ba:	18cc      	adds	r4, r1, r3
 80055bc:	4630      	mov	r0, r6
 80055be:	f000 f85c 	bl	800567a <__malloc_unlock>
 80055c2:	f104 000b 	add.w	r0, r4, #11
 80055c6:	1d23      	adds	r3, r4, #4
 80055c8:	f020 0007 	bic.w	r0, r0, #7
 80055cc:	1ac3      	subs	r3, r0, r3
 80055ce:	d0d3      	beq.n	8005578 <_malloc_r+0x20>
 80055d0:	425a      	negs	r2, r3
 80055d2:	50e2      	str	r2, [r4, r3]
 80055d4:	e7d0      	b.n	8005578 <_malloc_r+0x20>
 80055d6:	428c      	cmp	r4, r1
 80055d8:	684b      	ldr	r3, [r1, #4]
 80055da:	bf16      	itet	ne
 80055dc:	6063      	strne	r3, [r4, #4]
 80055de:	6013      	streq	r3, [r2, #0]
 80055e0:	460c      	movne	r4, r1
 80055e2:	e7eb      	b.n	80055bc <_malloc_r+0x64>
 80055e4:	460c      	mov	r4, r1
 80055e6:	6849      	ldr	r1, [r1, #4]
 80055e8:	e7cc      	b.n	8005584 <_malloc_r+0x2c>
 80055ea:	1cc4      	adds	r4, r0, #3
 80055ec:	f024 0403 	bic.w	r4, r4, #3
 80055f0:	42a0      	cmp	r0, r4
 80055f2:	d005      	beq.n	8005600 <_malloc_r+0xa8>
 80055f4:	1a21      	subs	r1, r4, r0
 80055f6:	4630      	mov	r0, r6
 80055f8:	f000 f82e 	bl	8005658 <_sbrk_r>
 80055fc:	3001      	adds	r0, #1
 80055fe:	d0cf      	beq.n	80055a0 <_malloc_r+0x48>
 8005600:	6025      	str	r5, [r4, #0]
 8005602:	e7db      	b.n	80055bc <_malloc_r+0x64>
 8005604:	2000014c 	.word	0x2000014c
 8005608:	20000150 	.word	0x20000150

0800560c <_realloc_r>:
 800560c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800560e:	4607      	mov	r7, r0
 8005610:	4614      	mov	r4, r2
 8005612:	460e      	mov	r6, r1
 8005614:	b921      	cbnz	r1, 8005620 <_realloc_r+0x14>
 8005616:	4611      	mov	r1, r2
 8005618:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800561c:	f7ff bf9c 	b.w	8005558 <_malloc_r>
 8005620:	b922      	cbnz	r2, 800562c <_realloc_r+0x20>
 8005622:	f7ff ff4b 	bl	80054bc <_free_r>
 8005626:	4625      	mov	r5, r4
 8005628:	4628      	mov	r0, r5
 800562a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800562c:	f000 f826 	bl	800567c <_malloc_usable_size_r>
 8005630:	42a0      	cmp	r0, r4
 8005632:	d20f      	bcs.n	8005654 <_realloc_r+0x48>
 8005634:	4621      	mov	r1, r4
 8005636:	4638      	mov	r0, r7
 8005638:	f7ff ff8e 	bl	8005558 <_malloc_r>
 800563c:	4605      	mov	r5, r0
 800563e:	2800      	cmp	r0, #0
 8005640:	d0f2      	beq.n	8005628 <_realloc_r+0x1c>
 8005642:	4631      	mov	r1, r6
 8005644:	4622      	mov	r2, r4
 8005646:	f7ff ff15 	bl	8005474 <memcpy>
 800564a:	4631      	mov	r1, r6
 800564c:	4638      	mov	r0, r7
 800564e:	f7ff ff35 	bl	80054bc <_free_r>
 8005652:	e7e9      	b.n	8005628 <_realloc_r+0x1c>
 8005654:	4635      	mov	r5, r6
 8005656:	e7e7      	b.n	8005628 <_realloc_r+0x1c>

08005658 <_sbrk_r>:
 8005658:	b538      	push	{r3, r4, r5, lr}
 800565a:	4c06      	ldr	r4, [pc, #24]	; (8005674 <_sbrk_r+0x1c>)
 800565c:	2300      	movs	r3, #0
 800565e:	4605      	mov	r5, r0
 8005660:	4608      	mov	r0, r1
 8005662:	6023      	str	r3, [r4, #0]
 8005664:	f7ff fb44 	bl	8004cf0 <_sbrk>
 8005668:	1c43      	adds	r3, r0, #1
 800566a:	d102      	bne.n	8005672 <_sbrk_r+0x1a>
 800566c:	6823      	ldr	r3, [r4, #0]
 800566e:	b103      	cbz	r3, 8005672 <_sbrk_r+0x1a>
 8005670:	602b      	str	r3, [r5, #0]
 8005672:	bd38      	pop	{r3, r4, r5, pc}
 8005674:	200002f0 	.word	0x200002f0

08005678 <__malloc_lock>:
 8005678:	4770      	bx	lr

0800567a <__malloc_unlock>:
 800567a:	4770      	bx	lr

0800567c <_malloc_usable_size_r>:
 800567c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005680:	1f18      	subs	r0, r3, #4
 8005682:	2b00      	cmp	r3, #0
 8005684:	bfbc      	itt	lt
 8005686:	580b      	ldrlt	r3, [r1, r0]
 8005688:	18c0      	addlt	r0, r0, r3
 800568a:	4770      	bx	lr

0800568c <_init>:
 800568c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800568e:	bf00      	nop
 8005690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005692:	bc08      	pop	{r3}
 8005694:	469e      	mov	lr, r3
 8005696:	4770      	bx	lr

08005698 <_fini>:
 8005698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800569a:	bf00      	nop
 800569c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800569e:	bc08      	pop	{r3}
 80056a0:	469e      	mov	lr, r3
 80056a2:	4770      	bx	lr
