
Lab 7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048c0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004a48  08004a48  00014a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a90  08004a90  000200b4  2**0
                  CONTENTS
  4 .ARM          00000008  08004a90  08004a90  00014a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a98  08004a98  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a98  08004a98  00014a98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a9c  08004a9c  00014a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  08004aa0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  200000b4  08004b54  000200b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000027c  08004b54  0002027c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010024  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002469  00000000  00000000  00030108  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e48  00000000  00000000  00032578  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cf0  00000000  00000000  000333c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026576  00000000  00000000  000340b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c3f2  00000000  00000000  0005a626  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e8bf3  00000000  00000000  00066a18  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014f60b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038b4  00000000  00000000  0014f688  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000b4 	.word	0x200000b4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004a30 	.word	0x08004a30

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000b8 	.word	0x200000b8
 80001c4:	08004a30 	.word	0x08004a30

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80004ce:	2300      	movs	r3, #0
 80004d0:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004d2:	2003      	movs	r0, #3
 80004d4:	f000 f95e 	bl	8000794 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80004d8:	2000      	movs	r0, #0
 80004da:	f000 f80d 	bl	80004f8 <HAL_InitTick>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d002      	beq.n	80004ea <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80004e4:	2301      	movs	r3, #1
 80004e6:	71fb      	strb	r3, [r7, #7]
 80004e8:	e001      	b.n	80004ee <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80004ea:	f004 f919 	bl	8004720 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80004ee:	79fb      	ldrb	r3, [r7, #7]
}
 80004f0:	4618      	mov	r0, r3
 80004f2:	3708      	adds	r7, #8
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}

080004f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b084      	sub	sp, #16
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000500:	2300      	movs	r3, #0
 8000502:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000504:	4b17      	ldr	r3, [pc, #92]	; (8000564 <HAL_InitTick+0x6c>)
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	2b00      	cmp	r3, #0
 800050a:	d023      	beq.n	8000554 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800050c:	4b16      	ldr	r3, [pc, #88]	; (8000568 <HAL_InitTick+0x70>)
 800050e:	681a      	ldr	r2, [r3, #0]
 8000510:	4b14      	ldr	r3, [pc, #80]	; (8000564 <HAL_InitTick+0x6c>)
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	4619      	mov	r1, r3
 8000516:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800051a:	fbb3 f3f1 	udiv	r3, r3, r1
 800051e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000522:	4618      	mov	r0, r3
 8000524:	f000 f96b 	bl	80007fe <HAL_SYSTICK_Config>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d10f      	bne.n	800054e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	2b0f      	cmp	r3, #15
 8000532:	d809      	bhi.n	8000548 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000534:	2200      	movs	r2, #0
 8000536:	6879      	ldr	r1, [r7, #4]
 8000538:	f04f 30ff 	mov.w	r0, #4294967295
 800053c:	f000 f935 	bl	80007aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000540:	4a0a      	ldr	r2, [pc, #40]	; (800056c <HAL_InitTick+0x74>)
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	6013      	str	r3, [r2, #0]
 8000546:	e007      	b.n	8000558 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000548:	2301      	movs	r3, #1
 800054a:	73fb      	strb	r3, [r7, #15]
 800054c:	e004      	b.n	8000558 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800054e:	2301      	movs	r3, #1
 8000550:	73fb      	strb	r3, [r7, #15]
 8000552:	e001      	b.n	8000558 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000554:	2301      	movs	r3, #1
 8000556:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000558:	7bfb      	ldrb	r3, [r7, #15]
}
 800055a:	4618      	mov	r0, r3
 800055c:	3710      	adds	r7, #16
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	20000004 	.word	0x20000004
 8000568:	200000b0 	.word	0x200000b0
 800056c:	20000000 	.word	0x20000000

08000570 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000574:	4b06      	ldr	r3, [pc, #24]	; (8000590 <HAL_IncTick+0x20>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	461a      	mov	r2, r3
 800057a:	4b06      	ldr	r3, [pc, #24]	; (8000594 <HAL_IncTick+0x24>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	4413      	add	r3, r2
 8000580:	4a04      	ldr	r2, [pc, #16]	; (8000594 <HAL_IncTick+0x24>)
 8000582:	6013      	str	r3, [r2, #0]
}
 8000584:	bf00      	nop
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	20000004 	.word	0x20000004
 8000594:	200000e0 	.word	0x200000e0

08000598 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  return uwTick;
 800059c:	4b03      	ldr	r3, [pc, #12]	; (80005ac <HAL_GetTick+0x14>)
 800059e:	681b      	ldr	r3, [r3, #0]
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	200000e0 	.word	0x200000e0

080005b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005b8:	f7ff ffee 	bl	8000598 <HAL_GetTick>
 80005bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005c8:	d005      	beq.n	80005d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80005ca:	4b09      	ldr	r3, [pc, #36]	; (80005f0 <HAL_Delay+0x40>)
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	461a      	mov	r2, r3
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	4413      	add	r3, r2
 80005d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80005d6:	bf00      	nop
 80005d8:	f7ff ffde 	bl	8000598 <HAL_GetTick>
 80005dc:	4602      	mov	r2, r0
 80005de:	68bb      	ldr	r3, [r7, #8]
 80005e0:	1ad3      	subs	r3, r2, r3
 80005e2:	68fa      	ldr	r2, [r7, #12]
 80005e4:	429a      	cmp	r2, r3
 80005e6:	d8f7      	bhi.n	80005d8 <HAL_Delay+0x28>
  {
  }
}
 80005e8:	bf00      	nop
 80005ea:	3710      	adds	r7, #16
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	20000004 	.word	0x20000004

080005f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b085      	sub	sp, #20
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	f003 0307 	and.w	r3, r3, #7
 8000602:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000604:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <__NVIC_SetPriorityGrouping+0x44>)
 8000606:	68db      	ldr	r3, [r3, #12]
 8000608:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800060a:	68ba      	ldr	r2, [r7, #8]
 800060c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000610:	4013      	ands	r3, r2
 8000612:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800061c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000624:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000626:	4a04      	ldr	r2, [pc, #16]	; (8000638 <__NVIC_SetPriorityGrouping+0x44>)
 8000628:	68bb      	ldr	r3, [r7, #8]
 800062a:	60d3      	str	r3, [r2, #12]
}
 800062c:	bf00      	nop
 800062e:	3714      	adds	r7, #20
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr
 8000638:	e000ed00 	.word	0xe000ed00

0800063c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000640:	4b04      	ldr	r3, [pc, #16]	; (8000654 <__NVIC_GetPriorityGrouping+0x18>)
 8000642:	68db      	ldr	r3, [r3, #12]
 8000644:	0a1b      	lsrs	r3, r3, #8
 8000646:	f003 0307 	and.w	r3, r3, #7
}
 800064a:	4618      	mov	r0, r3
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr
 8000654:	e000ed00 	.word	0xe000ed00

08000658 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000666:	2b00      	cmp	r3, #0
 8000668:	db0b      	blt.n	8000682 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	f003 021f 	and.w	r2, r3, #31
 8000670:	4907      	ldr	r1, [pc, #28]	; (8000690 <__NVIC_EnableIRQ+0x38>)
 8000672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000676:	095b      	lsrs	r3, r3, #5
 8000678:	2001      	movs	r0, #1
 800067a:	fa00 f202 	lsl.w	r2, r0, r2
 800067e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000682:	bf00      	nop
 8000684:	370c      	adds	r7, #12
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	e000e100 	.word	0xe000e100

08000694 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	6039      	str	r1, [r7, #0]
 800069e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	db0a      	blt.n	80006be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a8:	683b      	ldr	r3, [r7, #0]
 80006aa:	b2da      	uxtb	r2, r3
 80006ac:	490c      	ldr	r1, [pc, #48]	; (80006e0 <__NVIC_SetPriority+0x4c>)
 80006ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b2:	0112      	lsls	r2, r2, #4
 80006b4:	b2d2      	uxtb	r2, r2
 80006b6:	440b      	add	r3, r1
 80006b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006bc:	e00a      	b.n	80006d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	b2da      	uxtb	r2, r3
 80006c2:	4908      	ldr	r1, [pc, #32]	; (80006e4 <__NVIC_SetPriority+0x50>)
 80006c4:	79fb      	ldrb	r3, [r7, #7]
 80006c6:	f003 030f 	and.w	r3, r3, #15
 80006ca:	3b04      	subs	r3, #4
 80006cc:	0112      	lsls	r2, r2, #4
 80006ce:	b2d2      	uxtb	r2, r2
 80006d0:	440b      	add	r3, r1
 80006d2:	761a      	strb	r2, [r3, #24]
}
 80006d4:	bf00      	nop
 80006d6:	370c      	adds	r7, #12
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr
 80006e0:	e000e100 	.word	0xe000e100
 80006e4:	e000ed00 	.word	0xe000ed00

080006e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b089      	sub	sp, #36	; 0x24
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	60f8      	str	r0, [r7, #12]
 80006f0:	60b9      	str	r1, [r7, #8]
 80006f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	f003 0307 	and.w	r3, r3, #7
 80006fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006fc:	69fb      	ldr	r3, [r7, #28]
 80006fe:	f1c3 0307 	rsb	r3, r3, #7
 8000702:	2b04      	cmp	r3, #4
 8000704:	bf28      	it	cs
 8000706:	2304      	movcs	r3, #4
 8000708:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800070a:	69fb      	ldr	r3, [r7, #28]
 800070c:	3304      	adds	r3, #4
 800070e:	2b06      	cmp	r3, #6
 8000710:	d902      	bls.n	8000718 <NVIC_EncodePriority+0x30>
 8000712:	69fb      	ldr	r3, [r7, #28]
 8000714:	3b03      	subs	r3, #3
 8000716:	e000      	b.n	800071a <NVIC_EncodePriority+0x32>
 8000718:	2300      	movs	r3, #0
 800071a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800071c:	f04f 32ff 	mov.w	r2, #4294967295
 8000720:	69bb      	ldr	r3, [r7, #24]
 8000722:	fa02 f303 	lsl.w	r3, r2, r3
 8000726:	43da      	mvns	r2, r3
 8000728:	68bb      	ldr	r3, [r7, #8]
 800072a:	401a      	ands	r2, r3
 800072c:	697b      	ldr	r3, [r7, #20]
 800072e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000730:	f04f 31ff 	mov.w	r1, #4294967295
 8000734:	697b      	ldr	r3, [r7, #20]
 8000736:	fa01 f303 	lsl.w	r3, r1, r3
 800073a:	43d9      	mvns	r1, r3
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000740:	4313      	orrs	r3, r2
         );
}
 8000742:	4618      	mov	r0, r3
 8000744:	3724      	adds	r7, #36	; 0x24
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
	...

08000750 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	3b01      	subs	r3, #1
 800075c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000760:	d301      	bcc.n	8000766 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000762:	2301      	movs	r3, #1
 8000764:	e00f      	b.n	8000786 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000766:	4a0a      	ldr	r2, [pc, #40]	; (8000790 <SysTick_Config+0x40>)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	3b01      	subs	r3, #1
 800076c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800076e:	210f      	movs	r1, #15
 8000770:	f04f 30ff 	mov.w	r0, #4294967295
 8000774:	f7ff ff8e 	bl	8000694 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000778:	4b05      	ldr	r3, [pc, #20]	; (8000790 <SysTick_Config+0x40>)
 800077a:	2200      	movs	r2, #0
 800077c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800077e:	4b04      	ldr	r3, [pc, #16]	; (8000790 <SysTick_Config+0x40>)
 8000780:	2207      	movs	r2, #7
 8000782:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000784:	2300      	movs	r3, #0
}
 8000786:	4618      	mov	r0, r3
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	e000e010 	.word	0xe000e010

08000794 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800079c:	6878      	ldr	r0, [r7, #4]
 800079e:	f7ff ff29 	bl	80005f4 <__NVIC_SetPriorityGrouping>
}
 80007a2:	bf00      	nop
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}

080007aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007aa:	b580      	push	{r7, lr}
 80007ac:	b086      	sub	sp, #24
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	4603      	mov	r3, r0
 80007b2:	60b9      	str	r1, [r7, #8]
 80007b4:	607a      	str	r2, [r7, #4]
 80007b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80007b8:	2300      	movs	r3, #0
 80007ba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80007bc:	f7ff ff3e 	bl	800063c <__NVIC_GetPriorityGrouping>
 80007c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007c2:	687a      	ldr	r2, [r7, #4]
 80007c4:	68b9      	ldr	r1, [r7, #8]
 80007c6:	6978      	ldr	r0, [r7, #20]
 80007c8:	f7ff ff8e 	bl	80006e8 <NVIC_EncodePriority>
 80007cc:	4602      	mov	r2, r0
 80007ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007d2:	4611      	mov	r1, r2
 80007d4:	4618      	mov	r0, r3
 80007d6:	f7ff ff5d 	bl	8000694 <__NVIC_SetPriority>
}
 80007da:	bf00      	nop
 80007dc:	3718      	adds	r7, #24
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}

080007e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007e2:	b580      	push	{r7, lr}
 80007e4:	b082      	sub	sp, #8
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	4603      	mov	r3, r0
 80007ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff ff31 	bl	8000658 <__NVIC_EnableIRQ>
}
 80007f6:	bf00      	nop
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}

080007fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007fe:	b580      	push	{r7, lr}
 8000800:	b082      	sub	sp, #8
 8000802:	af00      	add	r7, sp, #0
 8000804:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000806:	6878      	ldr	r0, [r7, #4]
 8000808:	f7ff ffa2 	bl	8000750 <SysTick_Config>
 800080c:	4603      	mov	r3, r0
}
 800080e:	4618      	mov	r0, r3
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
	...

08000818 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000818:	b480      	push	{r7}
 800081a:	b087      	sub	sp, #28
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
 8000820:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000822:	2300      	movs	r3, #0
 8000824:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000826:	e17f      	b.n	8000b28 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	681a      	ldr	r2, [r3, #0]
 800082c:	2101      	movs	r1, #1
 800082e:	697b      	ldr	r3, [r7, #20]
 8000830:	fa01 f303 	lsl.w	r3, r1, r3
 8000834:	4013      	ands	r3, r2
 8000836:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	2b00      	cmp	r3, #0
 800083c:	f000 8171 	beq.w	8000b22 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	685b      	ldr	r3, [r3, #4]
 8000844:	2b01      	cmp	r3, #1
 8000846:	d00b      	beq.n	8000860 <HAL_GPIO_Init+0x48>
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	685b      	ldr	r3, [r3, #4]
 800084c:	2b02      	cmp	r3, #2
 800084e:	d007      	beq.n	8000860 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000854:	2b11      	cmp	r3, #17
 8000856:	d003      	beq.n	8000860 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	685b      	ldr	r3, [r3, #4]
 800085c:	2b12      	cmp	r3, #18
 800085e:	d130      	bne.n	80008c2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	689b      	ldr	r3, [r3, #8]
 8000864:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000866:	697b      	ldr	r3, [r7, #20]
 8000868:	005b      	lsls	r3, r3, #1
 800086a:	2203      	movs	r2, #3
 800086c:	fa02 f303 	lsl.w	r3, r2, r3
 8000870:	43db      	mvns	r3, r3
 8000872:	693a      	ldr	r2, [r7, #16]
 8000874:	4013      	ands	r3, r2
 8000876:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	68da      	ldr	r2, [r3, #12]
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	005b      	lsls	r3, r3, #1
 8000880:	fa02 f303 	lsl.w	r3, r2, r3
 8000884:	693a      	ldr	r2, [r7, #16]
 8000886:	4313      	orrs	r3, r2
 8000888:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	693a      	ldr	r2, [r7, #16]
 800088e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	685b      	ldr	r3, [r3, #4]
 8000894:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000896:	2201      	movs	r2, #1
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	fa02 f303 	lsl.w	r3, r2, r3
 800089e:	43db      	mvns	r3, r3
 80008a0:	693a      	ldr	r2, [r7, #16]
 80008a2:	4013      	ands	r3, r2
 80008a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	685b      	ldr	r3, [r3, #4]
 80008aa:	091b      	lsrs	r3, r3, #4
 80008ac:	f003 0201 	and.w	r2, r3, #1
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	fa02 f303 	lsl.w	r3, r2, r3
 80008b6:	693a      	ldr	r2, [r7, #16]
 80008b8:	4313      	orrs	r3, r2
 80008ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	693a      	ldr	r2, [r7, #16]
 80008c0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	685b      	ldr	r3, [r3, #4]
 80008c6:	f003 0303 	and.w	r3, r3, #3
 80008ca:	2b03      	cmp	r3, #3
 80008cc:	d118      	bne.n	8000900 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80008d4:	2201      	movs	r2, #1
 80008d6:	697b      	ldr	r3, [r7, #20]
 80008d8:	fa02 f303 	lsl.w	r3, r2, r3
 80008dc:	43db      	mvns	r3, r3
 80008de:	693a      	ldr	r2, [r7, #16]
 80008e0:	4013      	ands	r3, r2
 80008e2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	685b      	ldr	r3, [r3, #4]
 80008e8:	08db      	lsrs	r3, r3, #3
 80008ea:	f003 0201 	and.w	r2, r3, #1
 80008ee:	697b      	ldr	r3, [r7, #20]
 80008f0:	fa02 f303 	lsl.w	r3, r2, r3
 80008f4:	693a      	ldr	r2, [r7, #16]
 80008f6:	4313      	orrs	r3, r2
 80008f8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	693a      	ldr	r2, [r7, #16]
 80008fe:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	68db      	ldr	r3, [r3, #12]
 8000904:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000906:	697b      	ldr	r3, [r7, #20]
 8000908:	005b      	lsls	r3, r3, #1
 800090a:	2203      	movs	r2, #3
 800090c:	fa02 f303 	lsl.w	r3, r2, r3
 8000910:	43db      	mvns	r3, r3
 8000912:	693a      	ldr	r2, [r7, #16]
 8000914:	4013      	ands	r3, r2
 8000916:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	689a      	ldr	r2, [r3, #8]
 800091c:	697b      	ldr	r3, [r7, #20]
 800091e:	005b      	lsls	r3, r3, #1
 8000920:	fa02 f303 	lsl.w	r3, r2, r3
 8000924:	693a      	ldr	r2, [r7, #16]
 8000926:	4313      	orrs	r3, r2
 8000928:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	693a      	ldr	r2, [r7, #16]
 800092e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	685b      	ldr	r3, [r3, #4]
 8000934:	2b02      	cmp	r3, #2
 8000936:	d003      	beq.n	8000940 <HAL_GPIO_Init+0x128>
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	2b12      	cmp	r3, #18
 800093e:	d123      	bne.n	8000988 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	08da      	lsrs	r2, r3, #3
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	3208      	adds	r2, #8
 8000948:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800094c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	f003 0307 	and.w	r3, r3, #7
 8000954:	009b      	lsls	r3, r3, #2
 8000956:	220f      	movs	r2, #15
 8000958:	fa02 f303 	lsl.w	r3, r2, r3
 800095c:	43db      	mvns	r3, r3
 800095e:	693a      	ldr	r2, [r7, #16]
 8000960:	4013      	ands	r3, r2
 8000962:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	691a      	ldr	r2, [r3, #16]
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	f003 0307 	and.w	r3, r3, #7
 800096e:	009b      	lsls	r3, r3, #2
 8000970:	fa02 f303 	lsl.w	r3, r2, r3
 8000974:	693a      	ldr	r2, [r7, #16]
 8000976:	4313      	orrs	r3, r2
 8000978:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800097a:	697b      	ldr	r3, [r7, #20]
 800097c:	08da      	lsrs	r2, r3, #3
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	3208      	adds	r2, #8
 8000982:	6939      	ldr	r1, [r7, #16]
 8000984:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	005b      	lsls	r3, r3, #1
 8000992:	2203      	movs	r2, #3
 8000994:	fa02 f303 	lsl.w	r3, r2, r3
 8000998:	43db      	mvns	r3, r3
 800099a:	693a      	ldr	r2, [r7, #16]
 800099c:	4013      	ands	r3, r2
 800099e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	685b      	ldr	r3, [r3, #4]
 80009a4:	f003 0203 	and.w	r2, r3, #3
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	005b      	lsls	r3, r3, #1
 80009ac:	fa02 f303 	lsl.w	r3, r2, r3
 80009b0:	693a      	ldr	r2, [r7, #16]
 80009b2:	4313      	orrs	r3, r2
 80009b4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	693a      	ldr	r2, [r7, #16]
 80009ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	685b      	ldr	r3, [r3, #4]
 80009c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	f000 80ac 	beq.w	8000b22 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ca:	4b5e      	ldr	r3, [pc, #376]	; (8000b44 <HAL_GPIO_Init+0x32c>)
 80009cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009ce:	4a5d      	ldr	r2, [pc, #372]	; (8000b44 <HAL_GPIO_Init+0x32c>)
 80009d0:	f043 0301 	orr.w	r3, r3, #1
 80009d4:	6613      	str	r3, [r2, #96]	; 0x60
 80009d6:	4b5b      	ldr	r3, [pc, #364]	; (8000b44 <HAL_GPIO_Init+0x32c>)
 80009d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	60bb      	str	r3, [r7, #8]
 80009e0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80009e2:	4a59      	ldr	r2, [pc, #356]	; (8000b48 <HAL_GPIO_Init+0x330>)
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	089b      	lsrs	r3, r3, #2
 80009e8:	3302      	adds	r3, #2
 80009ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	f003 0303 	and.w	r3, r3, #3
 80009f6:	009b      	lsls	r3, r3, #2
 80009f8:	220f      	movs	r2, #15
 80009fa:	fa02 f303 	lsl.w	r3, r2, r3
 80009fe:	43db      	mvns	r3, r3
 8000a00:	693a      	ldr	r2, [r7, #16]
 8000a02:	4013      	ands	r3, r2
 8000a04:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000a0c:	d025      	beq.n	8000a5a <HAL_GPIO_Init+0x242>
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4a4e      	ldr	r2, [pc, #312]	; (8000b4c <HAL_GPIO_Init+0x334>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d01f      	beq.n	8000a56 <HAL_GPIO_Init+0x23e>
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4a4d      	ldr	r2, [pc, #308]	; (8000b50 <HAL_GPIO_Init+0x338>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d019      	beq.n	8000a52 <HAL_GPIO_Init+0x23a>
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4a4c      	ldr	r2, [pc, #304]	; (8000b54 <HAL_GPIO_Init+0x33c>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d013      	beq.n	8000a4e <HAL_GPIO_Init+0x236>
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	4a4b      	ldr	r2, [pc, #300]	; (8000b58 <HAL_GPIO_Init+0x340>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d00d      	beq.n	8000a4a <HAL_GPIO_Init+0x232>
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	4a4a      	ldr	r2, [pc, #296]	; (8000b5c <HAL_GPIO_Init+0x344>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d007      	beq.n	8000a46 <HAL_GPIO_Init+0x22e>
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	4a49      	ldr	r2, [pc, #292]	; (8000b60 <HAL_GPIO_Init+0x348>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d101      	bne.n	8000a42 <HAL_GPIO_Init+0x22a>
 8000a3e:	2306      	movs	r3, #6
 8000a40:	e00c      	b.n	8000a5c <HAL_GPIO_Init+0x244>
 8000a42:	2307      	movs	r3, #7
 8000a44:	e00a      	b.n	8000a5c <HAL_GPIO_Init+0x244>
 8000a46:	2305      	movs	r3, #5
 8000a48:	e008      	b.n	8000a5c <HAL_GPIO_Init+0x244>
 8000a4a:	2304      	movs	r3, #4
 8000a4c:	e006      	b.n	8000a5c <HAL_GPIO_Init+0x244>
 8000a4e:	2303      	movs	r3, #3
 8000a50:	e004      	b.n	8000a5c <HAL_GPIO_Init+0x244>
 8000a52:	2302      	movs	r3, #2
 8000a54:	e002      	b.n	8000a5c <HAL_GPIO_Init+0x244>
 8000a56:	2301      	movs	r3, #1
 8000a58:	e000      	b.n	8000a5c <HAL_GPIO_Init+0x244>
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	697a      	ldr	r2, [r7, #20]
 8000a5e:	f002 0203 	and.w	r2, r2, #3
 8000a62:	0092      	lsls	r2, r2, #2
 8000a64:	4093      	lsls	r3, r2
 8000a66:	693a      	ldr	r2, [r7, #16]
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a6c:	4936      	ldr	r1, [pc, #216]	; (8000b48 <HAL_GPIO_Init+0x330>)
 8000a6e:	697b      	ldr	r3, [r7, #20]
 8000a70:	089b      	lsrs	r3, r3, #2
 8000a72:	3302      	adds	r3, #2
 8000a74:	693a      	ldr	r2, [r7, #16]
 8000a76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000a7a:	4b3a      	ldr	r3, [pc, #232]	; (8000b64 <HAL_GPIO_Init+0x34c>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	43db      	mvns	r3, r3
 8000a84:	693a      	ldr	r2, [r7, #16]
 8000a86:	4013      	ands	r3, r2
 8000a88:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	685b      	ldr	r3, [r3, #4]
 8000a8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d003      	beq.n	8000a9e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000a96:	693a      	ldr	r2, [r7, #16]
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	4313      	orrs	r3, r2
 8000a9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000a9e:	4a31      	ldr	r2, [pc, #196]	; (8000b64 <HAL_GPIO_Init+0x34c>)
 8000aa0:	693b      	ldr	r3, [r7, #16]
 8000aa2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000aa4:	4b2f      	ldr	r3, [pc, #188]	; (8000b64 <HAL_GPIO_Init+0x34c>)
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	43db      	mvns	r3, r3
 8000aae:	693a      	ldr	r2, [r7, #16]
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d003      	beq.n	8000ac8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000ac0:	693a      	ldr	r2, [r7, #16]
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ac8:	4a26      	ldr	r2, [pc, #152]	; (8000b64 <HAL_GPIO_Init+0x34c>)
 8000aca:	693b      	ldr	r3, [r7, #16]
 8000acc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ace:	4b25      	ldr	r3, [pc, #148]	; (8000b64 <HAL_GPIO_Init+0x34c>)
 8000ad0:	689b      	ldr	r3, [r3, #8]
 8000ad2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	43db      	mvns	r3, r3
 8000ad8:	693a      	ldr	r2, [r7, #16]
 8000ada:	4013      	ands	r3, r2
 8000adc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d003      	beq.n	8000af2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000aea:	693a      	ldr	r2, [r7, #16]
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	4313      	orrs	r3, r2
 8000af0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000af2:	4a1c      	ldr	r2, [pc, #112]	; (8000b64 <HAL_GPIO_Init+0x34c>)
 8000af4:	693b      	ldr	r3, [r7, #16]
 8000af6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000af8:	4b1a      	ldr	r3, [pc, #104]	; (8000b64 <HAL_GPIO_Init+0x34c>)
 8000afa:	68db      	ldr	r3, [r3, #12]
 8000afc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	43db      	mvns	r3, r3
 8000b02:	693a      	ldr	r2, [r7, #16]
 8000b04:	4013      	ands	r3, r2
 8000b06:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d003      	beq.n	8000b1c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000b14:	693a      	ldr	r2, [r7, #16]
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	4313      	orrs	r3, r2
 8000b1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000b1c:	4a11      	ldr	r2, [pc, #68]	; (8000b64 <HAL_GPIO_Init+0x34c>)
 8000b1e:	693b      	ldr	r3, [r7, #16]
 8000b20:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	3301      	adds	r3, #1
 8000b26:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	f47f ae78 	bne.w	8000828 <HAL_GPIO_Init+0x10>
  }
}
 8000b38:	bf00      	nop
 8000b3a:	371c      	adds	r7, #28
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr
 8000b44:	40021000 	.word	0x40021000
 8000b48:	40010000 	.word	0x40010000
 8000b4c:	48000400 	.word	0x48000400
 8000b50:	48000800 	.word	0x48000800
 8000b54:	48000c00 	.word	0x48000c00
 8000b58:	48001000 	.word	0x48001000
 8000b5c:	48001400 	.word	0x48001400
 8000b60:	48001800 	.word	0x48001800
 8000b64:	40010400 	.word	0x40010400

08000b68 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b087      	sub	sp, #28
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b72:	2300      	movs	r3, #0
 8000b74:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8000b76:	e0cd      	b.n	8000d14 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8000b78:	2201      	movs	r2, #1
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b80:	683a      	ldr	r2, [r7, #0]
 8000b82:	4013      	ands	r3, r2
 8000b84:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8000b86:	693b      	ldr	r3, [r7, #16]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	f000 80c0 	beq.w	8000d0e <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8000b8e:	4a68      	ldr	r2, [pc, #416]	; (8000d30 <HAL_GPIO_DeInit+0x1c8>)
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	089b      	lsrs	r3, r3, #2
 8000b94:	3302      	adds	r3, #2
 8000b96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b9a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	f003 0303 	and.w	r3, r3, #3
 8000ba2:	009b      	lsls	r3, r3, #2
 8000ba4:	220f      	movs	r2, #15
 8000ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8000baa:	68fa      	ldr	r2, [r7, #12]
 8000bac:	4013      	ands	r3, r2
 8000bae:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000bb6:	d025      	beq.n	8000c04 <HAL_GPIO_DeInit+0x9c>
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	4a5e      	ldr	r2, [pc, #376]	; (8000d34 <HAL_GPIO_DeInit+0x1cc>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d01f      	beq.n	8000c00 <HAL_GPIO_DeInit+0x98>
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	4a5d      	ldr	r2, [pc, #372]	; (8000d38 <HAL_GPIO_DeInit+0x1d0>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d019      	beq.n	8000bfc <HAL_GPIO_DeInit+0x94>
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	4a5c      	ldr	r2, [pc, #368]	; (8000d3c <HAL_GPIO_DeInit+0x1d4>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d013      	beq.n	8000bf8 <HAL_GPIO_DeInit+0x90>
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	4a5b      	ldr	r2, [pc, #364]	; (8000d40 <HAL_GPIO_DeInit+0x1d8>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d00d      	beq.n	8000bf4 <HAL_GPIO_DeInit+0x8c>
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	4a5a      	ldr	r2, [pc, #360]	; (8000d44 <HAL_GPIO_DeInit+0x1dc>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d007      	beq.n	8000bf0 <HAL_GPIO_DeInit+0x88>
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	4a59      	ldr	r2, [pc, #356]	; (8000d48 <HAL_GPIO_DeInit+0x1e0>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d101      	bne.n	8000bec <HAL_GPIO_DeInit+0x84>
 8000be8:	2306      	movs	r3, #6
 8000bea:	e00c      	b.n	8000c06 <HAL_GPIO_DeInit+0x9e>
 8000bec:	2307      	movs	r3, #7
 8000bee:	e00a      	b.n	8000c06 <HAL_GPIO_DeInit+0x9e>
 8000bf0:	2305      	movs	r3, #5
 8000bf2:	e008      	b.n	8000c06 <HAL_GPIO_DeInit+0x9e>
 8000bf4:	2304      	movs	r3, #4
 8000bf6:	e006      	b.n	8000c06 <HAL_GPIO_DeInit+0x9e>
 8000bf8:	2303      	movs	r3, #3
 8000bfa:	e004      	b.n	8000c06 <HAL_GPIO_DeInit+0x9e>
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	e002      	b.n	8000c06 <HAL_GPIO_DeInit+0x9e>
 8000c00:	2301      	movs	r3, #1
 8000c02:	e000      	b.n	8000c06 <HAL_GPIO_DeInit+0x9e>
 8000c04:	2300      	movs	r3, #0
 8000c06:	697a      	ldr	r2, [r7, #20]
 8000c08:	f002 0203 	and.w	r2, r2, #3
 8000c0c:	0092      	lsls	r2, r2, #2
 8000c0e:	4093      	lsls	r3, r2
 8000c10:	68fa      	ldr	r2, [r7, #12]
 8000c12:	429a      	cmp	r2, r3
 8000c14:	d132      	bne.n	8000c7c <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8000c16:	4b4d      	ldr	r3, [pc, #308]	; (8000d4c <HAL_GPIO_DeInit+0x1e4>)
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	693b      	ldr	r3, [r7, #16]
 8000c1c:	43db      	mvns	r3, r3
 8000c1e:	494b      	ldr	r1, [pc, #300]	; (8000d4c <HAL_GPIO_DeInit+0x1e4>)
 8000c20:	4013      	ands	r3, r2
 8000c22:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8000c24:	4b49      	ldr	r3, [pc, #292]	; (8000d4c <HAL_GPIO_DeInit+0x1e4>)
 8000c26:	685a      	ldr	r2, [r3, #4]
 8000c28:	693b      	ldr	r3, [r7, #16]
 8000c2a:	43db      	mvns	r3, r3
 8000c2c:	4947      	ldr	r1, [pc, #284]	; (8000d4c <HAL_GPIO_DeInit+0x1e4>)
 8000c2e:	4013      	ands	r3, r2
 8000c30:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8000c32:	4b46      	ldr	r3, [pc, #280]	; (8000d4c <HAL_GPIO_DeInit+0x1e4>)
 8000c34:	689a      	ldr	r2, [r3, #8]
 8000c36:	693b      	ldr	r3, [r7, #16]
 8000c38:	43db      	mvns	r3, r3
 8000c3a:	4944      	ldr	r1, [pc, #272]	; (8000d4c <HAL_GPIO_DeInit+0x1e4>)
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8000c40:	4b42      	ldr	r3, [pc, #264]	; (8000d4c <HAL_GPIO_DeInit+0x1e4>)
 8000c42:	68da      	ldr	r2, [r3, #12]
 8000c44:	693b      	ldr	r3, [r7, #16]
 8000c46:	43db      	mvns	r3, r3
 8000c48:	4940      	ldr	r1, [pc, #256]	; (8000d4c <HAL_GPIO_DeInit+0x1e4>)
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	f003 0303 	and.w	r3, r3, #3
 8000c54:	009b      	lsls	r3, r3, #2
 8000c56:	220f      	movs	r2, #15
 8000c58:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8000c5e:	4a34      	ldr	r2, [pc, #208]	; (8000d30 <HAL_GPIO_DeInit+0x1c8>)
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	089b      	lsrs	r3, r3, #2
 8000c64:	3302      	adds	r3, #2
 8000c66:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	43da      	mvns	r2, r3
 8000c6e:	4830      	ldr	r0, [pc, #192]	; (8000d30 <HAL_GPIO_DeInit+0x1c8>)
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	089b      	lsrs	r3, r3, #2
 8000c74:	400a      	ands	r2, r1
 8000c76:	3302      	adds	r3, #2
 8000c78:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	005b      	lsls	r3, r3, #1
 8000c84:	2103      	movs	r1, #3
 8000c86:	fa01 f303 	lsl.w	r3, r1, r3
 8000c8a:	431a      	orrs	r2, r3
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	08da      	lsrs	r2, r3, #3
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	3208      	adds	r2, #8
 8000c98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	f003 0307 	and.w	r3, r3, #7
 8000ca2:	009b      	lsls	r3, r3, #2
 8000ca4:	220f      	movs	r2, #15
 8000ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8000caa:	43db      	mvns	r3, r3
 8000cac:	697a      	ldr	r2, [r7, #20]
 8000cae:	08d2      	lsrs	r2, r2, #3
 8000cb0:	4019      	ands	r1, r3
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	3208      	adds	r2, #8
 8000cb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	689a      	ldr	r2, [r3, #8]
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	005b      	lsls	r3, r3, #1
 8000cc2:	2103      	movs	r1, #3
 8000cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc8:	43db      	mvns	r3, r3
 8000cca:	401a      	ands	r2, r3
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	685a      	ldr	r2, [r3, #4]
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cdc:	43db      	mvns	r3, r3
 8000cde:	401a      	ands	r2, r3
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	68da      	ldr	r2, [r3, #12]
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	005b      	lsls	r3, r3, #1
 8000cec:	2103      	movs	r1, #3
 8000cee:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf2:	43db      	mvns	r3, r3
 8000cf4:	401a      	ands	r2, r3
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cfe:	2101      	movs	r1, #1
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	fa01 f303 	lsl.w	r3, r1, r3
 8000d06:	43db      	mvns	r3, r3
 8000d08:	401a      	ands	r2, r3
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	3301      	adds	r3, #1
 8000d12:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8000d14:	683a      	ldr	r2, [r7, #0]
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	fa22 f303 	lsr.w	r3, r2, r3
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	f47f af2b 	bne.w	8000b78 <HAL_GPIO_DeInit+0x10>
  }
}
 8000d22:	bf00      	nop
 8000d24:	371c      	adds	r7, #28
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	40010000 	.word	0x40010000
 8000d34:	48000400 	.word	0x48000400
 8000d38:	48000800 	.word	0x48000800
 8000d3c:	48000c00 	.word	0x48000c00
 8000d40:	48001000 	.word	0x48001000
 8000d44:	48001400 	.word	0x48001400
 8000d48:	48001800 	.word	0x48001800
 8000d4c:	40010400 	.word	0x40010400

08000d50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	460b      	mov	r3, r1
 8000d5a:	807b      	strh	r3, [r7, #2]
 8000d5c:	4613      	mov	r3, r2
 8000d5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d60:	787b      	ldrb	r3, [r7, #1]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d003      	beq.n	8000d6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d66:	887a      	ldrh	r2, [r7, #2]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d6c:	e002      	b.n	8000d74 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d6e:	887a      	ldrh	r2, [r7, #2]
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d74:	bf00      	nop
 8000d76:	370c      	adds	r7, #12
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr

08000d80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d101      	bne.n	8000d92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e081      	b.n	8000e96 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d106      	bne.n	8000dac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2200      	movs	r2, #0
 8000da2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000da6:	6878      	ldr	r0, [r7, #4]
 8000da8:	f003 fcde 	bl	8004768 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2224      	movs	r2, #36	; 0x24
 8000db0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f022 0201 	bic.w	r2, r2, #1
 8000dc2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	685a      	ldr	r2, [r3, #4]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000dd0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	689a      	ldr	r2, [r3, #8]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000de0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	68db      	ldr	r3, [r3, #12]
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	d107      	bne.n	8000dfa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	689a      	ldr	r2, [r3, #8]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	e006      	b.n	8000e08 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	689a      	ldr	r2, [r3, #8]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000e06:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	2b02      	cmp	r3, #2
 8000e0e:	d104      	bne.n	8000e1a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e18:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	687a      	ldr	r2, [r7, #4]
 8000e22:	6812      	ldr	r2, [r2, #0]
 8000e24:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e2c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	68da      	ldr	r2, [r3, #12]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000e3c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	691a      	ldr	r2, [r3, #16]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	695b      	ldr	r3, [r3, #20]
 8000e46:	ea42 0103 	orr.w	r1, r2, r3
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	699b      	ldr	r3, [r3, #24]
 8000e4e:	021a      	lsls	r2, r3, #8
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	430a      	orrs	r2, r1
 8000e56:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	69d9      	ldr	r1, [r3, #28]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6a1a      	ldr	r2, [r3, #32]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	430a      	orrs	r2, r1
 8000e66:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f042 0201 	orr.w	r2, r2, #1
 8000e76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2220      	movs	r2, #32
 8000e82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2200      	movs	r2, #0
 8000e8a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2200      	movs	r2, #0
 8000e90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000e94:	2300      	movs	r3, #0
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b082      	sub	sp, #8
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d101      	bne.n	8000eb0 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8000eac:	2301      	movs	r3, #1
 8000eae:	e021      	b.n	8000ef4 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2224      	movs	r2, #36	; 0x24
 8000eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f022 0201 	bic.w	r2, r2, #1
 8000ec6:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f003 fc91 	bl	80047f0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2200      	movs	r2, #0
 8000ee0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2200      	movs	r2, #0
 8000eee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8000ef2:	2300      	movs	r3, #0
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}

08000efc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b088      	sub	sp, #32
 8000f00:	af02      	add	r7, sp, #8
 8000f02:	60f8      	str	r0, [r7, #12]
 8000f04:	4608      	mov	r0, r1
 8000f06:	4611      	mov	r1, r2
 8000f08:	461a      	mov	r2, r3
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	817b      	strh	r3, [r7, #10]
 8000f0e:	460b      	mov	r3, r1
 8000f10:	813b      	strh	r3, [r7, #8]
 8000f12:	4613      	mov	r3, r2
 8000f14:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	2b20      	cmp	r3, #32
 8000f20:	f040 80f9 	bne.w	8001116 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8000f24:	6a3b      	ldr	r3, [r7, #32]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d002      	beq.n	8000f30 <HAL_I2C_Mem_Write+0x34>
 8000f2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d105      	bne.n	8000f3c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f36:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	e0ed      	b.n	8001118 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d101      	bne.n	8000f4a <HAL_I2C_Mem_Write+0x4e>
 8000f46:	2302      	movs	r3, #2
 8000f48:	e0e6      	b.n	8001118 <HAL_I2C_Mem_Write+0x21c>
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000f52:	f7ff fb21 	bl	8000598 <HAL_GetTick>
 8000f56:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	9300      	str	r3, [sp, #0]
 8000f5c:	2319      	movs	r3, #25
 8000f5e:	2201      	movs	r2, #1
 8000f60:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f64:	68f8      	ldr	r0, [r7, #12]
 8000f66:	f000 fac3 	bl	80014f0 <I2C_WaitOnFlagUntilTimeout>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8000f70:	2301      	movs	r3, #1
 8000f72:	e0d1      	b.n	8001118 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	2221      	movs	r2, #33	; 0x21
 8000f78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	2240      	movs	r2, #64	; 0x40
 8000f80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	2200      	movs	r2, #0
 8000f88:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	6a3a      	ldr	r2, [r7, #32]
 8000f8e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000f94:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	2200      	movs	r2, #0
 8000f9a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000f9c:	88f8      	ldrh	r0, [r7, #6]
 8000f9e:	893a      	ldrh	r2, [r7, #8]
 8000fa0:	8979      	ldrh	r1, [r7, #10]
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	9301      	str	r3, [sp, #4]
 8000fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fa8:	9300      	str	r3, [sp, #0]
 8000faa:	4603      	mov	r3, r0
 8000fac:	68f8      	ldr	r0, [r7, #12]
 8000fae:	f000 f9d3 	bl	8001358 <I2C_RequestMemoryWrite>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d005      	beq.n	8000fc4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	e0a9      	b.n	8001118 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fc8:	b29b      	uxth	r3, r3
 8000fca:	2bff      	cmp	r3, #255	; 0xff
 8000fcc:	d90e      	bls.n	8000fec <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	22ff      	movs	r2, #255	; 0xff
 8000fd2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fd8:	b2da      	uxtb	r2, r3
 8000fda:	8979      	ldrh	r1, [r7, #10]
 8000fdc:	2300      	movs	r3, #0
 8000fde:	9300      	str	r3, [sp, #0]
 8000fe0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000fe4:	68f8      	ldr	r0, [r7, #12]
 8000fe6:	f000 fba5 	bl	8001734 <I2C_TransferConfig>
 8000fea:	e00f      	b.n	800100c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ff0:	b29a      	uxth	r2, r3
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ffa:	b2da      	uxtb	r2, r3
 8000ffc:	8979      	ldrh	r1, [r7, #10]
 8000ffe:	2300      	movs	r3, #0
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001006:	68f8      	ldr	r0, [r7, #12]
 8001008:	f000 fb94 	bl	8001734 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800100c:	697a      	ldr	r2, [r7, #20]
 800100e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001010:	68f8      	ldr	r0, [r7, #12]
 8001012:	f000 faad 	bl	8001570 <I2C_WaitOnTXISFlagUntilTimeout>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800101c:	2301      	movs	r3, #1
 800101e:	e07b      	b.n	8001118 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001024:	781a      	ldrb	r2, [r3, #0]
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001030:	1c5a      	adds	r2, r3, #1
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800103a:	b29b      	uxth	r3, r3
 800103c:	3b01      	subs	r3, #1
 800103e:	b29a      	uxth	r2, r3
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001048:	3b01      	subs	r3, #1
 800104a:	b29a      	uxth	r2, r3
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001054:	b29b      	uxth	r3, r3
 8001056:	2b00      	cmp	r3, #0
 8001058:	d034      	beq.n	80010c4 <HAL_I2C_Mem_Write+0x1c8>
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800105e:	2b00      	cmp	r3, #0
 8001060:	d130      	bne.n	80010c4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	9300      	str	r3, [sp, #0]
 8001066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001068:	2200      	movs	r2, #0
 800106a:	2180      	movs	r1, #128	; 0x80
 800106c:	68f8      	ldr	r0, [r7, #12]
 800106e:	f000 fa3f 	bl	80014f0 <I2C_WaitOnFlagUntilTimeout>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001078:	2301      	movs	r3, #1
 800107a:	e04d      	b.n	8001118 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001080:	b29b      	uxth	r3, r3
 8001082:	2bff      	cmp	r3, #255	; 0xff
 8001084:	d90e      	bls.n	80010a4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	22ff      	movs	r2, #255	; 0xff
 800108a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001090:	b2da      	uxtb	r2, r3
 8001092:	8979      	ldrh	r1, [r7, #10]
 8001094:	2300      	movs	r3, #0
 8001096:	9300      	str	r3, [sp, #0]
 8001098:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800109c:	68f8      	ldr	r0, [r7, #12]
 800109e:	f000 fb49 	bl	8001734 <I2C_TransferConfig>
 80010a2:	e00f      	b.n	80010c4 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010a8:	b29a      	uxth	r2, r3
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010b2:	b2da      	uxtb	r2, r3
 80010b4:	8979      	ldrh	r1, [r7, #10]
 80010b6:	2300      	movs	r3, #0
 80010b8:	9300      	str	r3, [sp, #0]
 80010ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80010be:	68f8      	ldr	r0, [r7, #12]
 80010c0:	f000 fb38 	bl	8001734 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010c8:	b29b      	uxth	r3, r3
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d19e      	bne.n	800100c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80010ce:	697a      	ldr	r2, [r7, #20]
 80010d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80010d2:	68f8      	ldr	r0, [r7, #12]
 80010d4:	f000 fa8c 	bl	80015f0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	e01a      	b.n	8001118 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	2220      	movs	r2, #32
 80010e8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	6859      	ldr	r1, [r3, #4]
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	4b0a      	ldr	r3, [pc, #40]	; (8001120 <HAL_I2C_Mem_Write+0x224>)
 80010f6:	400b      	ands	r3, r1
 80010f8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	2220      	movs	r2, #32
 80010fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	2200      	movs	r2, #0
 8001106:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	2200      	movs	r2, #0
 800110e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001112:	2300      	movs	r3, #0
 8001114:	e000      	b.n	8001118 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001116:	2302      	movs	r3, #2
  }
}
 8001118:	4618      	mov	r0, r3
 800111a:	3718      	adds	r7, #24
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	fe00e800 	.word	0xfe00e800

08001124 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b088      	sub	sp, #32
 8001128:	af02      	add	r7, sp, #8
 800112a:	60f8      	str	r0, [r7, #12]
 800112c:	4608      	mov	r0, r1
 800112e:	4611      	mov	r1, r2
 8001130:	461a      	mov	r2, r3
 8001132:	4603      	mov	r3, r0
 8001134:	817b      	strh	r3, [r7, #10]
 8001136:	460b      	mov	r3, r1
 8001138:	813b      	strh	r3, [r7, #8]
 800113a:	4613      	mov	r3, r2
 800113c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001144:	b2db      	uxtb	r3, r3
 8001146:	2b20      	cmp	r3, #32
 8001148:	f040 80fd 	bne.w	8001346 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800114c:	6a3b      	ldr	r3, [r7, #32]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d002      	beq.n	8001158 <HAL_I2C_Mem_Read+0x34>
 8001152:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001154:	2b00      	cmp	r3, #0
 8001156:	d105      	bne.n	8001164 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800115e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001160:	2301      	movs	r3, #1
 8001162:	e0f1      	b.n	8001348 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800116a:	2b01      	cmp	r3, #1
 800116c:	d101      	bne.n	8001172 <HAL_I2C_Mem_Read+0x4e>
 800116e:	2302      	movs	r3, #2
 8001170:	e0ea      	b.n	8001348 <HAL_I2C_Mem_Read+0x224>
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	2201      	movs	r2, #1
 8001176:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800117a:	f7ff fa0d 	bl	8000598 <HAL_GetTick>
 800117e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	9300      	str	r3, [sp, #0]
 8001184:	2319      	movs	r3, #25
 8001186:	2201      	movs	r2, #1
 8001188:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800118c:	68f8      	ldr	r0, [r7, #12]
 800118e:	f000 f9af 	bl	80014f0 <I2C_WaitOnFlagUntilTimeout>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001198:	2301      	movs	r3, #1
 800119a:	e0d5      	b.n	8001348 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	2222      	movs	r2, #34	; 0x22
 80011a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	2240      	movs	r2, #64	; 0x40
 80011a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	2200      	movs	r2, #0
 80011b0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	6a3a      	ldr	r2, [r7, #32]
 80011b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80011bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	2200      	movs	r2, #0
 80011c2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80011c4:	88f8      	ldrh	r0, [r7, #6]
 80011c6:	893a      	ldrh	r2, [r7, #8]
 80011c8:	8979      	ldrh	r1, [r7, #10]
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	9301      	str	r3, [sp, #4]
 80011ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011d0:	9300      	str	r3, [sp, #0]
 80011d2:	4603      	mov	r3, r0
 80011d4:	68f8      	ldr	r0, [r7, #12]
 80011d6:	f000 f913 	bl	8001400 <I2C_RequestMemoryRead>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d005      	beq.n	80011ec <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	2200      	movs	r2, #0
 80011e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80011e8:	2301      	movs	r3, #1
 80011ea:	e0ad      	b.n	8001348 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011f0:	b29b      	uxth	r3, r3
 80011f2:	2bff      	cmp	r3, #255	; 0xff
 80011f4:	d90e      	bls.n	8001214 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	22ff      	movs	r2, #255	; 0xff
 80011fa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001200:	b2da      	uxtb	r2, r3
 8001202:	8979      	ldrh	r1, [r7, #10]
 8001204:	4b52      	ldr	r3, [pc, #328]	; (8001350 <HAL_I2C_Mem_Read+0x22c>)
 8001206:	9300      	str	r3, [sp, #0]
 8001208:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800120c:	68f8      	ldr	r0, [r7, #12]
 800120e:	f000 fa91 	bl	8001734 <I2C_TransferConfig>
 8001212:	e00f      	b.n	8001234 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001218:	b29a      	uxth	r2, r3
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001222:	b2da      	uxtb	r2, r3
 8001224:	8979      	ldrh	r1, [r7, #10]
 8001226:	4b4a      	ldr	r3, [pc, #296]	; (8001350 <HAL_I2C_Mem_Read+0x22c>)
 8001228:	9300      	str	r3, [sp, #0]
 800122a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800122e:	68f8      	ldr	r0, [r7, #12]
 8001230:	f000 fa80 	bl	8001734 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	9300      	str	r3, [sp, #0]
 8001238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800123a:	2200      	movs	r2, #0
 800123c:	2104      	movs	r1, #4
 800123e:	68f8      	ldr	r0, [r7, #12]
 8001240:	f000 f956 	bl	80014f0 <I2C_WaitOnFlagUntilTimeout>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e07c      	b.n	8001348 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001258:	b2d2      	uxtb	r2, r2
 800125a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001260:	1c5a      	adds	r2, r3, #1
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800126a:	3b01      	subs	r3, #1
 800126c:	b29a      	uxth	r2, r3
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001276:	b29b      	uxth	r3, r3
 8001278:	3b01      	subs	r3, #1
 800127a:	b29a      	uxth	r2, r3
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001284:	b29b      	uxth	r3, r3
 8001286:	2b00      	cmp	r3, #0
 8001288:	d034      	beq.n	80012f4 <HAL_I2C_Mem_Read+0x1d0>
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800128e:	2b00      	cmp	r3, #0
 8001290:	d130      	bne.n	80012f4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	9300      	str	r3, [sp, #0]
 8001296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001298:	2200      	movs	r2, #0
 800129a:	2180      	movs	r1, #128	; 0x80
 800129c:	68f8      	ldr	r0, [r7, #12]
 800129e:	f000 f927 	bl	80014f0 <I2C_WaitOnFlagUntilTimeout>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	e04d      	b.n	8001348 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012b0:	b29b      	uxth	r3, r3
 80012b2:	2bff      	cmp	r3, #255	; 0xff
 80012b4:	d90e      	bls.n	80012d4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	22ff      	movs	r2, #255	; 0xff
 80012ba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012c0:	b2da      	uxtb	r2, r3
 80012c2:	8979      	ldrh	r1, [r7, #10]
 80012c4:	2300      	movs	r3, #0
 80012c6:	9300      	str	r3, [sp, #0]
 80012c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012cc:	68f8      	ldr	r0, [r7, #12]
 80012ce:	f000 fa31 	bl	8001734 <I2C_TransferConfig>
 80012d2:	e00f      	b.n	80012f4 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012d8:	b29a      	uxth	r2, r3
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012e2:	b2da      	uxtb	r2, r3
 80012e4:	8979      	ldrh	r1, [r7, #10]
 80012e6:	2300      	movs	r3, #0
 80012e8:	9300      	str	r3, [sp, #0]
 80012ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80012ee:	68f8      	ldr	r0, [r7, #12]
 80012f0:	f000 fa20 	bl	8001734 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d19a      	bne.n	8001234 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012fe:	697a      	ldr	r2, [r7, #20]
 8001300:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001302:	68f8      	ldr	r0, [r7, #12]
 8001304:	f000 f974 	bl	80015f0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e01a      	b.n	8001348 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	2220      	movs	r2, #32
 8001318:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	6859      	ldr	r1, [r3, #4]
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	4b0b      	ldr	r3, [pc, #44]	; (8001354 <HAL_I2C_Mem_Read+0x230>)
 8001326:	400b      	ands	r3, r1
 8001328:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	2220      	movs	r2, #32
 800132e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	2200      	movs	r2, #0
 8001336:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	2200      	movs	r2, #0
 800133e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001342:	2300      	movs	r3, #0
 8001344:	e000      	b.n	8001348 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001346:	2302      	movs	r3, #2
  }
}
 8001348:	4618      	mov	r0, r3
 800134a:	3718      	adds	r7, #24
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	80002400 	.word	0x80002400
 8001354:	fe00e800 	.word	0xfe00e800

08001358 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b086      	sub	sp, #24
 800135c:	af02      	add	r7, sp, #8
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	4608      	mov	r0, r1
 8001362:	4611      	mov	r1, r2
 8001364:	461a      	mov	r2, r3
 8001366:	4603      	mov	r3, r0
 8001368:	817b      	strh	r3, [r7, #10]
 800136a:	460b      	mov	r3, r1
 800136c:	813b      	strh	r3, [r7, #8]
 800136e:	4613      	mov	r3, r2
 8001370:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001372:	88fb      	ldrh	r3, [r7, #6]
 8001374:	b2da      	uxtb	r2, r3
 8001376:	8979      	ldrh	r1, [r7, #10]
 8001378:	4b20      	ldr	r3, [pc, #128]	; (80013fc <I2C_RequestMemoryWrite+0xa4>)
 800137a:	9300      	str	r3, [sp, #0]
 800137c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001380:	68f8      	ldr	r0, [r7, #12]
 8001382:	f000 f9d7 	bl	8001734 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001386:	69fa      	ldr	r2, [r7, #28]
 8001388:	69b9      	ldr	r1, [r7, #24]
 800138a:	68f8      	ldr	r0, [r7, #12]
 800138c:	f000 f8f0 	bl	8001570 <I2C_WaitOnTXISFlagUntilTimeout>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e02c      	b.n	80013f4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800139a:	88fb      	ldrh	r3, [r7, #6]
 800139c:	2b01      	cmp	r3, #1
 800139e:	d105      	bne.n	80013ac <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80013a0:	893b      	ldrh	r3, [r7, #8]
 80013a2:	b2da      	uxtb	r2, r3
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	629a      	str	r2, [r3, #40]	; 0x28
 80013aa:	e015      	b.n	80013d8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80013ac:	893b      	ldrh	r3, [r7, #8]
 80013ae:	0a1b      	lsrs	r3, r3, #8
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	b2da      	uxtb	r2, r3
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80013ba:	69fa      	ldr	r2, [r7, #28]
 80013bc:	69b9      	ldr	r1, [r7, #24]
 80013be:	68f8      	ldr	r0, [r7, #12]
 80013c0:	f000 f8d6 	bl	8001570 <I2C_WaitOnTXISFlagUntilTimeout>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e012      	b.n	80013f4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80013ce:	893b      	ldrh	r3, [r7, #8]
 80013d0:	b2da      	uxtb	r2, r3
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	9300      	str	r3, [sp, #0]
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	2200      	movs	r2, #0
 80013e0:	2180      	movs	r1, #128	; 0x80
 80013e2:	68f8      	ldr	r0, [r7, #12]
 80013e4:	f000 f884 	bl	80014f0 <I2C_WaitOnFlagUntilTimeout>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e000      	b.n	80013f4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80013f2:	2300      	movs	r3, #0
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3710      	adds	r7, #16
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	80002000 	.word	0x80002000

08001400 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b086      	sub	sp, #24
 8001404:	af02      	add	r7, sp, #8
 8001406:	60f8      	str	r0, [r7, #12]
 8001408:	4608      	mov	r0, r1
 800140a:	4611      	mov	r1, r2
 800140c:	461a      	mov	r2, r3
 800140e:	4603      	mov	r3, r0
 8001410:	817b      	strh	r3, [r7, #10]
 8001412:	460b      	mov	r3, r1
 8001414:	813b      	strh	r3, [r7, #8]
 8001416:	4613      	mov	r3, r2
 8001418:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800141a:	88fb      	ldrh	r3, [r7, #6]
 800141c:	b2da      	uxtb	r2, r3
 800141e:	8979      	ldrh	r1, [r7, #10]
 8001420:	4b20      	ldr	r3, [pc, #128]	; (80014a4 <I2C_RequestMemoryRead+0xa4>)
 8001422:	9300      	str	r3, [sp, #0]
 8001424:	2300      	movs	r3, #0
 8001426:	68f8      	ldr	r0, [r7, #12]
 8001428:	f000 f984 	bl	8001734 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800142c:	69fa      	ldr	r2, [r7, #28]
 800142e:	69b9      	ldr	r1, [r7, #24]
 8001430:	68f8      	ldr	r0, [r7, #12]
 8001432:	f000 f89d 	bl	8001570 <I2C_WaitOnTXISFlagUntilTimeout>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	e02c      	b.n	800149a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001440:	88fb      	ldrh	r3, [r7, #6]
 8001442:	2b01      	cmp	r3, #1
 8001444:	d105      	bne.n	8001452 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001446:	893b      	ldrh	r3, [r7, #8]
 8001448:	b2da      	uxtb	r2, r3
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	629a      	str	r2, [r3, #40]	; 0x28
 8001450:	e015      	b.n	800147e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001452:	893b      	ldrh	r3, [r7, #8]
 8001454:	0a1b      	lsrs	r3, r3, #8
 8001456:	b29b      	uxth	r3, r3
 8001458:	b2da      	uxtb	r2, r3
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001460:	69fa      	ldr	r2, [r7, #28]
 8001462:	69b9      	ldr	r1, [r7, #24]
 8001464:	68f8      	ldr	r0, [r7, #12]
 8001466:	f000 f883 	bl	8001570 <I2C_WaitOnTXISFlagUntilTimeout>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	e012      	b.n	800149a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001474:	893b      	ldrh	r3, [r7, #8]
 8001476:	b2da      	uxtb	r2, r3
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	9300      	str	r3, [sp, #0]
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	2200      	movs	r2, #0
 8001486:	2140      	movs	r1, #64	; 0x40
 8001488:	68f8      	ldr	r0, [r7, #12]
 800148a:	f000 f831 	bl	80014f0 <I2C_WaitOnFlagUntilTimeout>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	e000      	b.n	800149a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001498:	2300      	movs	r3, #0
}
 800149a:	4618      	mov	r0, r3
 800149c:	3710      	adds	r7, #16
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	80002000 	.word	0x80002000

080014a8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	699b      	ldr	r3, [r3, #24]
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d103      	bne.n	80014c6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	2200      	movs	r2, #0
 80014c4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	699b      	ldr	r3, [r3, #24]
 80014cc:	f003 0301 	and.w	r3, r3, #1
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d007      	beq.n	80014e4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	699a      	ldr	r2, [r3, #24]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f042 0201 	orr.w	r2, r2, #1
 80014e2:	619a      	str	r2, [r3, #24]
  }
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	603b      	str	r3, [r7, #0]
 80014fc:	4613      	mov	r3, r2
 80014fe:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001500:	e022      	b.n	8001548 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001508:	d01e      	beq.n	8001548 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800150a:	f7ff f845 	bl	8000598 <HAL_GetTick>
 800150e:	4602      	mov	r2, r0
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	683a      	ldr	r2, [r7, #0]
 8001516:	429a      	cmp	r2, r3
 8001518:	d302      	bcc.n	8001520 <I2C_WaitOnFlagUntilTimeout+0x30>
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d113      	bne.n	8001548 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001524:	f043 0220 	orr.w	r2, r3, #32
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	2220      	movs	r2, #32
 8001530:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	2200      	movs	r2, #0
 8001538:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	2200      	movs	r2, #0
 8001540:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	e00f      	b.n	8001568 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	699a      	ldr	r2, [r3, #24]
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	4013      	ands	r3, r2
 8001552:	68ba      	ldr	r2, [r7, #8]
 8001554:	429a      	cmp	r2, r3
 8001556:	bf0c      	ite	eq
 8001558:	2301      	moveq	r3, #1
 800155a:	2300      	movne	r3, #0
 800155c:	b2db      	uxtb	r3, r3
 800155e:	461a      	mov	r2, r3
 8001560:	79fb      	ldrb	r3, [r7, #7]
 8001562:	429a      	cmp	r2, r3
 8001564:	d0cd      	beq.n	8001502 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001566:	2300      	movs	r3, #0
}
 8001568:	4618      	mov	r0, r3
 800156a:	3710      	adds	r7, #16
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}

08001570 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800157c:	e02c      	b.n	80015d8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	68b9      	ldr	r1, [r7, #8]
 8001582:	68f8      	ldr	r0, [r7, #12]
 8001584:	f000 f870 	bl	8001668 <I2C_IsAcknowledgeFailed>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e02a      	b.n	80015e8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001598:	d01e      	beq.n	80015d8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800159a:	f7fe fffd 	bl	8000598 <HAL_GetTick>
 800159e:	4602      	mov	r2, r0
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	68ba      	ldr	r2, [r7, #8]
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d302      	bcc.n	80015b0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d113      	bne.n	80015d8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b4:	f043 0220 	orr.w	r2, r3, #32
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	2220      	movs	r2, #32
 80015c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	2200      	movs	r2, #0
 80015c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	2200      	movs	r2, #0
 80015d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e007      	b.n	80015e8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	699b      	ldr	r3, [r3, #24]
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d1cb      	bne.n	800157e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80015e6:	2300      	movs	r3, #0
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3710      	adds	r7, #16
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80015fc:	e028      	b.n	8001650 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	68b9      	ldr	r1, [r7, #8]
 8001602:	68f8      	ldr	r0, [r7, #12]
 8001604:	f000 f830 	bl	8001668 <I2C_IsAcknowledgeFailed>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e026      	b.n	8001660 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001612:	f7fe ffc1 	bl	8000598 <HAL_GetTick>
 8001616:	4602      	mov	r2, r0
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	68ba      	ldr	r2, [r7, #8]
 800161e:	429a      	cmp	r2, r3
 8001620:	d302      	bcc.n	8001628 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d113      	bne.n	8001650 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162c:	f043 0220 	orr.w	r2, r3, #32
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	2220      	movs	r2, #32
 8001638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	2200      	movs	r2, #0
 8001640:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	2200      	movs	r2, #0
 8001648:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e007      	b.n	8001660 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	699b      	ldr	r3, [r3, #24]
 8001656:	f003 0320 	and.w	r3, r3, #32
 800165a:	2b20      	cmp	r3, #32
 800165c:	d1cf      	bne.n	80015fe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800165e:	2300      	movs	r3, #0
}
 8001660:	4618      	mov	r0, r3
 8001662:	3710      	adds	r7, #16
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	60b9      	str	r1, [r7, #8]
 8001672:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	699b      	ldr	r3, [r3, #24]
 800167a:	f003 0310 	and.w	r3, r3, #16
 800167e:	2b10      	cmp	r3, #16
 8001680:	d151      	bne.n	8001726 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001682:	e022      	b.n	80016ca <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800168a:	d01e      	beq.n	80016ca <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800168c:	f7fe ff84 	bl	8000598 <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	68ba      	ldr	r2, [r7, #8]
 8001698:	429a      	cmp	r2, r3
 800169a:	d302      	bcc.n	80016a2 <I2C_IsAcknowledgeFailed+0x3a>
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d113      	bne.n	80016ca <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a6:	f043 0220 	orr.w	r2, r3, #32
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	2220      	movs	r2, #32
 80016b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	2200      	movs	r2, #0
 80016ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	2200      	movs	r2, #0
 80016c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e02e      	b.n	8001728 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	f003 0320 	and.w	r3, r3, #32
 80016d4:	2b20      	cmp	r3, #32
 80016d6:	d1d5      	bne.n	8001684 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2210      	movs	r2, #16
 80016de:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2220      	movs	r2, #32
 80016e6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80016e8:	68f8      	ldr	r0, [r7, #12]
 80016ea:	f7ff fedd 	bl	80014a8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	6859      	ldr	r1, [r3, #4]
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	4b0d      	ldr	r3, [pc, #52]	; (8001730 <I2C_IsAcknowledgeFailed+0xc8>)
 80016fa:	400b      	ands	r3, r1
 80016fc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001702:	f043 0204 	orr.w	r2, r3, #4
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	2220      	movs	r2, #32
 800170e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	2200      	movs	r2, #0
 8001716:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	2200      	movs	r2, #0
 800171e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e000      	b.n	8001728 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8001726:	2300      	movs	r3, #0
}
 8001728:	4618      	mov	r0, r3
 800172a:	3710      	adds	r7, #16
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	fe00e800 	.word	0xfe00e800

08001734 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001734:	b480      	push	{r7}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	607b      	str	r3, [r7, #4]
 800173e:	460b      	mov	r3, r1
 8001740:	817b      	strh	r3, [r7, #10]
 8001742:	4613      	mov	r3, r2
 8001744:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	685a      	ldr	r2, [r3, #4]
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	0d5b      	lsrs	r3, r3, #21
 8001750:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001754:	4b0d      	ldr	r3, [pc, #52]	; (800178c <I2C_TransferConfig+0x58>)
 8001756:	430b      	orrs	r3, r1
 8001758:	43db      	mvns	r3, r3
 800175a:	ea02 0103 	and.w	r1, r2, r3
 800175e:	897b      	ldrh	r3, [r7, #10]
 8001760:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001764:	7a7b      	ldrb	r3, [r7, #9]
 8001766:	041b      	lsls	r3, r3, #16
 8001768:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800176c:	431a      	orrs	r2, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	431a      	orrs	r2, r3
 8001772:	69bb      	ldr	r3, [r7, #24]
 8001774:	431a      	orrs	r2, r3
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	430a      	orrs	r2, r1
 800177c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800177e:	bf00      	nop
 8001780:	3714      	adds	r7, #20
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	03ff63ff 	.word	0x03ff63ff

08001790 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	2b20      	cmp	r3, #32
 80017a4:	d138      	bne.n	8001818 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d101      	bne.n	80017b4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80017b0:	2302      	movs	r3, #2
 80017b2:	e032      	b.n	800181a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2201      	movs	r2, #1
 80017b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2224      	movs	r2, #36	; 0x24
 80017c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f022 0201 	bic.w	r2, r2, #1
 80017d2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80017e2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	6819      	ldr	r1, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	683a      	ldr	r2, [r7, #0]
 80017f0:	430a      	orrs	r2, r1
 80017f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f042 0201 	orr.w	r2, r2, #1
 8001802:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2220      	movs	r2, #32
 8001808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2200      	movs	r2, #0
 8001810:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001814:	2300      	movs	r3, #0
 8001816:	e000      	b.n	800181a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001818:	2302      	movs	r3, #2
  }
}
 800181a:	4618      	mov	r0, r3
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr

08001826 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001826:	b480      	push	{r7}
 8001828:	b085      	sub	sp, #20
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
 800182e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001836:	b2db      	uxtb	r3, r3
 8001838:	2b20      	cmp	r3, #32
 800183a:	d139      	bne.n	80018b0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001842:	2b01      	cmp	r3, #1
 8001844:	d101      	bne.n	800184a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001846:	2302      	movs	r3, #2
 8001848:	e033      	b.n	80018b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2201      	movs	r2, #1
 800184e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2224      	movs	r2, #36	; 0x24
 8001856:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f022 0201 	bic.w	r2, r2, #1
 8001868:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001878:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	021b      	lsls	r3, r3, #8
 800187e:	68fa      	ldr	r2, [r7, #12]
 8001880:	4313      	orrs	r3, r2
 8001882:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	68fa      	ldr	r2, [r7, #12]
 800188a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f042 0201 	orr.w	r2, r2, #1
 800189a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2220      	movs	r2, #32
 80018a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2200      	movs	r2, #0
 80018a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80018ac:	2300      	movs	r3, #0
 80018ae:	e000      	b.n	80018b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80018b0:	2302      	movs	r3, #2
  }
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3714      	adds	r7, #20
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
	...

080018c0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80018c4:	4b04      	ldr	r3, [pc, #16]	; (80018d8 <HAL_PWREx_GetVoltageRange+0x18>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	40007000 	.word	0x40007000

080018dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018ea:	d130      	bne.n	800194e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80018ec:	4b23      	ldr	r3, [pc, #140]	; (800197c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80018f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018f8:	d038      	beq.n	800196c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80018fa:	4b20      	ldr	r3, [pc, #128]	; (800197c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001902:	4a1e      	ldr	r2, [pc, #120]	; (800197c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001904:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001908:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800190a:	4b1d      	ldr	r3, [pc, #116]	; (8001980 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2232      	movs	r2, #50	; 0x32
 8001910:	fb02 f303 	mul.w	r3, r2, r3
 8001914:	4a1b      	ldr	r2, [pc, #108]	; (8001984 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001916:	fba2 2303 	umull	r2, r3, r2, r3
 800191a:	0c9b      	lsrs	r3, r3, #18
 800191c:	3301      	adds	r3, #1
 800191e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001920:	e002      	b.n	8001928 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	3b01      	subs	r3, #1
 8001926:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001928:	4b14      	ldr	r3, [pc, #80]	; (800197c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800192a:	695b      	ldr	r3, [r3, #20]
 800192c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001930:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001934:	d102      	bne.n	800193c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d1f2      	bne.n	8001922 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800193c:	4b0f      	ldr	r3, [pc, #60]	; (800197c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800193e:	695b      	ldr	r3, [r3, #20]
 8001940:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001944:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001948:	d110      	bne.n	800196c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e00f      	b.n	800196e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800194e:	4b0b      	ldr	r3, [pc, #44]	; (800197c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001956:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800195a:	d007      	beq.n	800196c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800195c:	4b07      	ldr	r3, [pc, #28]	; (800197c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001964:	4a05      	ldr	r2, [pc, #20]	; (800197c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001966:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800196a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	3714      	adds	r7, #20
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	40007000 	.word	0x40007000
 8001980:	200000b0 	.word	0x200000b0
 8001984:	431bde83 	.word	0x431bde83

08001988 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b088      	sub	sp, #32
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d101      	bne.n	800199a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e3d4      	b.n	8002144 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800199a:	4ba1      	ldr	r3, [pc, #644]	; (8001c20 <HAL_RCC_OscConfig+0x298>)
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	f003 030c 	and.w	r3, r3, #12
 80019a2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019a4:	4b9e      	ldr	r3, [pc, #632]	; (8001c20 <HAL_RCC_OscConfig+0x298>)
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	f003 0303 	and.w	r3, r3, #3
 80019ac:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0310 	and.w	r3, r3, #16
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	f000 80e4 	beq.w	8001b84 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d007      	beq.n	80019d2 <HAL_RCC_OscConfig+0x4a>
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	2b0c      	cmp	r3, #12
 80019c6:	f040 808b 	bne.w	8001ae0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	f040 8087 	bne.w	8001ae0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019d2:	4b93      	ldr	r3, [pc, #588]	; (8001c20 <HAL_RCC_OscConfig+0x298>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d005      	beq.n	80019ea <HAL_RCC_OscConfig+0x62>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	699b      	ldr	r3, [r3, #24]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d101      	bne.n	80019ea <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e3ac      	b.n	8002144 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6a1a      	ldr	r2, [r3, #32]
 80019ee:	4b8c      	ldr	r3, [pc, #560]	; (8001c20 <HAL_RCC_OscConfig+0x298>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0308 	and.w	r3, r3, #8
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d004      	beq.n	8001a04 <HAL_RCC_OscConfig+0x7c>
 80019fa:	4b89      	ldr	r3, [pc, #548]	; (8001c20 <HAL_RCC_OscConfig+0x298>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a02:	e005      	b.n	8001a10 <HAL_RCC_OscConfig+0x88>
 8001a04:	4b86      	ldr	r3, [pc, #536]	; (8001c20 <HAL_RCC_OscConfig+0x298>)
 8001a06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a0a:	091b      	lsrs	r3, r3, #4
 8001a0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d223      	bcs.n	8001a5c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6a1b      	ldr	r3, [r3, #32]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f000 fd3f 	bl	800249c <RCC_SetFlashLatencyFromMSIRange>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e38d      	b.n	8002144 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a28:	4b7d      	ldr	r3, [pc, #500]	; (8001c20 <HAL_RCC_OscConfig+0x298>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a7c      	ldr	r2, [pc, #496]	; (8001c20 <HAL_RCC_OscConfig+0x298>)
 8001a2e:	f043 0308 	orr.w	r3, r3, #8
 8001a32:	6013      	str	r3, [r2, #0]
 8001a34:	4b7a      	ldr	r3, [pc, #488]	; (8001c20 <HAL_RCC_OscConfig+0x298>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6a1b      	ldr	r3, [r3, #32]
 8001a40:	4977      	ldr	r1, [pc, #476]	; (8001c20 <HAL_RCC_OscConfig+0x298>)
 8001a42:	4313      	orrs	r3, r2
 8001a44:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a46:	4b76      	ldr	r3, [pc, #472]	; (8001c20 <HAL_RCC_OscConfig+0x298>)
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	69db      	ldr	r3, [r3, #28]
 8001a52:	021b      	lsls	r3, r3, #8
 8001a54:	4972      	ldr	r1, [pc, #456]	; (8001c20 <HAL_RCC_OscConfig+0x298>)
 8001a56:	4313      	orrs	r3, r2
 8001a58:	604b      	str	r3, [r1, #4]
 8001a5a:	e025      	b.n	8001aa8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a5c:	4b70      	ldr	r3, [pc, #448]	; (8001c20 <HAL_RCC_OscConfig+0x298>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a6f      	ldr	r2, [pc, #444]	; (8001c20 <HAL_RCC_OscConfig+0x298>)
 8001a62:	f043 0308 	orr.w	r3, r3, #8
 8001a66:	6013      	str	r3, [r2, #0]
 8001a68:	4b6d      	ldr	r3, [pc, #436]	; (8001c20 <HAL_RCC_OscConfig+0x298>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6a1b      	ldr	r3, [r3, #32]
 8001a74:	496a      	ldr	r1, [pc, #424]	; (8001c20 <HAL_RCC_OscConfig+0x298>)
 8001a76:	4313      	orrs	r3, r2
 8001a78:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a7a:	4b69      	ldr	r3, [pc, #420]	; (8001c20 <HAL_RCC_OscConfig+0x298>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	69db      	ldr	r3, [r3, #28]
 8001a86:	021b      	lsls	r3, r3, #8
 8001a88:	4965      	ldr	r1, [pc, #404]	; (8001c20 <HAL_RCC_OscConfig+0x298>)
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d109      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6a1b      	ldr	r3, [r3, #32]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f000 fcff 	bl	800249c <RCC_SetFlashLatencyFromMSIRange>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e34d      	b.n	8002144 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001aa8:	f000 fc36 	bl	8002318 <HAL_RCC_GetSysClockFreq>
 8001aac:	4601      	mov	r1, r0
 8001aae:	4b5c      	ldr	r3, [pc, #368]	; (8001c20 <HAL_RCC_OscConfig+0x298>)
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	091b      	lsrs	r3, r3, #4
 8001ab4:	f003 030f 	and.w	r3, r3, #15
 8001ab8:	4a5a      	ldr	r2, [pc, #360]	; (8001c24 <HAL_RCC_OscConfig+0x29c>)
 8001aba:	5cd3      	ldrb	r3, [r2, r3]
 8001abc:	f003 031f 	and.w	r3, r3, #31
 8001ac0:	fa21 f303 	lsr.w	r3, r1, r3
 8001ac4:	4a58      	ldr	r2, [pc, #352]	; (8001c28 <HAL_RCC_OscConfig+0x2a0>)
 8001ac6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001ac8:	4b58      	ldr	r3, [pc, #352]	; (8001c2c <HAL_RCC_OscConfig+0x2a4>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7fe fd13 	bl	80004f8 <HAL_InitTick>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001ad6:	7bfb      	ldrb	r3, [r7, #15]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d052      	beq.n	8001b82 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001adc:	7bfb      	ldrb	r3, [r7, #15]
 8001ade:	e331      	b.n	8002144 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d032      	beq.n	8001b4e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001ae8:	4b4d      	ldr	r3, [pc, #308]	; (8001c20 <HAL_RCC_OscConfig+0x298>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a4c      	ldr	r2, [pc, #304]	; (8001c20 <HAL_RCC_OscConfig+0x298>)
 8001aee:	f043 0301 	orr.w	r3, r3, #1
 8001af2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001af4:	f7fe fd50 	bl	8000598 <HAL_GetTick>
 8001af8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001afa:	e008      	b.n	8001b0e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001afc:	f7fe fd4c 	bl	8000598 <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e31a      	b.n	8002144 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b0e:	4b44      	ldr	r3, [pc, #272]	; (8001c20 <HAL_RCC_OscConfig+0x298>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d0f0      	beq.n	8001afc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b1a:	4b41      	ldr	r3, [pc, #260]	; (8001c20 <HAL_RCC_OscConfig+0x298>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a40      	ldr	r2, [pc, #256]	; (8001c20 <HAL_RCC_OscConfig+0x298>)
 8001b20:	f043 0308 	orr.w	r3, r3, #8
 8001b24:	6013      	str	r3, [r2, #0]
 8001b26:	4b3e      	ldr	r3, [pc, #248]	; (8001c20 <HAL_RCC_OscConfig+0x298>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6a1b      	ldr	r3, [r3, #32]
 8001b32:	493b      	ldr	r1, [pc, #236]	; (8001c20 <HAL_RCC_OscConfig+0x298>)
 8001b34:	4313      	orrs	r3, r2
 8001b36:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b38:	4b39      	ldr	r3, [pc, #228]	; (8001c20 <HAL_RCC_OscConfig+0x298>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	69db      	ldr	r3, [r3, #28]
 8001b44:	021b      	lsls	r3, r3, #8
 8001b46:	4936      	ldr	r1, [pc, #216]	; (8001c20 <HAL_RCC_OscConfig+0x298>)
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	604b      	str	r3, [r1, #4]
 8001b4c:	e01a      	b.n	8001b84 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b4e:	4b34      	ldr	r3, [pc, #208]	; (8001c20 <HAL_RCC_OscConfig+0x298>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a33      	ldr	r2, [pc, #204]	; (8001c20 <HAL_RCC_OscConfig+0x298>)
 8001b54:	f023 0301 	bic.w	r3, r3, #1
 8001b58:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b5a:	f7fe fd1d 	bl	8000598 <HAL_GetTick>
 8001b5e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b60:	e008      	b.n	8001b74 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b62:	f7fe fd19 	bl	8000598 <HAL_GetTick>
 8001b66:	4602      	mov	r2, r0
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d901      	bls.n	8001b74 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001b70:	2303      	movs	r3, #3
 8001b72:	e2e7      	b.n	8002144 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b74:	4b2a      	ldr	r3, [pc, #168]	; (8001c20 <HAL_RCC_OscConfig+0x298>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0302 	and.w	r3, r3, #2
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d1f0      	bne.n	8001b62 <HAL_RCC_OscConfig+0x1da>
 8001b80:	e000      	b.n	8001b84 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b82:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0301 	and.w	r3, r3, #1
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d074      	beq.n	8001c7a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	2b08      	cmp	r3, #8
 8001b94:	d005      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x21a>
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	2b0c      	cmp	r3, #12
 8001b9a:	d10e      	bne.n	8001bba <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	2b03      	cmp	r3, #3
 8001ba0:	d10b      	bne.n	8001bba <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ba2:	4b1f      	ldr	r3, [pc, #124]	; (8001c20 <HAL_RCC_OscConfig+0x298>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d064      	beq.n	8001c78 <HAL_RCC_OscConfig+0x2f0>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d160      	bne.n	8001c78 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e2c4      	b.n	8002144 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bc2:	d106      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x24a>
 8001bc4:	4b16      	ldr	r3, [pc, #88]	; (8001c20 <HAL_RCC_OscConfig+0x298>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a15      	ldr	r2, [pc, #84]	; (8001c20 <HAL_RCC_OscConfig+0x298>)
 8001bca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bce:	6013      	str	r3, [r2, #0]
 8001bd0:	e01d      	b.n	8001c0e <HAL_RCC_OscConfig+0x286>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bda:	d10c      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x26e>
 8001bdc:	4b10      	ldr	r3, [pc, #64]	; (8001c20 <HAL_RCC_OscConfig+0x298>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a0f      	ldr	r2, [pc, #60]	; (8001c20 <HAL_RCC_OscConfig+0x298>)
 8001be2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001be6:	6013      	str	r3, [r2, #0]
 8001be8:	4b0d      	ldr	r3, [pc, #52]	; (8001c20 <HAL_RCC_OscConfig+0x298>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a0c      	ldr	r2, [pc, #48]	; (8001c20 <HAL_RCC_OscConfig+0x298>)
 8001bee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bf2:	6013      	str	r3, [r2, #0]
 8001bf4:	e00b      	b.n	8001c0e <HAL_RCC_OscConfig+0x286>
 8001bf6:	4b0a      	ldr	r3, [pc, #40]	; (8001c20 <HAL_RCC_OscConfig+0x298>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a09      	ldr	r2, [pc, #36]	; (8001c20 <HAL_RCC_OscConfig+0x298>)
 8001bfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c00:	6013      	str	r3, [r2, #0]
 8001c02:	4b07      	ldr	r3, [pc, #28]	; (8001c20 <HAL_RCC_OscConfig+0x298>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a06      	ldr	r2, [pc, #24]	; (8001c20 <HAL_RCC_OscConfig+0x298>)
 8001c08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c0c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d01c      	beq.n	8001c50 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c16:	f7fe fcbf 	bl	8000598 <HAL_GetTick>
 8001c1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c1c:	e011      	b.n	8001c42 <HAL_RCC_OscConfig+0x2ba>
 8001c1e:	bf00      	nop
 8001c20:	40021000 	.word	0x40021000
 8001c24:	08004a48 	.word	0x08004a48
 8001c28:	200000b0 	.word	0x200000b0
 8001c2c:	20000000 	.word	0x20000000
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c30:	f7fe fcb2 	bl	8000598 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b64      	cmp	r3, #100	; 0x64
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e280      	b.n	8002144 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c42:	4baf      	ldr	r3, [pc, #700]	; (8001f00 <HAL_RCC_OscConfig+0x578>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d0f0      	beq.n	8001c30 <HAL_RCC_OscConfig+0x2a8>
 8001c4e:	e014      	b.n	8001c7a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c50:	f7fe fca2 	bl	8000598 <HAL_GetTick>
 8001c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c56:	e008      	b.n	8001c6a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c58:	f7fe fc9e 	bl	8000598 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b64      	cmp	r3, #100	; 0x64
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e26c      	b.n	8002144 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c6a:	4ba5      	ldr	r3, [pc, #660]	; (8001f00 <HAL_RCC_OscConfig+0x578>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d1f0      	bne.n	8001c58 <HAL_RCC_OscConfig+0x2d0>
 8001c76:	e000      	b.n	8001c7a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d060      	beq.n	8001d48 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	2b04      	cmp	r3, #4
 8001c8a:	d005      	beq.n	8001c98 <HAL_RCC_OscConfig+0x310>
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	2b0c      	cmp	r3, #12
 8001c90:	d119      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d116      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c98:	4b99      	ldr	r3, [pc, #612]	; (8001f00 <HAL_RCC_OscConfig+0x578>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d005      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x328>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d101      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e249      	b.n	8002144 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cb0:	4b93      	ldr	r3, [pc, #588]	; (8001f00 <HAL_RCC_OscConfig+0x578>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	691b      	ldr	r3, [r3, #16]
 8001cbc:	061b      	lsls	r3, r3, #24
 8001cbe:	4990      	ldr	r1, [pc, #576]	; (8001f00 <HAL_RCC_OscConfig+0x578>)
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cc4:	e040      	b.n	8001d48 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d023      	beq.n	8001d16 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cce:	4b8c      	ldr	r3, [pc, #560]	; (8001f00 <HAL_RCC_OscConfig+0x578>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a8b      	ldr	r2, [pc, #556]	; (8001f00 <HAL_RCC_OscConfig+0x578>)
 8001cd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cda:	f7fe fc5d 	bl	8000598 <HAL_GetTick>
 8001cde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ce0:	e008      	b.n	8001cf4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ce2:	f7fe fc59 	bl	8000598 <HAL_GetTick>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d901      	bls.n	8001cf4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	e227      	b.n	8002144 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cf4:	4b82      	ldr	r3, [pc, #520]	; (8001f00 <HAL_RCC_OscConfig+0x578>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d0f0      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d00:	4b7f      	ldr	r3, [pc, #508]	; (8001f00 <HAL_RCC_OscConfig+0x578>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	691b      	ldr	r3, [r3, #16]
 8001d0c:	061b      	lsls	r3, r3, #24
 8001d0e:	497c      	ldr	r1, [pc, #496]	; (8001f00 <HAL_RCC_OscConfig+0x578>)
 8001d10:	4313      	orrs	r3, r2
 8001d12:	604b      	str	r3, [r1, #4]
 8001d14:	e018      	b.n	8001d48 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d16:	4b7a      	ldr	r3, [pc, #488]	; (8001f00 <HAL_RCC_OscConfig+0x578>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a79      	ldr	r2, [pc, #484]	; (8001f00 <HAL_RCC_OscConfig+0x578>)
 8001d1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d22:	f7fe fc39 	bl	8000598 <HAL_GetTick>
 8001d26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d28:	e008      	b.n	8001d3c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d2a:	f7fe fc35 	bl	8000598 <HAL_GetTick>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	d901      	bls.n	8001d3c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	e203      	b.n	8002144 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d3c:	4b70      	ldr	r3, [pc, #448]	; (8001f00 <HAL_RCC_OscConfig+0x578>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d1f0      	bne.n	8001d2a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0308 	and.w	r3, r3, #8
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d03c      	beq.n	8001dce <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	695b      	ldr	r3, [r3, #20]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d01c      	beq.n	8001d96 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d5c:	4b68      	ldr	r3, [pc, #416]	; (8001f00 <HAL_RCC_OscConfig+0x578>)
 8001d5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d62:	4a67      	ldr	r2, [pc, #412]	; (8001f00 <HAL_RCC_OscConfig+0x578>)
 8001d64:	f043 0301 	orr.w	r3, r3, #1
 8001d68:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d6c:	f7fe fc14 	bl	8000598 <HAL_GetTick>
 8001d70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d72:	e008      	b.n	8001d86 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d74:	f7fe fc10 	bl	8000598 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e1de      	b.n	8002144 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d86:	4b5e      	ldr	r3, [pc, #376]	; (8001f00 <HAL_RCC_OscConfig+0x578>)
 8001d88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d8c:	f003 0302 	and.w	r3, r3, #2
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d0ef      	beq.n	8001d74 <HAL_RCC_OscConfig+0x3ec>
 8001d94:	e01b      	b.n	8001dce <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d96:	4b5a      	ldr	r3, [pc, #360]	; (8001f00 <HAL_RCC_OscConfig+0x578>)
 8001d98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d9c:	4a58      	ldr	r2, [pc, #352]	; (8001f00 <HAL_RCC_OscConfig+0x578>)
 8001d9e:	f023 0301 	bic.w	r3, r3, #1
 8001da2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001da6:	f7fe fbf7 	bl	8000598 <HAL_GetTick>
 8001daa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001dac:	e008      	b.n	8001dc0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dae:	f7fe fbf3 	bl	8000598 <HAL_GetTick>
 8001db2:	4602      	mov	r2, r0
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d901      	bls.n	8001dc0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	e1c1      	b.n	8002144 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001dc0:	4b4f      	ldr	r3, [pc, #316]	; (8001f00 <HAL_RCC_OscConfig+0x578>)
 8001dc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d1ef      	bne.n	8001dae <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0304 	and.w	r3, r3, #4
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	f000 80a6 	beq.w	8001f28 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001de0:	4b47      	ldr	r3, [pc, #284]	; (8001f00 <HAL_RCC_OscConfig+0x578>)
 8001de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d10d      	bne.n	8001e08 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dec:	4b44      	ldr	r3, [pc, #272]	; (8001f00 <HAL_RCC_OscConfig+0x578>)
 8001dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df0:	4a43      	ldr	r2, [pc, #268]	; (8001f00 <HAL_RCC_OscConfig+0x578>)
 8001df2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001df6:	6593      	str	r3, [r2, #88]	; 0x58
 8001df8:	4b41      	ldr	r3, [pc, #260]	; (8001f00 <HAL_RCC_OscConfig+0x578>)
 8001dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e00:	60bb      	str	r3, [r7, #8]
 8001e02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e04:	2301      	movs	r3, #1
 8001e06:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e08:	4b3e      	ldr	r3, [pc, #248]	; (8001f04 <HAL_RCC_OscConfig+0x57c>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d118      	bne.n	8001e46 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e14:	4b3b      	ldr	r3, [pc, #236]	; (8001f04 <HAL_RCC_OscConfig+0x57c>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a3a      	ldr	r2, [pc, #232]	; (8001f04 <HAL_RCC_OscConfig+0x57c>)
 8001e1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e1e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e20:	f7fe fbba 	bl	8000598 <HAL_GetTick>
 8001e24:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e26:	e008      	b.n	8001e3a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e28:	f7fe fbb6 	bl	8000598 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e184      	b.n	8002144 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e3a:	4b32      	ldr	r3, [pc, #200]	; (8001f04 <HAL_RCC_OscConfig+0x57c>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d0f0      	beq.n	8001e28 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d108      	bne.n	8001e60 <HAL_RCC_OscConfig+0x4d8>
 8001e4e:	4b2c      	ldr	r3, [pc, #176]	; (8001f00 <HAL_RCC_OscConfig+0x578>)
 8001e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e54:	4a2a      	ldr	r2, [pc, #168]	; (8001f00 <HAL_RCC_OscConfig+0x578>)
 8001e56:	f043 0301 	orr.w	r3, r3, #1
 8001e5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e5e:	e024      	b.n	8001eaa <HAL_RCC_OscConfig+0x522>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	2b05      	cmp	r3, #5
 8001e66:	d110      	bne.n	8001e8a <HAL_RCC_OscConfig+0x502>
 8001e68:	4b25      	ldr	r3, [pc, #148]	; (8001f00 <HAL_RCC_OscConfig+0x578>)
 8001e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e6e:	4a24      	ldr	r2, [pc, #144]	; (8001f00 <HAL_RCC_OscConfig+0x578>)
 8001e70:	f043 0304 	orr.w	r3, r3, #4
 8001e74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e78:	4b21      	ldr	r3, [pc, #132]	; (8001f00 <HAL_RCC_OscConfig+0x578>)
 8001e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e7e:	4a20      	ldr	r2, [pc, #128]	; (8001f00 <HAL_RCC_OscConfig+0x578>)
 8001e80:	f043 0301 	orr.w	r3, r3, #1
 8001e84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e88:	e00f      	b.n	8001eaa <HAL_RCC_OscConfig+0x522>
 8001e8a:	4b1d      	ldr	r3, [pc, #116]	; (8001f00 <HAL_RCC_OscConfig+0x578>)
 8001e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e90:	4a1b      	ldr	r2, [pc, #108]	; (8001f00 <HAL_RCC_OscConfig+0x578>)
 8001e92:	f023 0301 	bic.w	r3, r3, #1
 8001e96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e9a:	4b19      	ldr	r3, [pc, #100]	; (8001f00 <HAL_RCC_OscConfig+0x578>)
 8001e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ea0:	4a17      	ldr	r2, [pc, #92]	; (8001f00 <HAL_RCC_OscConfig+0x578>)
 8001ea2:	f023 0304 	bic.w	r3, r3, #4
 8001ea6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d016      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eb2:	f7fe fb71 	bl	8000598 <HAL_GetTick>
 8001eb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001eb8:	e00a      	b.n	8001ed0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eba:	f7fe fb6d 	bl	8000598 <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d901      	bls.n	8001ed0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e139      	b.n	8002144 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ed0:	4b0b      	ldr	r3, [pc, #44]	; (8001f00 <HAL_RCC_OscConfig+0x578>)
 8001ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d0ed      	beq.n	8001eba <HAL_RCC_OscConfig+0x532>
 8001ede:	e01a      	b.n	8001f16 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ee0:	f7fe fb5a 	bl	8000598 <HAL_GetTick>
 8001ee4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ee6:	e00f      	b.n	8001f08 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ee8:	f7fe fb56 	bl	8000598 <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d906      	bls.n	8001f08 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e122      	b.n	8002144 <HAL_RCC_OscConfig+0x7bc>
 8001efe:	bf00      	nop
 8001f00:	40021000 	.word	0x40021000
 8001f04:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f08:	4b90      	ldr	r3, [pc, #576]	; (800214c <HAL_RCC_OscConfig+0x7c4>)
 8001f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f0e:	f003 0302 	and.w	r3, r3, #2
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d1e8      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f16:	7ffb      	ldrb	r3, [r7, #31]
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d105      	bne.n	8001f28 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f1c:	4b8b      	ldr	r3, [pc, #556]	; (800214c <HAL_RCC_OscConfig+0x7c4>)
 8001f1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f20:	4a8a      	ldr	r2, [pc, #552]	; (800214c <HAL_RCC_OscConfig+0x7c4>)
 8001f22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f26:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	f000 8108 	beq.w	8002142 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	f040 80d0 	bne.w	80020dc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001f3c:	4b83      	ldr	r3, [pc, #524]	; (800214c <HAL_RCC_OscConfig+0x7c4>)
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	f003 0203 	and.w	r2, r3, #3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d130      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5a:	3b01      	subs	r3, #1
 8001f5c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d127      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f6c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d11f      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f7c:	2a07      	cmp	r2, #7
 8001f7e:	bf14      	ite	ne
 8001f80:	2201      	movne	r2, #1
 8001f82:	2200      	moveq	r2, #0
 8001f84:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d113      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f94:	085b      	lsrs	r3, r3, #1
 8001f96:	3b01      	subs	r3, #1
 8001f98:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d109      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa8:	085b      	lsrs	r3, r3, #1
 8001faa:	3b01      	subs	r3, #1
 8001fac:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d06e      	beq.n	8002090 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	2b0c      	cmp	r3, #12
 8001fb6:	d069      	beq.n	800208c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001fb8:	4b64      	ldr	r3, [pc, #400]	; (800214c <HAL_RCC_OscConfig+0x7c4>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d105      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001fc4:	4b61      	ldr	r3, [pc, #388]	; (800214c <HAL_RCC_OscConfig+0x7c4>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e0b7      	b.n	8002144 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001fd4:	4b5d      	ldr	r3, [pc, #372]	; (800214c <HAL_RCC_OscConfig+0x7c4>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a5c      	ldr	r2, [pc, #368]	; (800214c <HAL_RCC_OscConfig+0x7c4>)
 8001fda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fde:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001fe0:	f7fe fada 	bl	8000598 <HAL_GetTick>
 8001fe4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fe6:	e008      	b.n	8001ffa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fe8:	f7fe fad6 	bl	8000598 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e0a4      	b.n	8002144 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ffa:	4b54      	ldr	r3, [pc, #336]	; (800214c <HAL_RCC_OscConfig+0x7c4>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d1f0      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002006:	4b51      	ldr	r3, [pc, #324]	; (800214c <HAL_RCC_OscConfig+0x7c4>)
 8002008:	68da      	ldr	r2, [r3, #12]
 800200a:	4b51      	ldr	r3, [pc, #324]	; (8002150 <HAL_RCC_OscConfig+0x7c8>)
 800200c:	4013      	ands	r3, r2
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002016:	3a01      	subs	r2, #1
 8002018:	0112      	lsls	r2, r2, #4
 800201a:	4311      	orrs	r1, r2
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002020:	0212      	lsls	r2, r2, #8
 8002022:	4311      	orrs	r1, r2
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002028:	0852      	lsrs	r2, r2, #1
 800202a:	3a01      	subs	r2, #1
 800202c:	0552      	lsls	r2, r2, #21
 800202e:	4311      	orrs	r1, r2
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002034:	0852      	lsrs	r2, r2, #1
 8002036:	3a01      	subs	r2, #1
 8002038:	0652      	lsls	r2, r2, #25
 800203a:	4311      	orrs	r1, r2
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002040:	0912      	lsrs	r2, r2, #4
 8002042:	0452      	lsls	r2, r2, #17
 8002044:	430a      	orrs	r2, r1
 8002046:	4941      	ldr	r1, [pc, #260]	; (800214c <HAL_RCC_OscConfig+0x7c4>)
 8002048:	4313      	orrs	r3, r2
 800204a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800204c:	4b3f      	ldr	r3, [pc, #252]	; (800214c <HAL_RCC_OscConfig+0x7c4>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a3e      	ldr	r2, [pc, #248]	; (800214c <HAL_RCC_OscConfig+0x7c4>)
 8002052:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002056:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002058:	4b3c      	ldr	r3, [pc, #240]	; (800214c <HAL_RCC_OscConfig+0x7c4>)
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	4a3b      	ldr	r2, [pc, #236]	; (800214c <HAL_RCC_OscConfig+0x7c4>)
 800205e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002062:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002064:	f7fe fa98 	bl	8000598 <HAL_GetTick>
 8002068:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800206a:	e008      	b.n	800207e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800206c:	f7fe fa94 	bl	8000598 <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b02      	cmp	r3, #2
 8002078:	d901      	bls.n	800207e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e062      	b.n	8002144 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800207e:	4b33      	ldr	r3, [pc, #204]	; (800214c <HAL_RCC_OscConfig+0x7c4>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d0f0      	beq.n	800206c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800208a:	e05a      	b.n	8002142 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e059      	b.n	8002144 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002090:	4b2e      	ldr	r3, [pc, #184]	; (800214c <HAL_RCC_OscConfig+0x7c4>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d152      	bne.n	8002142 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800209c:	4b2b      	ldr	r3, [pc, #172]	; (800214c <HAL_RCC_OscConfig+0x7c4>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a2a      	ldr	r2, [pc, #168]	; (800214c <HAL_RCC_OscConfig+0x7c4>)
 80020a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020a6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020a8:	4b28      	ldr	r3, [pc, #160]	; (800214c <HAL_RCC_OscConfig+0x7c4>)
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	4a27      	ldr	r2, [pc, #156]	; (800214c <HAL_RCC_OscConfig+0x7c4>)
 80020ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020b2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80020b4:	f7fe fa70 	bl	8000598 <HAL_GetTick>
 80020b8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020ba:	e008      	b.n	80020ce <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020bc:	f7fe fa6c 	bl	8000598 <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e03a      	b.n	8002144 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020ce:	4b1f      	ldr	r3, [pc, #124]	; (800214c <HAL_RCC_OscConfig+0x7c4>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d0f0      	beq.n	80020bc <HAL_RCC_OscConfig+0x734>
 80020da:	e032      	b.n	8002142 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	2b0c      	cmp	r3, #12
 80020e0:	d02d      	beq.n	800213e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020e2:	4b1a      	ldr	r3, [pc, #104]	; (800214c <HAL_RCC_OscConfig+0x7c4>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a19      	ldr	r2, [pc, #100]	; (800214c <HAL_RCC_OscConfig+0x7c4>)
 80020e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020ec:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80020ee:	4b17      	ldr	r3, [pc, #92]	; (800214c <HAL_RCC_OscConfig+0x7c4>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d105      	bne.n	8002106 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80020fa:	4b14      	ldr	r3, [pc, #80]	; (800214c <HAL_RCC_OscConfig+0x7c4>)
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	4a13      	ldr	r2, [pc, #76]	; (800214c <HAL_RCC_OscConfig+0x7c4>)
 8002100:	f023 0303 	bic.w	r3, r3, #3
 8002104:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002106:	4b11      	ldr	r3, [pc, #68]	; (800214c <HAL_RCC_OscConfig+0x7c4>)
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	4a10      	ldr	r2, [pc, #64]	; (800214c <HAL_RCC_OscConfig+0x7c4>)
 800210c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002110:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002114:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002116:	f7fe fa3f 	bl	8000598 <HAL_GetTick>
 800211a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800211c:	e008      	b.n	8002130 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800211e:	f7fe fa3b 	bl	8000598 <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	2b02      	cmp	r3, #2
 800212a:	d901      	bls.n	8002130 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 800212c:	2303      	movs	r3, #3
 800212e:	e009      	b.n	8002144 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002130:	4b06      	ldr	r3, [pc, #24]	; (800214c <HAL_RCC_OscConfig+0x7c4>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d1f0      	bne.n	800211e <HAL_RCC_OscConfig+0x796>
 800213c:	e001      	b.n	8002142 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e000      	b.n	8002144 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002142:	2300      	movs	r3, #0
}
 8002144:	4618      	mov	r0, r3
 8002146:	3720      	adds	r7, #32
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	40021000 	.word	0x40021000
 8002150:	f99d808c 	.word	0xf99d808c

08002154 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d101      	bne.n	8002168 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e0c8      	b.n	80022fa <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002168:	4b66      	ldr	r3, [pc, #408]	; (8002304 <HAL_RCC_ClockConfig+0x1b0>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0307 	and.w	r3, r3, #7
 8002170:	683a      	ldr	r2, [r7, #0]
 8002172:	429a      	cmp	r2, r3
 8002174:	d910      	bls.n	8002198 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002176:	4b63      	ldr	r3, [pc, #396]	; (8002304 <HAL_RCC_ClockConfig+0x1b0>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f023 0207 	bic.w	r2, r3, #7
 800217e:	4961      	ldr	r1, [pc, #388]	; (8002304 <HAL_RCC_ClockConfig+0x1b0>)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	4313      	orrs	r3, r2
 8002184:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002186:	4b5f      	ldr	r3, [pc, #380]	; (8002304 <HAL_RCC_ClockConfig+0x1b0>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0307 	and.w	r3, r3, #7
 800218e:	683a      	ldr	r2, [r7, #0]
 8002190:	429a      	cmp	r2, r3
 8002192:	d001      	beq.n	8002198 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e0b0      	b.n	80022fa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0301 	and.w	r3, r3, #1
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d04c      	beq.n	800223e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	2b03      	cmp	r3, #3
 80021aa:	d107      	bne.n	80021bc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021ac:	4b56      	ldr	r3, [pc, #344]	; (8002308 <HAL_RCC_ClockConfig+0x1b4>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d121      	bne.n	80021fc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e09e      	b.n	80022fa <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d107      	bne.n	80021d4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021c4:	4b50      	ldr	r3, [pc, #320]	; (8002308 <HAL_RCC_ClockConfig+0x1b4>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d115      	bne.n	80021fc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e092      	b.n	80022fa <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d107      	bne.n	80021ec <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021dc:	4b4a      	ldr	r3, [pc, #296]	; (8002308 <HAL_RCC_ClockConfig+0x1b4>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0302 	and.w	r3, r3, #2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d109      	bne.n	80021fc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e086      	b.n	80022fa <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021ec:	4b46      	ldr	r3, [pc, #280]	; (8002308 <HAL_RCC_ClockConfig+0x1b4>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d101      	bne.n	80021fc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e07e      	b.n	80022fa <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80021fc:	4b42      	ldr	r3, [pc, #264]	; (8002308 <HAL_RCC_ClockConfig+0x1b4>)
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f023 0203 	bic.w	r2, r3, #3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	493f      	ldr	r1, [pc, #252]	; (8002308 <HAL_RCC_ClockConfig+0x1b4>)
 800220a:	4313      	orrs	r3, r2
 800220c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800220e:	f7fe f9c3 	bl	8000598 <HAL_GetTick>
 8002212:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002214:	e00a      	b.n	800222c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002216:	f7fe f9bf 	bl	8000598 <HAL_GetTick>
 800221a:	4602      	mov	r2, r0
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	f241 3288 	movw	r2, #5000	; 0x1388
 8002224:	4293      	cmp	r3, r2
 8002226:	d901      	bls.n	800222c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e066      	b.n	80022fa <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800222c:	4b36      	ldr	r3, [pc, #216]	; (8002308 <HAL_RCC_ClockConfig+0x1b4>)
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	f003 020c 	and.w	r2, r3, #12
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	429a      	cmp	r2, r3
 800223c:	d1eb      	bne.n	8002216 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	2b00      	cmp	r3, #0
 8002248:	d008      	beq.n	800225c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800224a:	4b2f      	ldr	r3, [pc, #188]	; (8002308 <HAL_RCC_ClockConfig+0x1b4>)
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	492c      	ldr	r1, [pc, #176]	; (8002308 <HAL_RCC_ClockConfig+0x1b4>)
 8002258:	4313      	orrs	r3, r2
 800225a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800225c:	4b29      	ldr	r3, [pc, #164]	; (8002304 <HAL_RCC_ClockConfig+0x1b0>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0307 	and.w	r3, r3, #7
 8002264:	683a      	ldr	r2, [r7, #0]
 8002266:	429a      	cmp	r2, r3
 8002268:	d210      	bcs.n	800228c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800226a:	4b26      	ldr	r3, [pc, #152]	; (8002304 <HAL_RCC_ClockConfig+0x1b0>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f023 0207 	bic.w	r2, r3, #7
 8002272:	4924      	ldr	r1, [pc, #144]	; (8002304 <HAL_RCC_ClockConfig+0x1b0>)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	4313      	orrs	r3, r2
 8002278:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800227a:	4b22      	ldr	r3, [pc, #136]	; (8002304 <HAL_RCC_ClockConfig+0x1b0>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0307 	and.w	r3, r3, #7
 8002282:	683a      	ldr	r2, [r7, #0]
 8002284:	429a      	cmp	r2, r3
 8002286:	d001      	beq.n	800228c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e036      	b.n	80022fa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0304 	and.w	r3, r3, #4
 8002294:	2b00      	cmp	r3, #0
 8002296:	d008      	beq.n	80022aa <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002298:	4b1b      	ldr	r3, [pc, #108]	; (8002308 <HAL_RCC_ClockConfig+0x1b4>)
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	4918      	ldr	r1, [pc, #96]	; (8002308 <HAL_RCC_ClockConfig+0x1b4>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0308 	and.w	r3, r3, #8
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d009      	beq.n	80022ca <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022b6:	4b14      	ldr	r3, [pc, #80]	; (8002308 <HAL_RCC_ClockConfig+0x1b4>)
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	00db      	lsls	r3, r3, #3
 80022c4:	4910      	ldr	r1, [pc, #64]	; (8002308 <HAL_RCC_ClockConfig+0x1b4>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022ca:	f000 f825 	bl	8002318 <HAL_RCC_GetSysClockFreq>
 80022ce:	4601      	mov	r1, r0
 80022d0:	4b0d      	ldr	r3, [pc, #52]	; (8002308 <HAL_RCC_ClockConfig+0x1b4>)
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	091b      	lsrs	r3, r3, #4
 80022d6:	f003 030f 	and.w	r3, r3, #15
 80022da:	4a0c      	ldr	r2, [pc, #48]	; (800230c <HAL_RCC_ClockConfig+0x1b8>)
 80022dc:	5cd3      	ldrb	r3, [r2, r3]
 80022de:	f003 031f 	and.w	r3, r3, #31
 80022e2:	fa21 f303 	lsr.w	r3, r1, r3
 80022e6:	4a0a      	ldr	r2, [pc, #40]	; (8002310 <HAL_RCC_ClockConfig+0x1bc>)
 80022e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80022ea:	4b0a      	ldr	r3, [pc, #40]	; (8002314 <HAL_RCC_ClockConfig+0x1c0>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7fe f902 	bl	80004f8 <HAL_InitTick>
 80022f4:	4603      	mov	r3, r0
 80022f6:	72fb      	strb	r3, [r7, #11]

  return status;
 80022f8:	7afb      	ldrb	r3, [r7, #11]
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3710      	adds	r7, #16
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	40022000 	.word	0x40022000
 8002308:	40021000 	.word	0x40021000
 800230c:	08004a48 	.word	0x08004a48
 8002310:	200000b0 	.word	0x200000b0
 8002314:	20000000 	.word	0x20000000

08002318 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002318:	b480      	push	{r7}
 800231a:	b089      	sub	sp, #36	; 0x24
 800231c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800231e:	2300      	movs	r3, #0
 8002320:	61fb      	str	r3, [r7, #28]
 8002322:	2300      	movs	r3, #0
 8002324:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002326:	4b3d      	ldr	r3, [pc, #244]	; (800241c <HAL_RCC_GetSysClockFreq+0x104>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f003 030c 	and.w	r3, r3, #12
 800232e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002330:	4b3a      	ldr	r3, [pc, #232]	; (800241c <HAL_RCC_GetSysClockFreq+0x104>)
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	f003 0303 	and.w	r3, r3, #3
 8002338:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d005      	beq.n	800234c <HAL_RCC_GetSysClockFreq+0x34>
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	2b0c      	cmp	r3, #12
 8002344:	d121      	bne.n	800238a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2b01      	cmp	r3, #1
 800234a:	d11e      	bne.n	800238a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800234c:	4b33      	ldr	r3, [pc, #204]	; (800241c <HAL_RCC_GetSysClockFreq+0x104>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0308 	and.w	r3, r3, #8
 8002354:	2b00      	cmp	r3, #0
 8002356:	d107      	bne.n	8002368 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002358:	4b30      	ldr	r3, [pc, #192]	; (800241c <HAL_RCC_GetSysClockFreq+0x104>)
 800235a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800235e:	0a1b      	lsrs	r3, r3, #8
 8002360:	f003 030f 	and.w	r3, r3, #15
 8002364:	61fb      	str	r3, [r7, #28]
 8002366:	e005      	b.n	8002374 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002368:	4b2c      	ldr	r3, [pc, #176]	; (800241c <HAL_RCC_GetSysClockFreq+0x104>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	091b      	lsrs	r3, r3, #4
 800236e:	f003 030f 	and.w	r3, r3, #15
 8002372:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002374:	4a2a      	ldr	r2, [pc, #168]	; (8002420 <HAL_RCC_GetSysClockFreq+0x108>)
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800237c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d10d      	bne.n	80023a0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002388:	e00a      	b.n	80023a0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	2b04      	cmp	r3, #4
 800238e:	d102      	bne.n	8002396 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002390:	4b24      	ldr	r3, [pc, #144]	; (8002424 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002392:	61bb      	str	r3, [r7, #24]
 8002394:	e004      	b.n	80023a0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	2b08      	cmp	r3, #8
 800239a:	d101      	bne.n	80023a0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800239c:	4b22      	ldr	r3, [pc, #136]	; (8002428 <HAL_RCC_GetSysClockFreq+0x110>)
 800239e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	2b0c      	cmp	r3, #12
 80023a4:	d133      	bne.n	800240e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80023a6:	4b1d      	ldr	r3, [pc, #116]	; (800241c <HAL_RCC_GetSysClockFreq+0x104>)
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	f003 0303 	and.w	r3, r3, #3
 80023ae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d002      	beq.n	80023bc <HAL_RCC_GetSysClockFreq+0xa4>
 80023b6:	2b03      	cmp	r3, #3
 80023b8:	d003      	beq.n	80023c2 <HAL_RCC_GetSysClockFreq+0xaa>
 80023ba:	e005      	b.n	80023c8 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80023bc:	4b19      	ldr	r3, [pc, #100]	; (8002424 <HAL_RCC_GetSysClockFreq+0x10c>)
 80023be:	617b      	str	r3, [r7, #20]
      break;
 80023c0:	e005      	b.n	80023ce <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80023c2:	4b19      	ldr	r3, [pc, #100]	; (8002428 <HAL_RCC_GetSysClockFreq+0x110>)
 80023c4:	617b      	str	r3, [r7, #20]
      break;
 80023c6:	e002      	b.n	80023ce <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	617b      	str	r3, [r7, #20]
      break;
 80023cc:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80023ce:	4b13      	ldr	r3, [pc, #76]	; (800241c <HAL_RCC_GetSysClockFreq+0x104>)
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	091b      	lsrs	r3, r3, #4
 80023d4:	f003 0307 	and.w	r3, r3, #7
 80023d8:	3301      	adds	r3, #1
 80023da:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80023dc:	4b0f      	ldr	r3, [pc, #60]	; (800241c <HAL_RCC_GetSysClockFreq+0x104>)
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	0a1b      	lsrs	r3, r3, #8
 80023e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80023e6:	697a      	ldr	r2, [r7, #20]
 80023e8:	fb02 f203 	mul.w	r2, r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80023f2:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80023f4:	4b09      	ldr	r3, [pc, #36]	; (800241c <HAL_RCC_GetSysClockFreq+0x104>)
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	0e5b      	lsrs	r3, r3, #25
 80023fa:	f003 0303 	and.w	r3, r3, #3
 80023fe:	3301      	adds	r3, #1
 8002400:	005b      	lsls	r3, r3, #1
 8002402:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002404:	697a      	ldr	r2, [r7, #20]
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	fbb2 f3f3 	udiv	r3, r2, r3
 800240c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800240e:	69bb      	ldr	r3, [r7, #24]
}
 8002410:	4618      	mov	r0, r3
 8002412:	3724      	adds	r7, #36	; 0x24
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr
 800241c:	40021000 	.word	0x40021000
 8002420:	08004a60 	.word	0x08004a60
 8002424:	00f42400 	.word	0x00f42400
 8002428:	007a1200 	.word	0x007a1200

0800242c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002430:	4b03      	ldr	r3, [pc, #12]	; (8002440 <HAL_RCC_GetHCLKFreq+0x14>)
 8002432:	681b      	ldr	r3, [r3, #0]
}
 8002434:	4618      	mov	r0, r3
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	200000b0 	.word	0x200000b0

08002444 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002448:	f7ff fff0 	bl	800242c <HAL_RCC_GetHCLKFreq>
 800244c:	4601      	mov	r1, r0
 800244e:	4b06      	ldr	r3, [pc, #24]	; (8002468 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	0a1b      	lsrs	r3, r3, #8
 8002454:	f003 0307 	and.w	r3, r3, #7
 8002458:	4a04      	ldr	r2, [pc, #16]	; (800246c <HAL_RCC_GetPCLK1Freq+0x28>)
 800245a:	5cd3      	ldrb	r3, [r2, r3]
 800245c:	f003 031f 	and.w	r3, r3, #31
 8002460:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002464:	4618      	mov	r0, r3
 8002466:	bd80      	pop	{r7, pc}
 8002468:	40021000 	.word	0x40021000
 800246c:	08004a58 	.word	0x08004a58

08002470 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002474:	f7ff ffda 	bl	800242c <HAL_RCC_GetHCLKFreq>
 8002478:	4601      	mov	r1, r0
 800247a:	4b06      	ldr	r3, [pc, #24]	; (8002494 <HAL_RCC_GetPCLK2Freq+0x24>)
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	0adb      	lsrs	r3, r3, #11
 8002480:	f003 0307 	and.w	r3, r3, #7
 8002484:	4a04      	ldr	r2, [pc, #16]	; (8002498 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002486:	5cd3      	ldrb	r3, [r2, r3]
 8002488:	f003 031f 	and.w	r3, r3, #31
 800248c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002490:	4618      	mov	r0, r3
 8002492:	bd80      	pop	{r7, pc}
 8002494:	40021000 	.word	0x40021000
 8002498:	08004a58 	.word	0x08004a58

0800249c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b086      	sub	sp, #24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80024a4:	2300      	movs	r3, #0
 80024a6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80024a8:	4b2a      	ldr	r3, [pc, #168]	; (8002554 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d003      	beq.n	80024bc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80024b4:	f7ff fa04 	bl	80018c0 <HAL_PWREx_GetVoltageRange>
 80024b8:	6178      	str	r0, [r7, #20]
 80024ba:	e014      	b.n	80024e6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80024bc:	4b25      	ldr	r3, [pc, #148]	; (8002554 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c0:	4a24      	ldr	r2, [pc, #144]	; (8002554 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024c6:	6593      	str	r3, [r2, #88]	; 0x58
 80024c8:	4b22      	ldr	r3, [pc, #136]	; (8002554 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d0:	60fb      	str	r3, [r7, #12]
 80024d2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80024d4:	f7ff f9f4 	bl	80018c0 <HAL_PWREx_GetVoltageRange>
 80024d8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80024da:	4b1e      	ldr	r3, [pc, #120]	; (8002554 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024de:	4a1d      	ldr	r2, [pc, #116]	; (8002554 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024e4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024ec:	d10b      	bne.n	8002506 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2b80      	cmp	r3, #128	; 0x80
 80024f2:	d919      	bls.n	8002528 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2ba0      	cmp	r3, #160	; 0xa0
 80024f8:	d902      	bls.n	8002500 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80024fa:	2302      	movs	r3, #2
 80024fc:	613b      	str	r3, [r7, #16]
 80024fe:	e013      	b.n	8002528 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002500:	2301      	movs	r3, #1
 8002502:	613b      	str	r3, [r7, #16]
 8002504:	e010      	b.n	8002528 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2b80      	cmp	r3, #128	; 0x80
 800250a:	d902      	bls.n	8002512 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800250c:	2303      	movs	r3, #3
 800250e:	613b      	str	r3, [r7, #16]
 8002510:	e00a      	b.n	8002528 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2b80      	cmp	r3, #128	; 0x80
 8002516:	d102      	bne.n	800251e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002518:	2302      	movs	r3, #2
 800251a:	613b      	str	r3, [r7, #16]
 800251c:	e004      	b.n	8002528 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2b70      	cmp	r3, #112	; 0x70
 8002522:	d101      	bne.n	8002528 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002524:	2301      	movs	r3, #1
 8002526:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002528:	4b0b      	ldr	r3, [pc, #44]	; (8002558 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f023 0207 	bic.w	r2, r3, #7
 8002530:	4909      	ldr	r1, [pc, #36]	; (8002558 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	4313      	orrs	r3, r2
 8002536:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002538:	4b07      	ldr	r3, [pc, #28]	; (8002558 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0307 	and.w	r3, r3, #7
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	429a      	cmp	r2, r3
 8002544:	d001      	beq.n	800254a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e000      	b.n	800254c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800254a:	2300      	movs	r3, #0
}
 800254c:	4618      	mov	r0, r3
 800254e:	3718      	adds	r7, #24
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	40021000 	.word	0x40021000
 8002558:	40022000 	.word	0x40022000

0800255c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b086      	sub	sp, #24
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002564:	2300      	movs	r3, #0
 8002566:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002568:	2300      	movs	r3, #0
 800256a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002574:	2b00      	cmp	r3, #0
 8002576:	d03f      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800257c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002580:	d01c      	beq.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x60>
 8002582:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002586:	d802      	bhi.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002588:	2b00      	cmp	r3, #0
 800258a:	d00e      	beq.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800258c:	e01f      	b.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x72>
 800258e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002592:	d003      	beq.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002594:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002598:	d01c      	beq.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800259a:	e018      	b.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800259c:	4b85      	ldr	r3, [pc, #532]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	4a84      	ldr	r2, [pc, #528]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80025a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025a6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025a8:	e015      	b.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	3304      	adds	r3, #4
 80025ae:	2100      	movs	r1, #0
 80025b0:	4618      	mov	r0, r3
 80025b2:	f000 fab9 	bl	8002b28 <RCCEx_PLLSAI1_Config>
 80025b6:	4603      	mov	r3, r0
 80025b8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025ba:	e00c      	b.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	3320      	adds	r3, #32
 80025c0:	2100      	movs	r1, #0
 80025c2:	4618      	mov	r0, r3
 80025c4:	f000 fba0 	bl	8002d08 <RCCEx_PLLSAI2_Config>
 80025c8:	4603      	mov	r3, r0
 80025ca:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025cc:	e003      	b.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	74fb      	strb	r3, [r7, #19]
      break;
 80025d2:	e000      	b.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80025d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025d6:	7cfb      	ldrb	r3, [r7, #19]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d10b      	bne.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025dc:	4b75      	ldr	r3, [pc, #468]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80025de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025ea:	4972      	ldr	r1, [pc, #456]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80025f2:	e001      	b.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025f4:	7cfb      	ldrb	r3, [r7, #19]
 80025f6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d03f      	beq.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002608:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800260c:	d01c      	beq.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800260e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002612:	d802      	bhi.n	800261a <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8002614:	2b00      	cmp	r3, #0
 8002616:	d00e      	beq.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002618:	e01f      	b.n	800265a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800261a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800261e:	d003      	beq.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002620:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002624:	d01c      	beq.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8002626:	e018      	b.n	800265a <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002628:	4b62      	ldr	r3, [pc, #392]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	4a61      	ldr	r2, [pc, #388]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800262e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002632:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002634:	e015      	b.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	3304      	adds	r3, #4
 800263a:	2100      	movs	r1, #0
 800263c:	4618      	mov	r0, r3
 800263e:	f000 fa73 	bl	8002b28 <RCCEx_PLLSAI1_Config>
 8002642:	4603      	mov	r3, r0
 8002644:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002646:	e00c      	b.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	3320      	adds	r3, #32
 800264c:	2100      	movs	r1, #0
 800264e:	4618      	mov	r0, r3
 8002650:	f000 fb5a 	bl	8002d08 <RCCEx_PLLSAI2_Config>
 8002654:	4603      	mov	r3, r0
 8002656:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002658:	e003      	b.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	74fb      	strb	r3, [r7, #19]
      break;
 800265e:	e000      	b.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002660:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002662:	7cfb      	ldrb	r3, [r7, #19]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d10b      	bne.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002668:	4b52      	ldr	r3, [pc, #328]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800266a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800266e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002676:	494f      	ldr	r1, [pc, #316]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002678:	4313      	orrs	r3, r2
 800267a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800267e:	e001      	b.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002680:	7cfb      	ldrb	r3, [r7, #19]
 8002682:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800268c:	2b00      	cmp	r3, #0
 800268e:	f000 80a0 	beq.w	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002692:	2300      	movs	r3, #0
 8002694:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002696:	4b47      	ldr	r3, [pc, #284]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800269a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d101      	bne.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80026a2:	2301      	movs	r3, #1
 80026a4:	e000      	b.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80026a6:	2300      	movs	r3, #0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d00d      	beq.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026ac:	4b41      	ldr	r3, [pc, #260]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026b0:	4a40      	ldr	r2, [pc, #256]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026b6:	6593      	str	r3, [r2, #88]	; 0x58
 80026b8:	4b3e      	ldr	r3, [pc, #248]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c0:	60bb      	str	r3, [r7, #8]
 80026c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026c4:	2301      	movs	r3, #1
 80026c6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026c8:	4b3b      	ldr	r3, [pc, #236]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a3a      	ldr	r2, [pc, #232]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80026ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026d2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80026d4:	f7fd ff60 	bl	8000598 <HAL_GetTick>
 80026d8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80026da:	e009      	b.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026dc:	f7fd ff5c 	bl	8000598 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d902      	bls.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	74fb      	strb	r3, [r7, #19]
        break;
 80026ee:	e005      	b.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80026f0:	4b31      	ldr	r3, [pc, #196]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d0ef      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80026fc:	7cfb      	ldrb	r3, [r7, #19]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d15c      	bne.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002702:	4b2c      	ldr	r3, [pc, #176]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002708:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800270c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d01f      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800271a:	697a      	ldr	r2, [r7, #20]
 800271c:	429a      	cmp	r2, r3
 800271e:	d019      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002720:	4b24      	ldr	r3, [pc, #144]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002726:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800272a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800272c:	4b21      	ldr	r3, [pc, #132]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800272e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002732:	4a20      	ldr	r2, [pc, #128]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002734:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002738:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800273c:	4b1d      	ldr	r3, [pc, #116]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800273e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002742:	4a1c      	ldr	r2, [pc, #112]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002744:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002748:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800274c:	4a19      	ldr	r2, [pc, #100]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	2b00      	cmp	r3, #0
 800275c:	d016      	beq.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800275e:	f7fd ff1b 	bl	8000598 <HAL_GetTick>
 8002762:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002764:	e00b      	b.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002766:	f7fd ff17 	bl	8000598 <HAL_GetTick>
 800276a:	4602      	mov	r2, r0
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	f241 3288 	movw	r2, #5000	; 0x1388
 8002774:	4293      	cmp	r3, r2
 8002776:	d902      	bls.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	74fb      	strb	r3, [r7, #19]
            break;
 800277c:	e006      	b.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800277e:	4b0d      	ldr	r3, [pc, #52]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002784:	f003 0302 	and.w	r3, r3, #2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d0ec      	beq.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 800278c:	7cfb      	ldrb	r3, [r7, #19]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d10c      	bne.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002792:	4b08      	ldr	r3, [pc, #32]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002794:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002798:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027a2:	4904      	ldr	r1, [pc, #16]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80027aa:	e009      	b.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80027ac:	7cfb      	ldrb	r3, [r7, #19]
 80027ae:	74bb      	strb	r3, [r7, #18]
 80027b0:	e006      	b.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80027b2:	bf00      	nop
 80027b4:	40021000 	.word	0x40021000
 80027b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027bc:	7cfb      	ldrb	r3, [r7, #19]
 80027be:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027c0:	7c7b      	ldrb	r3, [r7, #17]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d105      	bne.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027c6:	4b9e      	ldr	r3, [pc, #632]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ca:	4a9d      	ldr	r2, [pc, #628]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027d0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d00a      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027de:	4b98      	ldr	r3, [pc, #608]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e4:	f023 0203 	bic.w	r2, r3, #3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ec:	4994      	ldr	r1, [pc, #592]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0302 	and.w	r3, r3, #2
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d00a      	beq.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002800:	4b8f      	ldr	r3, [pc, #572]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002806:	f023 020c 	bic.w	r2, r3, #12
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800280e:	498c      	ldr	r1, [pc, #560]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002810:	4313      	orrs	r3, r2
 8002812:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0304 	and.w	r3, r3, #4
 800281e:	2b00      	cmp	r3, #0
 8002820:	d00a      	beq.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002822:	4b87      	ldr	r3, [pc, #540]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002828:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002830:	4983      	ldr	r1, [pc, #524]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002832:	4313      	orrs	r3, r2
 8002834:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0308 	and.w	r3, r3, #8
 8002840:	2b00      	cmp	r3, #0
 8002842:	d00a      	beq.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002844:	4b7e      	ldr	r3, [pc, #504]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800284a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002852:	497b      	ldr	r1, [pc, #492]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002854:	4313      	orrs	r3, r2
 8002856:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0310 	and.w	r3, r3, #16
 8002862:	2b00      	cmp	r3, #0
 8002864:	d00a      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002866:	4b76      	ldr	r3, [pc, #472]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800286c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002874:	4972      	ldr	r1, [pc, #456]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002876:	4313      	orrs	r3, r2
 8002878:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0320 	and.w	r3, r3, #32
 8002884:	2b00      	cmp	r3, #0
 8002886:	d00a      	beq.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002888:	4b6d      	ldr	r3, [pc, #436]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800288a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800288e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002896:	496a      	ldr	r1, [pc, #424]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002898:	4313      	orrs	r3, r2
 800289a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d00a      	beq.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80028aa:	4b65      	ldr	r3, [pc, #404]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028b8:	4961      	ldr	r1, [pc, #388]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d00a      	beq.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80028cc:	4b5c      	ldr	r3, [pc, #368]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028da:	4959      	ldr	r1, [pc, #356]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d00a      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028ee:	4b54      	ldr	r3, [pc, #336]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028fc:	4950      	ldr	r1, [pc, #320]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800290c:	2b00      	cmp	r3, #0
 800290e:	d00a      	beq.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002910:	4b4b      	ldr	r3, [pc, #300]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002916:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800291e:	4948      	ldr	r1, [pc, #288]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002920:	4313      	orrs	r3, r2
 8002922:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800292e:	2b00      	cmp	r3, #0
 8002930:	d00a      	beq.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002932:	4b43      	ldr	r3, [pc, #268]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002938:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002940:	493f      	ldr	r1, [pc, #252]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002942:	4313      	orrs	r3, r2
 8002944:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d028      	beq.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002954:	4b3a      	ldr	r3, [pc, #232]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800295a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002962:	4937      	ldr	r1, [pc, #220]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002964:	4313      	orrs	r3, r2
 8002966:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800296e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002972:	d106      	bne.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002974:	4b32      	ldr	r3, [pc, #200]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	4a31      	ldr	r2, [pc, #196]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800297a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800297e:	60d3      	str	r3, [r2, #12]
 8002980:	e011      	b.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002986:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800298a:	d10c      	bne.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	3304      	adds	r3, #4
 8002990:	2101      	movs	r1, #1
 8002992:	4618      	mov	r0, r3
 8002994:	f000 f8c8 	bl	8002b28 <RCCEx_PLLSAI1_Config>
 8002998:	4603      	mov	r3, r0
 800299a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800299c:	7cfb      	ldrb	r3, [r7, #19]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 80029a2:	7cfb      	ldrb	r3, [r7, #19]
 80029a4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d028      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80029b2:	4b23      	ldr	r3, [pc, #140]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029b8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c0:	491f      	ldr	r1, [pc, #124]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029d0:	d106      	bne.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029d2:	4b1b      	ldr	r3, [pc, #108]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	4a1a      	ldr	r2, [pc, #104]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029dc:	60d3      	str	r3, [r2, #12]
 80029de:	e011      	b.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029e8:	d10c      	bne.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	3304      	adds	r3, #4
 80029ee:	2101      	movs	r1, #1
 80029f0:	4618      	mov	r0, r3
 80029f2:	f000 f899 	bl	8002b28 <RCCEx_PLLSAI1_Config>
 80029f6:	4603      	mov	r3, r0
 80029f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029fa:	7cfb      	ldrb	r3, [r7, #19]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d001      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8002a00:	7cfb      	ldrb	r3, [r7, #19]
 8002a02:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d02b      	beq.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a10:	4b0b      	ldr	r3, [pc, #44]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a16:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a1e:	4908      	ldr	r1, [pc, #32]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a2e:	d109      	bne.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a30:	4b03      	ldr	r3, [pc, #12]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	4a02      	ldr	r2, [pc, #8]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a3a:	60d3      	str	r3, [r2, #12]
 8002a3c:	e014      	b.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002a3e:	bf00      	nop
 8002a40:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a48:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a4c:	d10c      	bne.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	3304      	adds	r3, #4
 8002a52:	2101      	movs	r1, #1
 8002a54:	4618      	mov	r0, r3
 8002a56:	f000 f867 	bl	8002b28 <RCCEx_PLLSAI1_Config>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a5e:	7cfb      	ldrb	r3, [r7, #19]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d001      	beq.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8002a64:	7cfb      	ldrb	r3, [r7, #19]
 8002a66:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d02f      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a74:	4b2b      	ldr	r3, [pc, #172]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a7a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a82:	4928      	ldr	r1, [pc, #160]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a92:	d10d      	bne.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	3304      	adds	r3, #4
 8002a98:	2102      	movs	r1, #2
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f000 f844 	bl	8002b28 <RCCEx_PLLSAI1_Config>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002aa4:	7cfb      	ldrb	r3, [r7, #19]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d014      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002aaa:	7cfb      	ldrb	r3, [r7, #19]
 8002aac:	74bb      	strb	r3, [r7, #18]
 8002aae:	e011      	b.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ab4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ab8:	d10c      	bne.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	3320      	adds	r3, #32
 8002abe:	2102      	movs	r1, #2
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f000 f921 	bl	8002d08 <RCCEx_PLLSAI2_Config>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002aca:	7cfb      	ldrb	r3, [r7, #19]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d001      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002ad0:	7cfb      	ldrb	r3, [r7, #19]
 8002ad2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d00a      	beq.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002ae0:	4b10      	ldr	r3, [pc, #64]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002aee:	490d      	ldr	r1, [pc, #52]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d00b      	beq.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002b02:	4b08      	ldr	r3, [pc, #32]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b08:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b12:	4904      	ldr	r1, [pc, #16]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b14:	4313      	orrs	r3, r2
 8002b16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002b1a:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3718      	adds	r7, #24
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	40021000 	.word	0x40021000

08002b28 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b32:	2300      	movs	r3, #0
 8002b34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b36:	4b73      	ldr	r3, [pc, #460]	; (8002d04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	f003 0303 	and.w	r3, r3, #3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d018      	beq.n	8002b74 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002b42:	4b70      	ldr	r3, [pc, #448]	; (8002d04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	f003 0203 	and.w	r2, r3, #3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d10d      	bne.n	8002b6e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
       ||
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d009      	beq.n	8002b6e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002b5a:	4b6a      	ldr	r3, [pc, #424]	; (8002d04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	091b      	lsrs	r3, r3, #4
 8002b60:	f003 0307 	and.w	r3, r3, #7
 8002b64:	1c5a      	adds	r2, r3, #1
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
       ||
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d044      	beq.n	8002bf8 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	73fb      	strb	r3, [r7, #15]
 8002b72:	e041      	b.n	8002bf8 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d00c      	beq.n	8002b96 <RCCEx_PLLSAI1_Config+0x6e>
 8002b7c:	2b03      	cmp	r3, #3
 8002b7e:	d013      	beq.n	8002ba8 <RCCEx_PLLSAI1_Config+0x80>
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d120      	bne.n	8002bc6 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b84:	4b5f      	ldr	r3, [pc, #380]	; (8002d04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0302 	and.w	r3, r3, #2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d11d      	bne.n	8002bcc <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b94:	e01a      	b.n	8002bcc <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b96:	4b5b      	ldr	r3, [pc, #364]	; (8002d04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d116      	bne.n	8002bd0 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ba6:	e013      	b.n	8002bd0 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002ba8:	4b56      	ldr	r3, [pc, #344]	; (8002d04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d10f      	bne.n	8002bd4 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002bb4:	4b53      	ldr	r3, [pc, #332]	; (8002d04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d109      	bne.n	8002bd4 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002bc4:	e006      	b.n	8002bd4 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	73fb      	strb	r3, [r7, #15]
      break;
 8002bca:	e004      	b.n	8002bd6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002bcc:	bf00      	nop
 8002bce:	e002      	b.n	8002bd6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002bd0:	bf00      	nop
 8002bd2:	e000      	b.n	8002bd6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002bd4:	bf00      	nop
    }

    if(status == HAL_OK)
 8002bd6:	7bfb      	ldrb	r3, [r7, #15]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d10d      	bne.n	8002bf8 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002bdc:	4b49      	ldr	r3, [pc, #292]	; (8002d04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6819      	ldr	r1, [r3, #0]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	3b01      	subs	r3, #1
 8002bee:	011b      	lsls	r3, r3, #4
 8002bf0:	430b      	orrs	r3, r1
 8002bf2:	4944      	ldr	r1, [pc, #272]	; (8002d04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002bf8:	7bfb      	ldrb	r3, [r7, #15]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d17d      	bne.n	8002cfa <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002bfe:	4b41      	ldr	r3, [pc, #260]	; (8002d04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a40      	ldr	r2, [pc, #256]	; (8002d04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c04:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002c08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c0a:	f7fd fcc5 	bl	8000598 <HAL_GetTick>
 8002c0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c10:	e009      	b.n	8002c26 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c12:	f7fd fcc1 	bl	8000598 <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d902      	bls.n	8002c26 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	73fb      	strb	r3, [r7, #15]
        break;
 8002c24:	e005      	b.n	8002c32 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c26:	4b37      	ldr	r3, [pc, #220]	; (8002d04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d1ef      	bne.n	8002c12 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002c32:	7bfb      	ldrb	r3, [r7, #15]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d160      	bne.n	8002cfa <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d111      	bne.n	8002c62 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c3e:	4b31      	ldr	r3, [pc, #196]	; (8002d04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002c46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	6892      	ldr	r2, [r2, #8]
 8002c4e:	0211      	lsls	r1, r2, #8
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	68d2      	ldr	r2, [r2, #12]
 8002c54:	0912      	lsrs	r2, r2, #4
 8002c56:	0452      	lsls	r2, r2, #17
 8002c58:	430a      	orrs	r2, r1
 8002c5a:	492a      	ldr	r1, [pc, #168]	; (8002d04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	610b      	str	r3, [r1, #16]
 8002c60:	e027      	b.n	8002cb2 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d112      	bne.n	8002c8e <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c68:	4b26      	ldr	r3, [pc, #152]	; (8002d04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c6a:	691b      	ldr	r3, [r3, #16]
 8002c6c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002c70:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	6892      	ldr	r2, [r2, #8]
 8002c78:	0211      	lsls	r1, r2, #8
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	6912      	ldr	r2, [r2, #16]
 8002c7e:	0852      	lsrs	r2, r2, #1
 8002c80:	3a01      	subs	r2, #1
 8002c82:	0552      	lsls	r2, r2, #21
 8002c84:	430a      	orrs	r2, r1
 8002c86:	491f      	ldr	r1, [pc, #124]	; (8002d04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	610b      	str	r3, [r1, #16]
 8002c8c:	e011      	b.n	8002cb2 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c8e:	4b1d      	ldr	r3, [pc, #116]	; (8002d04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002c96:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	6892      	ldr	r2, [r2, #8]
 8002c9e:	0211      	lsls	r1, r2, #8
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	6952      	ldr	r2, [r2, #20]
 8002ca4:	0852      	lsrs	r2, r2, #1
 8002ca6:	3a01      	subs	r2, #1
 8002ca8:	0652      	lsls	r2, r2, #25
 8002caa:	430a      	orrs	r2, r1
 8002cac:	4915      	ldr	r1, [pc, #84]	; (8002d04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002cb2:	4b14      	ldr	r3, [pc, #80]	; (8002d04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a13      	ldr	r2, [pc, #76]	; (8002d04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cb8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002cbc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cbe:	f7fd fc6b 	bl	8000598 <HAL_GetTick>
 8002cc2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002cc4:	e009      	b.n	8002cda <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002cc6:	f7fd fc67 	bl	8000598 <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d902      	bls.n	8002cda <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	73fb      	strb	r3, [r7, #15]
          break;
 8002cd8:	e005      	b.n	8002ce6 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002cda:	4b0a      	ldr	r3, [pc, #40]	; (8002d04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d0ef      	beq.n	8002cc6 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8002ce6:	7bfb      	ldrb	r3, [r7, #15]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d106      	bne.n	8002cfa <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002cec:	4b05      	ldr	r3, [pc, #20]	; (8002d04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cee:	691a      	ldr	r2, [r3, #16]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	699b      	ldr	r3, [r3, #24]
 8002cf4:	4903      	ldr	r1, [pc, #12]	; (8002d04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3710      	adds	r7, #16
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	40021000 	.word	0x40021000

08002d08 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d12:	2300      	movs	r3, #0
 8002d14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d16:	4b68      	ldr	r3, [pc, #416]	; (8002eb8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	f003 0303 	and.w	r3, r3, #3
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d018      	beq.n	8002d54 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002d22:	4b65      	ldr	r3, [pc, #404]	; (8002eb8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	f003 0203 	and.w	r2, r3, #3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d10d      	bne.n	8002d4e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
       ||
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d009      	beq.n	8002d4e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002d3a:	4b5f      	ldr	r3, [pc, #380]	; (8002eb8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	091b      	lsrs	r3, r3, #4
 8002d40:	f003 0307 	and.w	r3, r3, #7
 8002d44:	1c5a      	adds	r2, r3, #1
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
       ||
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d044      	beq.n	8002dd8 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	73fb      	strb	r3, [r7, #15]
 8002d52:	e041      	b.n	8002dd8 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d00c      	beq.n	8002d76 <RCCEx_PLLSAI2_Config+0x6e>
 8002d5c:	2b03      	cmp	r3, #3
 8002d5e:	d013      	beq.n	8002d88 <RCCEx_PLLSAI2_Config+0x80>
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d120      	bne.n	8002da6 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d64:	4b54      	ldr	r3, [pc, #336]	; (8002eb8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0302 	and.w	r3, r3, #2
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d11d      	bne.n	8002dac <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d74:	e01a      	b.n	8002dac <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d76:	4b50      	ldr	r3, [pc, #320]	; (8002eb8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d116      	bne.n	8002db0 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d86:	e013      	b.n	8002db0 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d88:	4b4b      	ldr	r3, [pc, #300]	; (8002eb8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d10f      	bne.n	8002db4 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d94:	4b48      	ldr	r3, [pc, #288]	; (8002eb8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d109      	bne.n	8002db4 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002da4:	e006      	b.n	8002db4 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	73fb      	strb	r3, [r7, #15]
      break;
 8002daa:	e004      	b.n	8002db6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002dac:	bf00      	nop
 8002dae:	e002      	b.n	8002db6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002db0:	bf00      	nop
 8002db2:	e000      	b.n	8002db6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002db4:	bf00      	nop
    }

    if(status == HAL_OK)
 8002db6:	7bfb      	ldrb	r3, [r7, #15]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d10d      	bne.n	8002dd8 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002dbc:	4b3e      	ldr	r3, [pc, #248]	; (8002eb8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6819      	ldr	r1, [r3, #0]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	3b01      	subs	r3, #1
 8002dce:	011b      	lsls	r3, r3, #4
 8002dd0:	430b      	orrs	r3, r1
 8002dd2:	4939      	ldr	r1, [pc, #228]	; (8002eb8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002dd8:	7bfb      	ldrb	r3, [r7, #15]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d167      	bne.n	8002eae <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002dde:	4b36      	ldr	r3, [pc, #216]	; (8002eb8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a35      	ldr	r2, [pc, #212]	; (8002eb8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002de4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002de8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dea:	f7fd fbd5 	bl	8000598 <HAL_GetTick>
 8002dee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002df0:	e009      	b.n	8002e06 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002df2:	f7fd fbd1 	bl	8000598 <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d902      	bls.n	8002e06 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	73fb      	strb	r3, [r7, #15]
        break;
 8002e04:	e005      	b.n	8002e12 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e06:	4b2c      	ldr	r3, [pc, #176]	; (8002eb8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d1ef      	bne.n	8002df2 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002e12:	7bfb      	ldrb	r3, [r7, #15]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d14a      	bne.n	8002eae <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d111      	bne.n	8002e42 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e1e:	4b26      	ldr	r3, [pc, #152]	; (8002eb8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e20:	695b      	ldr	r3, [r3, #20]
 8002e22:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002e26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	6892      	ldr	r2, [r2, #8]
 8002e2e:	0211      	lsls	r1, r2, #8
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	68d2      	ldr	r2, [r2, #12]
 8002e34:	0912      	lsrs	r2, r2, #4
 8002e36:	0452      	lsls	r2, r2, #17
 8002e38:	430a      	orrs	r2, r1
 8002e3a:	491f      	ldr	r1, [pc, #124]	; (8002eb8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	614b      	str	r3, [r1, #20]
 8002e40:	e011      	b.n	8002e66 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e42:	4b1d      	ldr	r3, [pc, #116]	; (8002eb8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e44:	695b      	ldr	r3, [r3, #20]
 8002e46:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002e4a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	6892      	ldr	r2, [r2, #8]
 8002e52:	0211      	lsls	r1, r2, #8
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	6912      	ldr	r2, [r2, #16]
 8002e58:	0852      	lsrs	r2, r2, #1
 8002e5a:	3a01      	subs	r2, #1
 8002e5c:	0652      	lsls	r2, r2, #25
 8002e5e:	430a      	orrs	r2, r1
 8002e60:	4915      	ldr	r1, [pc, #84]	; (8002eb8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002e66:	4b14      	ldr	r3, [pc, #80]	; (8002eb8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a13      	ldr	r2, [pc, #76]	; (8002eb8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e70:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e72:	f7fd fb91 	bl	8000598 <HAL_GetTick>
 8002e76:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002e78:	e009      	b.n	8002e8e <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e7a:	f7fd fb8d 	bl	8000598 <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d902      	bls.n	8002e8e <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	73fb      	strb	r3, [r7, #15]
          break;
 8002e8c:	e005      	b.n	8002e9a <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002e8e:	4b0a      	ldr	r3, [pc, #40]	; (8002eb8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d0ef      	beq.n	8002e7a <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8002e9a:	7bfb      	ldrb	r3, [r7, #15]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d106      	bne.n	8002eae <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002ea0:	4b05      	ldr	r3, [pc, #20]	; (8002eb8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ea2:	695a      	ldr	r2, [r3, #20]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	695b      	ldr	r3, [r3, #20]
 8002ea8:	4903      	ldr	r1, [pc, #12]	; (8002eb8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002eae:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3710      	adds	r7, #16
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	40021000 	.word	0x40021000

08002ebc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e040      	b.n	8002f50 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d106      	bne.n	8002ee4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f001 fcaa 	bl	8004838 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2224      	movs	r2, #36	; 0x24
 8002ee8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f022 0201 	bic.w	r2, r2, #1
 8002ef8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f000 f82c 	bl	8002f58 <UART_SetConfig>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d101      	bne.n	8002f0a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e022      	b.n	8002f50 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d002      	beq.n	8002f18 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f000 faaa 	bl	800346c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	685a      	ldr	r2, [r3, #4]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f26:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	689a      	ldr	r2, [r3, #8]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f36:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f042 0201 	orr.w	r2, r2, #1
 8002f46:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f000 fb31 	bl	80035b0 <UART_CheckIdleState>
 8002f4e:	4603      	mov	r3, r0
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3708      	adds	r7, #8
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f58:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8002f5c:	b088      	sub	sp, #32
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f62:	2300      	movs	r3, #0
 8002f64:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	689a      	ldr	r2, [r3, #8]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	431a      	orrs	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	695b      	ldr	r3, [r3, #20]
 8002f74:	431a      	orrs	r2, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	69db      	ldr	r3, [r3, #28]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	4bac      	ldr	r3, [pc, #688]	; (8003238 <UART_SetConfig+0x2e0>)
 8002f86:	4013      	ands	r3, r2
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	6812      	ldr	r2, [r2, #0]
 8002f8c:	69f9      	ldr	r1, [r7, #28]
 8002f8e:	430b      	orrs	r3, r1
 8002f90:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	68da      	ldr	r2, [r3, #12]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	430a      	orrs	r2, r1
 8002fa6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	699b      	ldr	r3, [r3, #24]
 8002fac:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4aa2      	ldr	r2, [pc, #648]	; (800323c <UART_SetConfig+0x2e4>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d004      	beq.n	8002fc2 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a1b      	ldr	r3, [r3, #32]
 8002fbc:	69fa      	ldr	r2, [r7, #28]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	69fa      	ldr	r2, [r7, #28]
 8002fd2:	430a      	orrs	r2, r1
 8002fd4:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a99      	ldr	r2, [pc, #612]	; (8003240 <UART_SetConfig+0x2e8>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d121      	bne.n	8003024 <UART_SetConfig+0xcc>
 8002fe0:	4b98      	ldr	r3, [pc, #608]	; (8003244 <UART_SetConfig+0x2ec>)
 8002fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe6:	f003 0303 	and.w	r3, r3, #3
 8002fea:	2b03      	cmp	r3, #3
 8002fec:	d816      	bhi.n	800301c <UART_SetConfig+0xc4>
 8002fee:	a201      	add	r2, pc, #4	; (adr r2, 8002ff4 <UART_SetConfig+0x9c>)
 8002ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ff4:	08003005 	.word	0x08003005
 8002ff8:	08003011 	.word	0x08003011
 8002ffc:	0800300b 	.word	0x0800300b
 8003000:	08003017 	.word	0x08003017
 8003004:	2301      	movs	r3, #1
 8003006:	76fb      	strb	r3, [r7, #27]
 8003008:	e0e8      	b.n	80031dc <UART_SetConfig+0x284>
 800300a:	2302      	movs	r3, #2
 800300c:	76fb      	strb	r3, [r7, #27]
 800300e:	e0e5      	b.n	80031dc <UART_SetConfig+0x284>
 8003010:	2304      	movs	r3, #4
 8003012:	76fb      	strb	r3, [r7, #27]
 8003014:	e0e2      	b.n	80031dc <UART_SetConfig+0x284>
 8003016:	2308      	movs	r3, #8
 8003018:	76fb      	strb	r3, [r7, #27]
 800301a:	e0df      	b.n	80031dc <UART_SetConfig+0x284>
 800301c:	2310      	movs	r3, #16
 800301e:	76fb      	strb	r3, [r7, #27]
 8003020:	bf00      	nop
 8003022:	e0db      	b.n	80031dc <UART_SetConfig+0x284>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a87      	ldr	r2, [pc, #540]	; (8003248 <UART_SetConfig+0x2f0>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d134      	bne.n	8003098 <UART_SetConfig+0x140>
 800302e:	4b85      	ldr	r3, [pc, #532]	; (8003244 <UART_SetConfig+0x2ec>)
 8003030:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003034:	f003 030c 	and.w	r3, r3, #12
 8003038:	2b0c      	cmp	r3, #12
 800303a:	d829      	bhi.n	8003090 <UART_SetConfig+0x138>
 800303c:	a201      	add	r2, pc, #4	; (adr r2, 8003044 <UART_SetConfig+0xec>)
 800303e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003042:	bf00      	nop
 8003044:	08003079 	.word	0x08003079
 8003048:	08003091 	.word	0x08003091
 800304c:	08003091 	.word	0x08003091
 8003050:	08003091 	.word	0x08003091
 8003054:	08003085 	.word	0x08003085
 8003058:	08003091 	.word	0x08003091
 800305c:	08003091 	.word	0x08003091
 8003060:	08003091 	.word	0x08003091
 8003064:	0800307f 	.word	0x0800307f
 8003068:	08003091 	.word	0x08003091
 800306c:	08003091 	.word	0x08003091
 8003070:	08003091 	.word	0x08003091
 8003074:	0800308b 	.word	0x0800308b
 8003078:	2300      	movs	r3, #0
 800307a:	76fb      	strb	r3, [r7, #27]
 800307c:	e0ae      	b.n	80031dc <UART_SetConfig+0x284>
 800307e:	2302      	movs	r3, #2
 8003080:	76fb      	strb	r3, [r7, #27]
 8003082:	e0ab      	b.n	80031dc <UART_SetConfig+0x284>
 8003084:	2304      	movs	r3, #4
 8003086:	76fb      	strb	r3, [r7, #27]
 8003088:	e0a8      	b.n	80031dc <UART_SetConfig+0x284>
 800308a:	2308      	movs	r3, #8
 800308c:	76fb      	strb	r3, [r7, #27]
 800308e:	e0a5      	b.n	80031dc <UART_SetConfig+0x284>
 8003090:	2310      	movs	r3, #16
 8003092:	76fb      	strb	r3, [r7, #27]
 8003094:	bf00      	nop
 8003096:	e0a1      	b.n	80031dc <UART_SetConfig+0x284>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a6b      	ldr	r2, [pc, #428]	; (800324c <UART_SetConfig+0x2f4>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d120      	bne.n	80030e4 <UART_SetConfig+0x18c>
 80030a2:	4b68      	ldr	r3, [pc, #416]	; (8003244 <UART_SetConfig+0x2ec>)
 80030a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030a8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80030ac:	2b10      	cmp	r3, #16
 80030ae:	d00f      	beq.n	80030d0 <UART_SetConfig+0x178>
 80030b0:	2b10      	cmp	r3, #16
 80030b2:	d802      	bhi.n	80030ba <UART_SetConfig+0x162>
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d005      	beq.n	80030c4 <UART_SetConfig+0x16c>
 80030b8:	e010      	b.n	80030dc <UART_SetConfig+0x184>
 80030ba:	2b20      	cmp	r3, #32
 80030bc:	d005      	beq.n	80030ca <UART_SetConfig+0x172>
 80030be:	2b30      	cmp	r3, #48	; 0x30
 80030c0:	d009      	beq.n	80030d6 <UART_SetConfig+0x17e>
 80030c2:	e00b      	b.n	80030dc <UART_SetConfig+0x184>
 80030c4:	2300      	movs	r3, #0
 80030c6:	76fb      	strb	r3, [r7, #27]
 80030c8:	e088      	b.n	80031dc <UART_SetConfig+0x284>
 80030ca:	2302      	movs	r3, #2
 80030cc:	76fb      	strb	r3, [r7, #27]
 80030ce:	e085      	b.n	80031dc <UART_SetConfig+0x284>
 80030d0:	2304      	movs	r3, #4
 80030d2:	76fb      	strb	r3, [r7, #27]
 80030d4:	e082      	b.n	80031dc <UART_SetConfig+0x284>
 80030d6:	2308      	movs	r3, #8
 80030d8:	76fb      	strb	r3, [r7, #27]
 80030da:	e07f      	b.n	80031dc <UART_SetConfig+0x284>
 80030dc:	2310      	movs	r3, #16
 80030de:	76fb      	strb	r3, [r7, #27]
 80030e0:	bf00      	nop
 80030e2:	e07b      	b.n	80031dc <UART_SetConfig+0x284>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a59      	ldr	r2, [pc, #356]	; (8003250 <UART_SetConfig+0x2f8>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d120      	bne.n	8003130 <UART_SetConfig+0x1d8>
 80030ee:	4b55      	ldr	r3, [pc, #340]	; (8003244 <UART_SetConfig+0x2ec>)
 80030f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030f4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80030f8:	2b40      	cmp	r3, #64	; 0x40
 80030fa:	d00f      	beq.n	800311c <UART_SetConfig+0x1c4>
 80030fc:	2b40      	cmp	r3, #64	; 0x40
 80030fe:	d802      	bhi.n	8003106 <UART_SetConfig+0x1ae>
 8003100:	2b00      	cmp	r3, #0
 8003102:	d005      	beq.n	8003110 <UART_SetConfig+0x1b8>
 8003104:	e010      	b.n	8003128 <UART_SetConfig+0x1d0>
 8003106:	2b80      	cmp	r3, #128	; 0x80
 8003108:	d005      	beq.n	8003116 <UART_SetConfig+0x1be>
 800310a:	2bc0      	cmp	r3, #192	; 0xc0
 800310c:	d009      	beq.n	8003122 <UART_SetConfig+0x1ca>
 800310e:	e00b      	b.n	8003128 <UART_SetConfig+0x1d0>
 8003110:	2300      	movs	r3, #0
 8003112:	76fb      	strb	r3, [r7, #27]
 8003114:	e062      	b.n	80031dc <UART_SetConfig+0x284>
 8003116:	2302      	movs	r3, #2
 8003118:	76fb      	strb	r3, [r7, #27]
 800311a:	e05f      	b.n	80031dc <UART_SetConfig+0x284>
 800311c:	2304      	movs	r3, #4
 800311e:	76fb      	strb	r3, [r7, #27]
 8003120:	e05c      	b.n	80031dc <UART_SetConfig+0x284>
 8003122:	2308      	movs	r3, #8
 8003124:	76fb      	strb	r3, [r7, #27]
 8003126:	e059      	b.n	80031dc <UART_SetConfig+0x284>
 8003128:	2310      	movs	r3, #16
 800312a:	76fb      	strb	r3, [r7, #27]
 800312c:	bf00      	nop
 800312e:	e055      	b.n	80031dc <UART_SetConfig+0x284>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a47      	ldr	r2, [pc, #284]	; (8003254 <UART_SetConfig+0x2fc>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d124      	bne.n	8003184 <UART_SetConfig+0x22c>
 800313a:	4b42      	ldr	r3, [pc, #264]	; (8003244 <UART_SetConfig+0x2ec>)
 800313c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003140:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003144:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003148:	d012      	beq.n	8003170 <UART_SetConfig+0x218>
 800314a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800314e:	d802      	bhi.n	8003156 <UART_SetConfig+0x1fe>
 8003150:	2b00      	cmp	r3, #0
 8003152:	d007      	beq.n	8003164 <UART_SetConfig+0x20c>
 8003154:	e012      	b.n	800317c <UART_SetConfig+0x224>
 8003156:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800315a:	d006      	beq.n	800316a <UART_SetConfig+0x212>
 800315c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003160:	d009      	beq.n	8003176 <UART_SetConfig+0x21e>
 8003162:	e00b      	b.n	800317c <UART_SetConfig+0x224>
 8003164:	2300      	movs	r3, #0
 8003166:	76fb      	strb	r3, [r7, #27]
 8003168:	e038      	b.n	80031dc <UART_SetConfig+0x284>
 800316a:	2302      	movs	r3, #2
 800316c:	76fb      	strb	r3, [r7, #27]
 800316e:	e035      	b.n	80031dc <UART_SetConfig+0x284>
 8003170:	2304      	movs	r3, #4
 8003172:	76fb      	strb	r3, [r7, #27]
 8003174:	e032      	b.n	80031dc <UART_SetConfig+0x284>
 8003176:	2308      	movs	r3, #8
 8003178:	76fb      	strb	r3, [r7, #27]
 800317a:	e02f      	b.n	80031dc <UART_SetConfig+0x284>
 800317c:	2310      	movs	r3, #16
 800317e:	76fb      	strb	r3, [r7, #27]
 8003180:	bf00      	nop
 8003182:	e02b      	b.n	80031dc <UART_SetConfig+0x284>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a2c      	ldr	r2, [pc, #176]	; (800323c <UART_SetConfig+0x2e4>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d124      	bne.n	80031d8 <UART_SetConfig+0x280>
 800318e:	4b2d      	ldr	r3, [pc, #180]	; (8003244 <UART_SetConfig+0x2ec>)
 8003190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003194:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003198:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800319c:	d012      	beq.n	80031c4 <UART_SetConfig+0x26c>
 800319e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031a2:	d802      	bhi.n	80031aa <UART_SetConfig+0x252>
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d007      	beq.n	80031b8 <UART_SetConfig+0x260>
 80031a8:	e012      	b.n	80031d0 <UART_SetConfig+0x278>
 80031aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031ae:	d006      	beq.n	80031be <UART_SetConfig+0x266>
 80031b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80031b4:	d009      	beq.n	80031ca <UART_SetConfig+0x272>
 80031b6:	e00b      	b.n	80031d0 <UART_SetConfig+0x278>
 80031b8:	2300      	movs	r3, #0
 80031ba:	76fb      	strb	r3, [r7, #27]
 80031bc:	e00e      	b.n	80031dc <UART_SetConfig+0x284>
 80031be:	2302      	movs	r3, #2
 80031c0:	76fb      	strb	r3, [r7, #27]
 80031c2:	e00b      	b.n	80031dc <UART_SetConfig+0x284>
 80031c4:	2304      	movs	r3, #4
 80031c6:	76fb      	strb	r3, [r7, #27]
 80031c8:	e008      	b.n	80031dc <UART_SetConfig+0x284>
 80031ca:	2308      	movs	r3, #8
 80031cc:	76fb      	strb	r3, [r7, #27]
 80031ce:	e005      	b.n	80031dc <UART_SetConfig+0x284>
 80031d0:	2310      	movs	r3, #16
 80031d2:	76fb      	strb	r3, [r7, #27]
 80031d4:	bf00      	nop
 80031d6:	e001      	b.n	80031dc <UART_SetConfig+0x284>
 80031d8:	2310      	movs	r3, #16
 80031da:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a16      	ldr	r2, [pc, #88]	; (800323c <UART_SetConfig+0x2e4>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	f040 8087 	bne.w	80032f6 <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80031e8:	7efb      	ldrb	r3, [r7, #27]
 80031ea:	2b08      	cmp	r3, #8
 80031ec:	d836      	bhi.n	800325c <UART_SetConfig+0x304>
 80031ee:	a201      	add	r2, pc, #4	; (adr r2, 80031f4 <UART_SetConfig+0x29c>)
 80031f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031f4:	08003219 	.word	0x08003219
 80031f8:	0800325d 	.word	0x0800325d
 80031fc:	08003221 	.word	0x08003221
 8003200:	0800325d 	.word	0x0800325d
 8003204:	08003227 	.word	0x08003227
 8003208:	0800325d 	.word	0x0800325d
 800320c:	0800325d 	.word	0x0800325d
 8003210:	0800325d 	.word	0x0800325d
 8003214:	0800322f 	.word	0x0800322f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003218:	f7ff f914 	bl	8002444 <HAL_RCC_GetPCLK1Freq>
 800321c:	6178      	str	r0, [r7, #20]
        break;
 800321e:	e022      	b.n	8003266 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003220:	4b0d      	ldr	r3, [pc, #52]	; (8003258 <UART_SetConfig+0x300>)
 8003222:	617b      	str	r3, [r7, #20]
        break;
 8003224:	e01f      	b.n	8003266 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003226:	f7ff f877 	bl	8002318 <HAL_RCC_GetSysClockFreq>
 800322a:	6178      	str	r0, [r7, #20]
        break;
 800322c:	e01b      	b.n	8003266 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800322e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003232:	617b      	str	r3, [r7, #20]
        break;
 8003234:	e017      	b.n	8003266 <UART_SetConfig+0x30e>
 8003236:	bf00      	nop
 8003238:	efff69f3 	.word	0xefff69f3
 800323c:	40008000 	.word	0x40008000
 8003240:	40013800 	.word	0x40013800
 8003244:	40021000 	.word	0x40021000
 8003248:	40004400 	.word	0x40004400
 800324c:	40004800 	.word	0x40004800
 8003250:	40004c00 	.word	0x40004c00
 8003254:	40005000 	.word	0x40005000
 8003258:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800325c:	2300      	movs	r3, #0
 800325e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	76bb      	strb	r3, [r7, #26]
        break;
 8003264:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	2b00      	cmp	r3, #0
 800326a:	f000 80f1 	beq.w	8003450 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685a      	ldr	r2, [r3, #4]
 8003272:	4613      	mov	r3, r2
 8003274:	005b      	lsls	r3, r3, #1
 8003276:	4413      	add	r3, r2
 8003278:	697a      	ldr	r2, [r7, #20]
 800327a:	429a      	cmp	r2, r3
 800327c:	d305      	bcc.n	800328a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003284:	697a      	ldr	r2, [r7, #20]
 8003286:	429a      	cmp	r2, r3
 8003288:	d902      	bls.n	8003290 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	76bb      	strb	r3, [r7, #26]
 800328e:	e0df      	b.n	8003450 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	4619      	mov	r1, r3
 8003294:	f04f 0200 	mov.w	r2, #0
 8003298:	f04f 0300 	mov.w	r3, #0
 800329c:	f04f 0400 	mov.w	r4, #0
 80032a0:	0214      	lsls	r4, r2, #8
 80032a2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80032a6:	020b      	lsls	r3, r1, #8
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	6852      	ldr	r2, [r2, #4]
 80032ac:	0852      	lsrs	r2, r2, #1
 80032ae:	4611      	mov	r1, r2
 80032b0:	f04f 0200 	mov.w	r2, #0
 80032b4:	eb13 0b01 	adds.w	fp, r3, r1
 80032b8:	eb44 0c02 	adc.w	ip, r4, r2
 80032bc:	4658      	mov	r0, fp
 80032be:	4661      	mov	r1, ip
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f04f 0400 	mov.w	r4, #0
 80032c8:	461a      	mov	r2, r3
 80032ca:	4623      	mov	r3, r4
 80032cc:	f7fc ff7c 	bl	80001c8 <__aeabi_uldivmod>
 80032d0:	4603      	mov	r3, r0
 80032d2:	460c      	mov	r4, r1
 80032d4:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032dc:	d308      	bcc.n	80032f0 <UART_SetConfig+0x398>
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032e4:	d204      	bcs.n	80032f0 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	693a      	ldr	r2, [r7, #16]
 80032ec:	60da      	str	r2, [r3, #12]
 80032ee:	e0af      	b.n	8003450 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	76bb      	strb	r3, [r7, #26]
 80032f4:	e0ac      	b.n	8003450 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	69db      	ldr	r3, [r3, #28]
 80032fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032fe:	d15b      	bne.n	80033b8 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8003300:	7efb      	ldrb	r3, [r7, #27]
 8003302:	2b08      	cmp	r3, #8
 8003304:	d827      	bhi.n	8003356 <UART_SetConfig+0x3fe>
 8003306:	a201      	add	r2, pc, #4	; (adr r2, 800330c <UART_SetConfig+0x3b4>)
 8003308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800330c:	08003331 	.word	0x08003331
 8003310:	08003339 	.word	0x08003339
 8003314:	08003341 	.word	0x08003341
 8003318:	08003357 	.word	0x08003357
 800331c:	08003347 	.word	0x08003347
 8003320:	08003357 	.word	0x08003357
 8003324:	08003357 	.word	0x08003357
 8003328:	08003357 	.word	0x08003357
 800332c:	0800334f 	.word	0x0800334f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003330:	f7ff f888 	bl	8002444 <HAL_RCC_GetPCLK1Freq>
 8003334:	6178      	str	r0, [r7, #20]
        break;
 8003336:	e013      	b.n	8003360 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003338:	f7ff f89a 	bl	8002470 <HAL_RCC_GetPCLK2Freq>
 800333c:	6178      	str	r0, [r7, #20]
        break;
 800333e:	e00f      	b.n	8003360 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003340:	4b49      	ldr	r3, [pc, #292]	; (8003468 <UART_SetConfig+0x510>)
 8003342:	617b      	str	r3, [r7, #20]
        break;
 8003344:	e00c      	b.n	8003360 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003346:	f7fe ffe7 	bl	8002318 <HAL_RCC_GetSysClockFreq>
 800334a:	6178      	str	r0, [r7, #20]
        break;
 800334c:	e008      	b.n	8003360 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800334e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003352:	617b      	str	r3, [r7, #20]
        break;
 8003354:	e004      	b.n	8003360 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003356:	2300      	movs	r3, #0
 8003358:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	76bb      	strb	r3, [r7, #26]
        break;
 800335e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d074      	beq.n	8003450 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	005a      	lsls	r2, r3, #1
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	085b      	lsrs	r3, r3, #1
 8003370:	441a      	add	r2, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	fbb2 f3f3 	udiv	r3, r2, r3
 800337a:	b29b      	uxth	r3, r3
 800337c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	2b0f      	cmp	r3, #15
 8003382:	d916      	bls.n	80033b2 <UART_SetConfig+0x45a>
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800338a:	d212      	bcs.n	80033b2 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	b29b      	uxth	r3, r3
 8003390:	f023 030f 	bic.w	r3, r3, #15
 8003394:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	085b      	lsrs	r3, r3, #1
 800339a:	b29b      	uxth	r3, r3
 800339c:	f003 0307 	and.w	r3, r3, #7
 80033a0:	b29a      	uxth	r2, r3
 80033a2:	89fb      	ldrh	r3, [r7, #14]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	89fa      	ldrh	r2, [r7, #14]
 80033ae:	60da      	str	r2, [r3, #12]
 80033b0:	e04e      	b.n	8003450 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	76bb      	strb	r3, [r7, #26]
 80033b6:	e04b      	b.n	8003450 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80033b8:	7efb      	ldrb	r3, [r7, #27]
 80033ba:	2b08      	cmp	r3, #8
 80033bc:	d827      	bhi.n	800340e <UART_SetConfig+0x4b6>
 80033be:	a201      	add	r2, pc, #4	; (adr r2, 80033c4 <UART_SetConfig+0x46c>)
 80033c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033c4:	080033e9 	.word	0x080033e9
 80033c8:	080033f1 	.word	0x080033f1
 80033cc:	080033f9 	.word	0x080033f9
 80033d0:	0800340f 	.word	0x0800340f
 80033d4:	080033ff 	.word	0x080033ff
 80033d8:	0800340f 	.word	0x0800340f
 80033dc:	0800340f 	.word	0x0800340f
 80033e0:	0800340f 	.word	0x0800340f
 80033e4:	08003407 	.word	0x08003407
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033e8:	f7ff f82c 	bl	8002444 <HAL_RCC_GetPCLK1Freq>
 80033ec:	6178      	str	r0, [r7, #20]
        break;
 80033ee:	e013      	b.n	8003418 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033f0:	f7ff f83e 	bl	8002470 <HAL_RCC_GetPCLK2Freq>
 80033f4:	6178      	str	r0, [r7, #20]
        break;
 80033f6:	e00f      	b.n	8003418 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033f8:	4b1b      	ldr	r3, [pc, #108]	; (8003468 <UART_SetConfig+0x510>)
 80033fa:	617b      	str	r3, [r7, #20]
        break;
 80033fc:	e00c      	b.n	8003418 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033fe:	f7fe ff8b 	bl	8002318 <HAL_RCC_GetSysClockFreq>
 8003402:	6178      	str	r0, [r7, #20]
        break;
 8003404:	e008      	b.n	8003418 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003406:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800340a:	617b      	str	r3, [r7, #20]
        break;
 800340c:	e004      	b.n	8003418 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800340e:	2300      	movs	r3, #0
 8003410:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	76bb      	strb	r3, [r7, #26]
        break;
 8003416:	bf00      	nop
    }

    if (pclk != 0U)
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d018      	beq.n	8003450 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	085a      	lsrs	r2, r3, #1
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	441a      	add	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003430:	b29b      	uxth	r3, r3
 8003432:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	2b0f      	cmp	r3, #15
 8003438:	d908      	bls.n	800344c <UART_SetConfig+0x4f4>
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003440:	d204      	bcs.n	800344c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	693a      	ldr	r2, [r7, #16]
 8003448:	60da      	str	r2, [r3, #12]
 800344a:	e001      	b.n	8003450 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800345c:	7ebb      	ldrb	r3, [r7, #26]
}
 800345e:	4618      	mov	r0, r3
 8003460:	3720      	adds	r7, #32
 8003462:	46bd      	mov	sp, r7
 8003464:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8003468:	00f42400 	.word	0x00f42400

0800346c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003478:	f003 0301 	and.w	r3, r3, #1
 800347c:	2b00      	cmp	r3, #0
 800347e:	d00a      	beq.n	8003496 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	430a      	orrs	r2, r1
 8003494:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00a      	beq.n	80034b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	430a      	orrs	r2, r1
 80034b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034bc:	f003 0304 	and.w	r3, r3, #4
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d00a      	beq.n	80034da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	430a      	orrs	r2, r1
 80034d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034de:	f003 0308 	and.w	r3, r3, #8
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00a      	beq.n	80034fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	430a      	orrs	r2, r1
 80034fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003500:	f003 0310 	and.w	r3, r3, #16
 8003504:	2b00      	cmp	r3, #0
 8003506:	d00a      	beq.n	800351e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	430a      	orrs	r2, r1
 800351c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003522:	f003 0320 	and.w	r3, r3, #32
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00a      	beq.n	8003540 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	430a      	orrs	r2, r1
 800353e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003548:	2b00      	cmp	r3, #0
 800354a:	d01a      	beq.n	8003582 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	430a      	orrs	r2, r1
 8003560:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003566:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800356a:	d10a      	bne.n	8003582 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	430a      	orrs	r2, r1
 8003580:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800358a:	2b00      	cmp	r3, #0
 800358c:	d00a      	beq.n	80035a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	430a      	orrs	r2, r1
 80035a2:	605a      	str	r2, [r3, #4]
  }
}
 80035a4:	bf00      	nop
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b086      	sub	sp, #24
 80035b4:	af02      	add	r7, sp, #8
 80035b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80035be:	f7fc ffeb 	bl	8000598 <HAL_GetTick>
 80035c2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0308 	and.w	r3, r3, #8
 80035ce:	2b08      	cmp	r3, #8
 80035d0:	d10e      	bne.n	80035f0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035d2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80035d6:	9300      	str	r3, [sp, #0]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2200      	movs	r2, #0
 80035dc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f000 f82a 	bl	800363a <UART_WaitOnFlagUntilTimeout>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d001      	beq.n	80035f0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	e020      	b.n	8003632 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0304 	and.w	r3, r3, #4
 80035fa:	2b04      	cmp	r3, #4
 80035fc:	d10e      	bne.n	800361c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035fe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003602:	9300      	str	r3, [sp, #0]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f000 f814 	bl	800363a <UART_WaitOnFlagUntilTimeout>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d001      	beq.n	800361c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003618:	2303      	movs	r3, #3
 800361a:	e00a      	b.n	8003632 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2220      	movs	r2, #32
 8003620:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2220      	movs	r2, #32
 8003626:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3710      	adds	r7, #16
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}

0800363a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800363a:	b580      	push	{r7, lr}
 800363c:	b084      	sub	sp, #16
 800363e:	af00      	add	r7, sp, #0
 8003640:	60f8      	str	r0, [r7, #12]
 8003642:	60b9      	str	r1, [r7, #8]
 8003644:	603b      	str	r3, [r7, #0]
 8003646:	4613      	mov	r3, r2
 8003648:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800364a:	e05d      	b.n	8003708 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003652:	d059      	beq.n	8003708 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003654:	f7fc ffa0 	bl	8000598 <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	69ba      	ldr	r2, [r7, #24]
 8003660:	429a      	cmp	r2, r3
 8003662:	d302      	bcc.n	800366a <UART_WaitOnFlagUntilTimeout+0x30>
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d11b      	bne.n	80036a2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003678:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	689a      	ldr	r2, [r3, #8]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f022 0201 	bic.w	r2, r2, #1
 8003688:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2220      	movs	r2, #32
 800368e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2220      	movs	r2, #32
 8003694:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2200      	movs	r2, #0
 800369a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e042      	b.n	8003728 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0304 	and.w	r3, r3, #4
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d02b      	beq.n	8003708 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	69db      	ldr	r3, [r3, #28]
 80036b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036be:	d123      	bne.n	8003708 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036c8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80036d8:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	689a      	ldr	r2, [r3, #8]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f022 0201 	bic.w	r2, r2, #1
 80036e8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2220      	movs	r2, #32
 80036ee:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2220      	movs	r2, #32
 80036f4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2220      	movs	r2, #32
 80036fa:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e00f      	b.n	8003728 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	69da      	ldr	r2, [r3, #28]
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	4013      	ands	r3, r2
 8003712:	68ba      	ldr	r2, [r7, #8]
 8003714:	429a      	cmp	r2, r3
 8003716:	bf0c      	ite	eq
 8003718:	2301      	moveq	r3, #1
 800371a:	2300      	movne	r3, #0
 800371c:	b2db      	uxtb	r3, r3
 800371e:	461a      	mov	r2, r3
 8003720:	79fb      	ldrb	r3, [r7, #7]
 8003722:	429a      	cmp	r2, r3
 8003724:	d092      	beq.n	800364c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003726:	2300      	movs	r3, #0
}
 8003728:	4618      	mov	r0, r3
 800372a:	3710      	adds	r7, #16
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	4603      	mov	r3, r0
 8003738:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 800373a:	88fb      	ldrh	r3, [r7, #6]
 800373c:	b2db      	uxtb	r3, r3
 800373e:	2120      	movs	r1, #32
 8003740:	4618      	mov	r0, r3
 8003742:	f000 fe8f 	bl	8004464 <SENSOR_IO_Read>
 8003746:	4603      	mov	r3, r0
 8003748:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 800374a:	7bfb      	ldrb	r3, [r7, #15]
 800374c:	f023 0304 	bic.w	r3, r3, #4
 8003750:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8003752:	7bfb      	ldrb	r3, [r7, #15]
 8003754:	f043 0304 	orr.w	r3, r3, #4
 8003758:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 800375a:	7bfb      	ldrb	r3, [r7, #15]
 800375c:	f023 0303 	bic.w	r3, r3, #3
 8003760:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8003762:	7bfb      	ldrb	r3, [r7, #15]
 8003764:	f043 0301 	orr.w	r3, r3, #1
 8003768:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 800376a:	7bfb      	ldrb	r3, [r7, #15]
 800376c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003770:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8003772:	88fb      	ldrh	r3, [r7, #6]
 8003774:	b2db      	uxtb	r3, r3
 8003776:	7bfa      	ldrb	r2, [r7, #15]
 8003778:	2120      	movs	r1, #32
 800377a:	4618      	mov	r0, r3
 800377c:	f000 fe58 	bl	8004430 <SENSOR_IO_Write>
}
 8003780:	bf00      	nop
 8003782:	3710      	adds	r7, #16
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	4603      	mov	r3, r0
 8003790:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8003792:	2300      	movs	r3, #0
 8003794:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 8003796:	f000 fe41 	bl	800441c <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 800379a:	88fb      	ldrh	r3, [r7, #6]
 800379c:	b2db      	uxtb	r3, r3
 800379e:	210f      	movs	r1, #15
 80037a0:	4618      	mov	r0, r3
 80037a2:	f000 fe5f 	bl	8004464 <SENSOR_IO_Read>
 80037a6:	4603      	mov	r3, r0
 80037a8:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 80037aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3710      	adds	r7, #16
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b088      	sub	sp, #32
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	4603      	mov	r3, r0
 80037bc:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 80037be:	88fb      	ldrh	r3, [r7, #6]
 80037c0:	b2d8      	uxtb	r0, r3
 80037c2:	f107 020c 	add.w	r2, r7, #12
 80037c6:	2302      	movs	r3, #2
 80037c8:	21b0      	movs	r1, #176	; 0xb0
 80037ca:	f000 fe69 	bl	80044a0 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 80037ce:	7b3b      	ldrb	r3, [r7, #12]
 80037d0:	085b      	lsrs	r3, r3, #1
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 80037d6:	7b7b      	ldrb	r3, [r7, #13]
 80037d8:	085b      	lsrs	r3, r3, #1
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 80037de:	88fb      	ldrh	r3, [r7, #6]
 80037e0:	b2d8      	uxtb	r0, r3
 80037e2:	f107 020c 	add.w	r2, r7, #12
 80037e6:	2302      	movs	r3, #2
 80037e8:	21b6      	movs	r1, #182	; 0xb6
 80037ea:	f000 fe59 	bl	80044a0 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80037ee:	7b7b      	ldrb	r3, [r7, #13]
 80037f0:	021b      	lsls	r3, r3, #8
 80037f2:	b21a      	sxth	r2, r3
 80037f4:	7b3b      	ldrb	r3, [r7, #12]
 80037f6:	b21b      	sxth	r3, r3
 80037f8:	4313      	orrs	r3, r2
 80037fa:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 80037fc:	88fb      	ldrh	r3, [r7, #6]
 80037fe:	b2d8      	uxtb	r0, r3
 8003800:	f107 020c 	add.w	r2, r7, #12
 8003804:	2302      	movs	r3, #2
 8003806:	21ba      	movs	r1, #186	; 0xba
 8003808:	f000 fe4a 	bl	80044a0 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800380c:	7b7b      	ldrb	r3, [r7, #13]
 800380e:	021b      	lsls	r3, r3, #8
 8003810:	b21a      	sxth	r2, r3
 8003812:	7b3b      	ldrb	r3, [r7, #12]
 8003814:	b21b      	sxth	r3, r3
 8003816:	4313      	orrs	r3, r2
 8003818:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 800381a:	88fb      	ldrh	r3, [r7, #6]
 800381c:	b2d8      	uxtb	r0, r3
 800381e:	f107 020c 	add.w	r2, r7, #12
 8003822:	2302      	movs	r3, #2
 8003824:	21a8      	movs	r1, #168	; 0xa8
 8003826:	f000 fe3b 	bl	80044a0 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800382a:	7b7b      	ldrb	r3, [r7, #13]
 800382c:	021b      	lsls	r3, r3, #8
 800382e:	b21a      	sxth	r2, r3
 8003830:	7b3b      	ldrb	r3, [r7, #12]
 8003832:	b21b      	sxth	r3, r3
 8003834:	4313      	orrs	r3, r2
 8003836:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8003838:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800383c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	ee07 3a90 	vmov	s15, r3
 8003846:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800384a:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800384e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	ee07 3a90 	vmov	s15, r3
 8003858:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800385c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003860:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003864:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	ee07 3a90 	vmov	s15, r3
 800386e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003872:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003876:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800387a:	ee07 3a90 	vmov	s15, r3
 800387e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003882:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003886:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 800388a:	edd7 7a04 	vldr	s15, [r7, #16]
 800388e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003892:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003896:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 800389a:	edd7 7a04 	vldr	s15, [r7, #16]
 800389e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80038e4 <HTS221_H_ReadHumidity+0x130>
 80038a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038aa:	dd01      	ble.n	80038b0 <HTS221_H_ReadHumidity+0xfc>
 80038ac:	4b0e      	ldr	r3, [pc, #56]	; (80038e8 <HTS221_H_ReadHumidity+0x134>)
 80038ae:	e00a      	b.n	80038c6 <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 80038b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80038b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80038b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038bc:	d502      	bpl.n	80038c4 <HTS221_H_ReadHumidity+0x110>
 80038be:	f04f 0300 	mov.w	r3, #0
 80038c2:	e000      	b.n	80038c6 <HTS221_H_ReadHumidity+0x112>
 80038c4:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 80038c6:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 80038c8:	edd7 7a04 	vldr	s15, [r7, #16]
 80038cc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80038d0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80038d4:	eef0 7a66 	vmov.f32	s15, s13
}
 80038d8:	eeb0 0a67 	vmov.f32	s0, s15
 80038dc:	3720      	adds	r7, #32
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	447a0000 	.word	0x447a0000
 80038e8:	447a0000 	.word	0x447a0000

080038ec <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	463b      	mov	r3, r7
 80038f4:	e883 0003 	stmia.w	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 80038f8:	783b      	ldrb	r3, [r7, #0]
 80038fa:	461a      	mov	r2, r3
 80038fc:	2120      	movs	r1, #32
 80038fe:	203c      	movs	r0, #60	; 0x3c
 8003900:	f000 fd96 	bl	8004430 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 8003904:	787b      	ldrb	r3, [r7, #1]
 8003906:	461a      	mov	r2, r3
 8003908:	2121      	movs	r1, #33	; 0x21
 800390a:	203c      	movs	r0, #60	; 0x3c
 800390c:	f000 fd90 	bl	8004430 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 8003910:	78bb      	ldrb	r3, [r7, #2]
 8003912:	461a      	mov	r2, r3
 8003914:	2122      	movs	r1, #34	; 0x22
 8003916:	203c      	movs	r0, #60	; 0x3c
 8003918:	f000 fd8a 	bl	8004430 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 800391c:	78fb      	ldrb	r3, [r7, #3]
 800391e:	461a      	mov	r2, r3
 8003920:	2123      	movs	r1, #35	; 0x23
 8003922:	203c      	movs	r0, #60	; 0x3c
 8003924:	f000 fd84 	bl	8004430 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 8003928:	793b      	ldrb	r3, [r7, #4]
 800392a:	461a      	mov	r2, r3
 800392c:	2124      	movs	r1, #36	; 0x24
 800392e:	203c      	movs	r0, #60	; 0x3c
 8003930:	f000 fd7e 	bl	8004430 <SENSOR_IO_Write>
}
 8003934:	bf00      	nop
 8003936:	3708      	adds	r7, #8
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8003942:	2300      	movs	r3, #0
 8003944:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8003946:	2122      	movs	r1, #34	; 0x22
 8003948:	203c      	movs	r0, #60	; 0x3c
 800394a:	f000 fd8b 	bl	8004464 <SENSOR_IO_Read>
 800394e:	4603      	mov	r3, r0
 8003950:	71fb      	strb	r3, [r7, #7]

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 8003952:	79fb      	ldrb	r3, [r7, #7]
 8003954:	f023 0303 	bic.w	r3, r3, #3
 8003958:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
 800395a:	79fb      	ldrb	r3, [r7, #7]
 800395c:	f043 0303 	orr.w	r3, r3, #3
 8003960:	71fb      	strb	r3, [r7, #7]
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8003962:	79fb      	ldrb	r3, [r7, #7]
 8003964:	461a      	mov	r2, r3
 8003966:	2122      	movs	r1, #34	; 0x22
 8003968:	203c      	movs	r0, #60	; 0x3c
 800396a:	f000 fd61 	bl	8004430 <SENSOR_IO_Write>
}
 800396e:	bf00      	nop
 8003970:	3708      	adds	r7, #8
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}

08003976 <LIS3MDL_MagReadID>:
/**
  * @brief  Read LIS3MDL ID.
  * @retval ID 
  */
uint8_t LIS3MDL_MagReadID(void)
{
 8003976:	b580      	push	{r7, lr}
 8003978:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 800397a:	f000 fd4f 	bl	800441c <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 800397e:	210f      	movs	r1, #15
 8003980:	203c      	movs	r0, #60	; 0x3c
 8003982:	f000 fd6f 	bl	8004464 <SENSOR_IO_Read>
 8003986:	4603      	mov	r3, r0
}
 8003988:	4618      	mov	r0, r3
 800398a:	bd80      	pop	{r7, pc}

0800398c <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	4603      	mov	r3, r0
 8003994:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0;
 8003996:	2300      	movs	r3, #0
 8003998:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 800399a:	2122      	movs	r1, #34	; 0x22
 800399c:	203c      	movs	r0, #60	; 0x3c
 800399e:	f000 fd61 	bl	8004464 <SENSOR_IO_Read>
 80039a2:	4603      	mov	r3, r0
 80039a4:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 80039a6:	7bfb      	ldrb	r3, [r7, #15]
 80039a8:	f023 0320 	bic.w	r3, r3, #32
 80039ac:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80039ae:	88fb      	ldrh	r3, [r7, #6]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d003      	beq.n	80039bc <LIS3MDL_MagLowPower+0x30>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 80039b4:	7bfb      	ldrb	r3, [r7, #15]
 80039b6:	f043 0320 	orr.w	r3, r3, #32
 80039ba:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 80039bc:	7bfb      	ldrb	r3, [r7, #15]
 80039be:	461a      	mov	r2, r3
 80039c0:	2122      	movs	r1, #34	; 0x22
 80039c2:	203c      	movs	r0, #60	; 0x3c
 80039c4:	f000 fd34 	bl	8004430 <SENSOR_IO_Write>
}
 80039c8:	bf00      	nop
 80039ca:	3710      	adds	r7, #16
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b088      	sub	sp, #32
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlm= 0;
 80039d8:	2300      	movs	r3, #0
 80039da:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 80039dc:	2300      	movs	r3, #0
 80039de:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 80039e0:	f04f 0300 	mov.w	r3, #0
 80039e4:	61bb      	str	r3, [r7, #24]
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 80039e6:	2121      	movs	r1, #33	; 0x21
 80039e8:	203c      	movs	r0, #60	; 0x3c
 80039ea:	f000 fd3b 	bl	8004464 <SENSOR_IO_Read>
 80039ee:	4603      	mov	r3, r0
 80039f0:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 80039f2:	f107 0208 	add.w	r2, r7, #8
 80039f6:	2306      	movs	r3, #6
 80039f8:	21a8      	movs	r1, #168	; 0xa8
 80039fa:	203c      	movs	r0, #60	; 0x3c
 80039fc:	f000 fd50 	bl	80044a0 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8003a00:	2300      	movs	r3, #0
 8003a02:	77fb      	strb	r3, [r7, #31]
 8003a04:	e01f      	b.n	8003a46 <LIS3MDL_MagReadXYZ+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8003a06:	7ffb      	ldrb	r3, [r7, #31]
 8003a08:	005b      	lsls	r3, r3, #1
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	f107 0220 	add.w	r2, r7, #32
 8003a10:	4413      	add	r3, r2
 8003a12:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	021b      	lsls	r3, r3, #8
 8003a1a:	b29a      	uxth	r2, r3
 8003a1c:	7ffb      	ldrb	r3, [r7, #31]
 8003a1e:	005b      	lsls	r3, r3, #1
 8003a20:	f107 0120 	add.w	r1, r7, #32
 8003a24:	440b      	add	r3, r1
 8003a26:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	4413      	add	r3, r2
 8003a2e:	b29a      	uxth	r2, r3
 8003a30:	7ffb      	ldrb	r3, [r7, #31]
 8003a32:	b212      	sxth	r2, r2
 8003a34:	005b      	lsls	r3, r3, #1
 8003a36:	f107 0120 	add.w	r1, r7, #32
 8003a3a:	440b      	add	r3, r1
 8003a3c:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8003a40:	7ffb      	ldrb	r3, [r7, #31]
 8003a42:	3301      	adds	r3, #1
 8003a44:	77fb      	strb	r3, [r7, #31]
 8003a46:	7ffb      	ldrb	r3, [r7, #31]
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d9dc      	bls.n	8003a06 <LIS3MDL_MagReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 8003a4c:	7dfb      	ldrb	r3, [r7, #23]
 8003a4e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003a52:	2b20      	cmp	r3, #32
 8003a54:	d00c      	beq.n	8003a70 <LIS3MDL_MagReadXYZ+0xa0>
 8003a56:	2b20      	cmp	r3, #32
 8003a58:	dc02      	bgt.n	8003a60 <LIS3MDL_MagReadXYZ+0x90>
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d005      	beq.n	8003a6a <LIS3MDL_MagReadXYZ+0x9a>
 8003a5e:	e010      	b.n	8003a82 <LIS3MDL_MagReadXYZ+0xb2>
 8003a60:	2b40      	cmp	r3, #64	; 0x40
 8003a62:	d008      	beq.n	8003a76 <LIS3MDL_MagReadXYZ+0xa6>
 8003a64:	2b60      	cmp	r3, #96	; 0x60
 8003a66:	d009      	beq.n	8003a7c <LIS3MDL_MagReadXYZ+0xac>
 8003a68:	e00b      	b.n	8003a82 <LIS3MDL_MagReadXYZ+0xb2>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 8003a6a:	4b19      	ldr	r3, [pc, #100]	; (8003ad0 <LIS3MDL_MagReadXYZ+0x100>)
 8003a6c:	61bb      	str	r3, [r7, #24]
    break;
 8003a6e:	e008      	b.n	8003a82 <LIS3MDL_MagReadXYZ+0xb2>
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 8003a70:	4b18      	ldr	r3, [pc, #96]	; (8003ad4 <LIS3MDL_MagReadXYZ+0x104>)
 8003a72:	61bb      	str	r3, [r7, #24]
    break;
 8003a74:	e005      	b.n	8003a82 <LIS3MDL_MagReadXYZ+0xb2>
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 8003a76:	4b18      	ldr	r3, [pc, #96]	; (8003ad8 <LIS3MDL_MagReadXYZ+0x108>)
 8003a78:	61bb      	str	r3, [r7, #24]
    break;
 8003a7a:	e002      	b.n	8003a82 <LIS3MDL_MagReadXYZ+0xb2>
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 8003a7c:	4b17      	ldr	r3, [pc, #92]	; (8003adc <LIS3MDL_MagReadXYZ+0x10c>)
 8003a7e:	61bb      	str	r3, [r7, #24]
    break;    
 8003a80:	bf00      	nop
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 8003a82:	2300      	movs	r3, #0
 8003a84:	77fb      	strb	r3, [r7, #31]
 8003a86:	e01b      	b.n	8003ac0 <LIS3MDL_MagReadXYZ+0xf0>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8003a88:	7ffb      	ldrb	r3, [r7, #31]
 8003a8a:	005b      	lsls	r3, r3, #1
 8003a8c:	f107 0220 	add.w	r2, r7, #32
 8003a90:	4413      	add	r3, r2
 8003a92:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8003a96:	ee07 3a90 	vmov	s15, r3
 8003a9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a9e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aa6:	7ffb      	ldrb	r3, [r7, #31]
 8003aa8:	005b      	lsls	r3, r3, #1
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	4413      	add	r3, r2
 8003aae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ab2:	ee17 2a90 	vmov	r2, s15
 8003ab6:	b212      	sxth	r2, r2
 8003ab8:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8003aba:	7ffb      	ldrb	r3, [r7, #31]
 8003abc:	3301      	adds	r3, #1
 8003abe:	77fb      	strb	r3, [r7, #31]
 8003ac0:	7ffb      	ldrb	r3, [r7, #31]
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d9e0      	bls.n	8003a88 <LIS3MDL_MagReadXYZ+0xb8>
  }
}
 8003ac6:	bf00      	nop
 8003ac8:	3720      	adds	r7, #32
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	3e0f5c29 	.word	0x3e0f5c29
 8003ad4:	3e947ae1 	.word	0x3e947ae1
 8003ad8:	3edc28f6 	.word	0x3edc28f6
 8003adc:	3f147ae1 	.word	0x3f147ae1

08003ae0 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8003aea:	2300      	movs	r3, #0
 8003aec:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8003aee:	2110      	movs	r1, #16
 8003af0:	20d4      	movs	r0, #212	; 0xd4
 8003af2:	f000 fcb7 	bl	8004464 <SENSOR_IO_Read>
 8003af6:	4603      	mov	r3, r0
 8003af8:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8003afa:	88fb      	ldrh	r3, [r7, #6]
 8003afc:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8003afe:	7bbb      	ldrb	r3, [r7, #14]
 8003b00:	f003 0303 	and.w	r3, r3, #3
 8003b04:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8003b06:	7bba      	ldrb	r2, [r7, #14]
 8003b08:	7bfb      	ldrb	r3, [r7, #15]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8003b0e:	7bbb      	ldrb	r3, [r7, #14]
 8003b10:	461a      	mov	r2, r3
 8003b12:	2110      	movs	r1, #16
 8003b14:	20d4      	movs	r0, #212	; 0xd4
 8003b16:	f000 fc8b 	bl	8004430 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8003b1a:	2112      	movs	r1, #18
 8003b1c:	20d4      	movs	r0, #212	; 0xd4
 8003b1e:	f000 fca1 	bl	8004464 <SENSOR_IO_Read>
 8003b22:	4603      	mov	r3, r0
 8003b24:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8003b26:	88fb      	ldrh	r3, [r7, #6]
 8003b28:	0a1b      	lsrs	r3, r3, #8
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8003b2e:	7bbb      	ldrb	r3, [r7, #14]
 8003b30:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8003b34:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8003b36:	7bba      	ldrb	r2, [r7, #14]
 8003b38:	7bfb      	ldrb	r3, [r7, #15]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8003b3e:	7bbb      	ldrb	r3, [r7, #14]
 8003b40:	461a      	mov	r2, r3
 8003b42:	2112      	movs	r1, #18
 8003b44:	20d4      	movs	r0, #212	; 0xd4
 8003b46:	f000 fc73 	bl	8004430 <SENSOR_IO_Write>
}
 8003b4a:	bf00      	nop
 8003b4c:	3710      	adds	r7, #16
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}

08003b52 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8003b52:	b580      	push	{r7, lr}
 8003b54:	b082      	sub	sp, #8
 8003b56:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8003b5c:	2110      	movs	r1, #16
 8003b5e:	20d4      	movs	r0, #212	; 0xd4
 8003b60:	f000 fc80 	bl	8004464 <SENSOR_IO_Read>
 8003b64:	4603      	mov	r3, r0
 8003b66:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8003b68:	79fb      	ldrb	r3, [r7, #7]
 8003b6a:	f003 030f 	and.w	r3, r3, #15
 8003b6e:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8003b70:	79fb      	ldrb	r3, [r7, #7]
 8003b72:	461a      	mov	r2, r3
 8003b74:	2110      	movs	r1, #16
 8003b76:	20d4      	movs	r0, #212	; 0xd4
 8003b78:	f000 fc5a 	bl	8004430 <SENSOR_IO_Write>
}
 8003b7c:	bf00      	nop
 8003b7e:	3708      	adds	r7, #8
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8003b84:	b580      	push	{r7, lr}
 8003b86:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8003b88:	f000 fc48 	bl	800441c <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8003b8c:	210f      	movs	r1, #15
 8003b8e:	20d4      	movs	r0, #212	; 0xd4
 8003b90:	f000 fc68 	bl	8004464 <SENSOR_IO_Read>
 8003b94:	4603      	mov	r3, r0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	bd80      	pop	{r7, pc}

08003b9a <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8003b9a:	b580      	push	{r7, lr}
 8003b9c:	b084      	sub	sp, #16
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8003ba8:	2115      	movs	r1, #21
 8003baa:	20d4      	movs	r0, #212	; 0xd4
 8003bac:	f000 fc5a 	bl	8004464 <SENSOR_IO_Read>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8003bb4:	7bfb      	ldrb	r3, [r7, #15]
 8003bb6:	f023 0310 	bic.w	r3, r3, #16
 8003bba:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8003bbc:	88fb      	ldrh	r3, [r7, #6]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d003      	beq.n	8003bca <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8003bc2:	7bfb      	ldrb	r3, [r7, #15]
 8003bc4:	f043 0310 	orr.w	r3, r3, #16
 8003bc8:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8003bca:	7bfb      	ldrb	r3, [r7, #15]
 8003bcc:	461a      	mov	r2, r3
 8003bce:	2115      	movs	r1, #21
 8003bd0:	20d4      	movs	r0, #212	; 0xd4
 8003bd2:	f000 fc2d 	bl	8004430 <SENSOR_IO_Write>
}
 8003bd6:	bf00      	nop
 8003bd8:	3710      	adds	r7, #16
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
	...

08003be0 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b088      	sub	sp, #32
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8003be8:	2300      	movs	r3, #0
 8003bea:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8003bec:	2300      	movs	r3, #0
 8003bee:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8003bf0:	f04f 0300 	mov.w	r3, #0
 8003bf4:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8003bf6:	2110      	movs	r1, #16
 8003bf8:	20d4      	movs	r0, #212	; 0xd4
 8003bfa:	f000 fc33 	bl	8004464 <SENSOR_IO_Read>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8003c02:	f107 0208 	add.w	r2, r7, #8
 8003c06:	2306      	movs	r3, #6
 8003c08:	2128      	movs	r1, #40	; 0x28
 8003c0a:	20d4      	movs	r0, #212	; 0xd4
 8003c0c:	f000 fc48 	bl	80044a0 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8003c10:	2300      	movs	r3, #0
 8003c12:	77fb      	strb	r3, [r7, #31]
 8003c14:	e01f      	b.n	8003c56 <LSM6DSL_AccReadXYZ+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8003c16:	7ffb      	ldrb	r3, [r7, #31]
 8003c18:	005b      	lsls	r3, r3, #1
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	f107 0220 	add.w	r2, r7, #32
 8003c20:	4413      	add	r3, r2
 8003c22:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	021b      	lsls	r3, r3, #8
 8003c2a:	b29a      	uxth	r2, r3
 8003c2c:	7ffb      	ldrb	r3, [r7, #31]
 8003c2e:	005b      	lsls	r3, r3, #1
 8003c30:	f107 0120 	add.w	r1, r7, #32
 8003c34:	440b      	add	r3, r1
 8003c36:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	4413      	add	r3, r2
 8003c3e:	b29a      	uxth	r2, r3
 8003c40:	7ffb      	ldrb	r3, [r7, #31]
 8003c42:	b212      	sxth	r2, r2
 8003c44:	005b      	lsls	r3, r3, #1
 8003c46:	f107 0120 	add.w	r1, r7, #32
 8003c4a:	440b      	add	r3, r1
 8003c4c:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8003c50:	7ffb      	ldrb	r3, [r7, #31]
 8003c52:	3301      	adds	r3, #1
 8003c54:	77fb      	strb	r3, [r7, #31]
 8003c56:	7ffb      	ldrb	r3, [r7, #31]
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d9dc      	bls.n	8003c16 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8003c5c:	7dfb      	ldrb	r3, [r7, #23]
 8003c5e:	f003 030c 	and.w	r3, r3, #12
 8003c62:	2b0c      	cmp	r3, #12
 8003c64:	d828      	bhi.n	8003cb8 <LSM6DSL_AccReadXYZ+0xd8>
 8003c66:	a201      	add	r2, pc, #4	; (adr r2, 8003c6c <LSM6DSL_AccReadXYZ+0x8c>)
 8003c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c6c:	08003ca1 	.word	0x08003ca1
 8003c70:	08003cb9 	.word	0x08003cb9
 8003c74:	08003cb9 	.word	0x08003cb9
 8003c78:	08003cb9 	.word	0x08003cb9
 8003c7c:	08003cb3 	.word	0x08003cb3
 8003c80:	08003cb9 	.word	0x08003cb9
 8003c84:	08003cb9 	.word	0x08003cb9
 8003c88:	08003cb9 	.word	0x08003cb9
 8003c8c:	08003ca7 	.word	0x08003ca7
 8003c90:	08003cb9 	.word	0x08003cb9
 8003c94:	08003cb9 	.word	0x08003cb9
 8003c98:	08003cb9 	.word	0x08003cb9
 8003c9c:	08003cad 	.word	0x08003cad
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8003ca0:	4b18      	ldr	r3, [pc, #96]	; (8003d04 <LSM6DSL_AccReadXYZ+0x124>)
 8003ca2:	61bb      	str	r3, [r7, #24]
    break;
 8003ca4:	e008      	b.n	8003cb8 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8003ca6:	4b18      	ldr	r3, [pc, #96]	; (8003d08 <LSM6DSL_AccReadXYZ+0x128>)
 8003ca8:	61bb      	str	r3, [r7, #24]
    break;
 8003caa:	e005      	b.n	8003cb8 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8003cac:	4b17      	ldr	r3, [pc, #92]	; (8003d0c <LSM6DSL_AccReadXYZ+0x12c>)
 8003cae:	61bb      	str	r3, [r7, #24]
    break;
 8003cb0:	e002      	b.n	8003cb8 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8003cb2:	4b17      	ldr	r3, [pc, #92]	; (8003d10 <LSM6DSL_AccReadXYZ+0x130>)
 8003cb4:	61bb      	str	r3, [r7, #24]
    break;    
 8003cb6:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8003cb8:	2300      	movs	r3, #0
 8003cba:	77fb      	strb	r3, [r7, #31]
 8003cbc:	e01b      	b.n	8003cf6 <LSM6DSL_AccReadXYZ+0x116>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8003cbe:	7ffb      	ldrb	r3, [r7, #31]
 8003cc0:	005b      	lsls	r3, r3, #1
 8003cc2:	f107 0220 	add.w	r2, r7, #32
 8003cc6:	4413      	add	r3, r2
 8003cc8:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8003ccc:	ee07 3a90 	vmov	s15, r3
 8003cd0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003cd4:	edd7 7a06 	vldr	s15, [r7, #24]
 8003cd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cdc:	7ffb      	ldrb	r3, [r7, #31]
 8003cde:	005b      	lsls	r3, r3, #1
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	4413      	add	r3, r2
 8003ce4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ce8:	ee17 2a90 	vmov	r2, s15
 8003cec:	b212      	sxth	r2, r2
 8003cee:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8003cf0:	7ffb      	ldrb	r3, [r7, #31]
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	77fb      	strb	r3, [r7, #31]
 8003cf6:	7ffb      	ldrb	r3, [r7, #31]
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	d9e0      	bls.n	8003cbe <LSM6DSL_AccReadXYZ+0xde>
  }
}
 8003cfc:	bf00      	nop
 8003cfe:	3720      	adds	r7, #32
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	3d79db23 	.word	0x3d79db23
 8003d08:	3df9db23 	.word	0x3df9db23
 8003d0c:	3e79db23 	.word	0x3e79db23
 8003d10:	3ef9db23 	.word	0x3ef9db23

08003d14 <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8003d22:	2111      	movs	r1, #17
 8003d24:	20d4      	movs	r0, #212	; 0xd4
 8003d26:	f000 fb9d 	bl	8004464 <SENSOR_IO_Read>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8003d2e:	88fb      	ldrh	r3, [r7, #6]
 8003d30:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8003d32:	7bbb      	ldrb	r3, [r7, #14]
 8003d34:	f003 0303 	and.w	r3, r3, #3
 8003d38:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8003d3a:	7bba      	ldrb	r2, [r7, #14]
 8003d3c:	7bfb      	ldrb	r3, [r7, #15]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 8003d42:	7bbb      	ldrb	r3, [r7, #14]
 8003d44:	461a      	mov	r2, r3
 8003d46:	2111      	movs	r1, #17
 8003d48:	20d4      	movs	r0, #212	; 0xd4
 8003d4a:	f000 fb71 	bl	8004430 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8003d4e:	2112      	movs	r1, #18
 8003d50:	20d4      	movs	r0, #212	; 0xd4
 8003d52:	f000 fb87 	bl	8004464 <SENSOR_IO_Read>
 8003d56:	4603      	mov	r3, r0
 8003d58:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8003d5a:	88fb      	ldrh	r3, [r7, #6]
 8003d5c:	0a1b      	lsrs	r3, r3, #8
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8003d62:	7bbb      	ldrb	r3, [r7, #14]
 8003d64:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8003d68:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8003d6a:	7bba      	ldrb	r2, [r7, #14]
 8003d6c:	7bfb      	ldrb	r3, [r7, #15]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8003d72:	7bbb      	ldrb	r3, [r7, #14]
 8003d74:	461a      	mov	r2, r3
 8003d76:	2112      	movs	r1, #18
 8003d78:	20d4      	movs	r0, #212	; 0xd4
 8003d7a:	f000 fb59 	bl	8004430 <SENSOR_IO_Write>
}
 8003d7e:	bf00      	nop
 8003d80:	3710      	adds	r7, #16
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}

08003d86 <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 8003d86:	b580      	push	{r7, lr}
 8003d88:	b082      	sub	sp, #8
 8003d8a:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8003d90:	2111      	movs	r1, #17
 8003d92:	20d4      	movs	r0, #212	; 0xd4
 8003d94:	f000 fb66 	bl	8004464 <SENSOR_IO_Read>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8003d9c:	79fb      	ldrb	r3, [r7, #7]
 8003d9e:	f003 030f 	and.w	r3, r3, #15
 8003da2:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 8003da4:	79fb      	ldrb	r3, [r7, #7]
 8003da6:	461a      	mov	r2, r3
 8003da8:	2111      	movs	r1, #17
 8003daa:	20d4      	movs	r0, #212	; 0xd4
 8003dac:	f000 fb40 	bl	8004430 <SENSOR_IO_Write>
}
 8003db0:	bf00      	nop
 8003db2:	3708      	adds	r7, #8
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <LSM6DSL_GyroReadID>:
/**
  * @brief  Read ID address of LSM6DSL
  * @retval ID 
  */
uint8_t LSM6DSL_GyroReadID(void)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8003dbc:	f000 fb2e 	bl	800441c <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 8003dc0:	210f      	movs	r1, #15
 8003dc2:	20d4      	movs	r0, #212	; 0xd4
 8003dc4:	f000 fb4e 	bl	8004464 <SENSOR_IO_Read>
 8003dc8:	4603      	mov	r3, r0
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	bd80      	pop	{r7, pc}

08003dce <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 8003dce:	b580      	push	{r7, lr}
 8003dd0:	b084      	sub	sp, #16
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 8003ddc:	2116      	movs	r1, #22
 8003dde:	20d4      	movs	r0, #212	; 0xd4
 8003de0:	f000 fb40 	bl	8004464 <SENSOR_IO_Read>
 8003de4:	4603      	mov	r3, r0
 8003de6:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 8003de8:	7bfb      	ldrb	r3, [r7, #15]
 8003dea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003dee:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8003df0:	88fb      	ldrh	r3, [r7, #6]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d003      	beq.n	8003dfe <LSM6DSL_GyroLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 8003df6:	7bfb      	ldrb	r3, [r7, #15]
 8003df8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003dfc:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 8003dfe:	7bfb      	ldrb	r3, [r7, #15]
 8003e00:	461a      	mov	r2, r3
 8003e02:	2116      	movs	r1, #22
 8003e04:	20d4      	movs	r0, #212	; 0xd4
 8003e06:	f000 fb13 	bl	8004430 <SENSOR_IO_Write>
}
 8003e0a:	bf00      	nop
 8003e0c:	3710      	adds	r7, #16
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
	...

08003e14 <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b088      	sub	sp, #32
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlg= 0;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8003e20:	2300      	movs	r3, #0
 8003e22:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8003e24:	f04f 0300 	mov.w	r3, #0
 8003e28:	61bb      	str	r3, [r7, #24]
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8003e2a:	2111      	movs	r1, #17
 8003e2c:	20d4      	movs	r0, #212	; 0xd4
 8003e2e:	f000 fb19 	bl	8004464 <SENSOR_IO_Read>
 8003e32:	4603      	mov	r3, r0
 8003e34:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 8003e36:	f107 0208 	add.w	r2, r7, #8
 8003e3a:	2306      	movs	r3, #6
 8003e3c:	2122      	movs	r1, #34	; 0x22
 8003e3e:	20d4      	movs	r0, #212	; 0xd4
 8003e40:	f000 fb2e 	bl	80044a0 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8003e44:	2300      	movs	r3, #0
 8003e46:	77fb      	strb	r3, [r7, #31]
 8003e48:	e01f      	b.n	8003e8a <LSM6DSL_GyroReadXYZAngRate+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8003e4a:	7ffb      	ldrb	r3, [r7, #31]
 8003e4c:	005b      	lsls	r3, r3, #1
 8003e4e:	3301      	adds	r3, #1
 8003e50:	f107 0220 	add.w	r2, r7, #32
 8003e54:	4413      	add	r3, r2
 8003e56:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	021b      	lsls	r3, r3, #8
 8003e5e:	b29a      	uxth	r2, r3
 8003e60:	7ffb      	ldrb	r3, [r7, #31]
 8003e62:	005b      	lsls	r3, r3, #1
 8003e64:	f107 0120 	add.w	r1, r7, #32
 8003e68:	440b      	add	r3, r1
 8003e6a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	4413      	add	r3, r2
 8003e72:	b29a      	uxth	r2, r3
 8003e74:	7ffb      	ldrb	r3, [r7, #31]
 8003e76:	b212      	sxth	r2, r2
 8003e78:	005b      	lsls	r3, r3, #1
 8003e7a:	f107 0120 	add.w	r1, r7, #32
 8003e7e:	440b      	add	r3, r1
 8003e80:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8003e84:	7ffb      	ldrb	r3, [r7, #31]
 8003e86:	3301      	adds	r3, #1
 8003e88:	77fb      	strb	r3, [r7, #31]
 8003e8a:	7ffb      	ldrb	r3, [r7, #31]
 8003e8c:	2b02      	cmp	r3, #2
 8003e8e:	d9dc      	bls.n	8003e4a <LSM6DSL_GyroReadXYZAngRate+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 8003e90:	7dfb      	ldrb	r3, [r7, #23]
 8003e92:	f003 030c 	and.w	r3, r3, #12
 8003e96:	2b0c      	cmp	r3, #12
 8003e98:	d828      	bhi.n	8003eec <LSM6DSL_GyroReadXYZAngRate+0xd8>
 8003e9a:	a201      	add	r2, pc, #4	; (adr r2, 8003ea0 <LSM6DSL_GyroReadXYZAngRate+0x8c>)
 8003e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ea0:	08003ed5 	.word	0x08003ed5
 8003ea4:	08003eed 	.word	0x08003eed
 8003ea8:	08003eed 	.word	0x08003eed
 8003eac:	08003eed 	.word	0x08003eed
 8003eb0:	08003edb 	.word	0x08003edb
 8003eb4:	08003eed 	.word	0x08003eed
 8003eb8:	08003eed 	.word	0x08003eed
 8003ebc:	08003eed 	.word	0x08003eed
 8003ec0:	08003ee1 	.word	0x08003ee1
 8003ec4:	08003eed 	.word	0x08003eed
 8003ec8:	08003eed 	.word	0x08003eed
 8003ecc:	08003eed 	.word	0x08003eed
 8003ed0:	08003ee7 	.word	0x08003ee7
  {
  case LSM6DSL_GYRO_FS_245:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 8003ed4:	4b16      	ldr	r3, [pc, #88]	; (8003f30 <LSM6DSL_GyroReadXYZAngRate+0x11c>)
 8003ed6:	61bb      	str	r3, [r7, #24]
    break;
 8003ed8:	e008      	b.n	8003eec <LSM6DSL_GyroReadXYZAngRate+0xd8>
  case LSM6DSL_GYRO_FS_500:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 8003eda:	4b16      	ldr	r3, [pc, #88]	; (8003f34 <LSM6DSL_GyroReadXYZAngRate+0x120>)
 8003edc:	61bb      	str	r3, [r7, #24]
    break;
 8003ede:	e005      	b.n	8003eec <LSM6DSL_GyroReadXYZAngRate+0xd8>
  case LSM6DSL_GYRO_FS_1000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 8003ee0:	4b15      	ldr	r3, [pc, #84]	; (8003f38 <LSM6DSL_GyroReadXYZAngRate+0x124>)
 8003ee2:	61bb      	str	r3, [r7, #24]
    break;
 8003ee4:	e002      	b.n	8003eec <LSM6DSL_GyroReadXYZAngRate+0xd8>
  case LSM6DSL_GYRO_FS_2000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 8003ee6:	4b15      	ldr	r3, [pc, #84]	; (8003f3c <LSM6DSL_GyroReadXYZAngRate+0x128>)
 8003ee8:	61bb      	str	r3, [r7, #24]
    break;    
 8003eea:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8003eec:	2300      	movs	r3, #0
 8003eee:	77fb      	strb	r3, [r7, #31]
 8003ef0:	e017      	b.n	8003f22 <LSM6DSL_GyroReadXYZAngRate+0x10e>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 8003ef2:	7ffb      	ldrb	r3, [r7, #31]
 8003ef4:	005b      	lsls	r3, r3, #1
 8003ef6:	f107 0220 	add.w	r2, r7, #32
 8003efa:	4413      	add	r3, r2
 8003efc:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8003f00:	ee07 3a90 	vmov	s15, r3
 8003f04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f08:	7ffb      	ldrb	r3, [r7, #31]
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	4413      	add	r3, r2
 8003f10:	edd7 7a06 	vldr	s15, [r7, #24]
 8003f14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f18:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8003f1c:	7ffb      	ldrb	r3, [r7, #31]
 8003f1e:	3301      	adds	r3, #1
 8003f20:	77fb      	strb	r3, [r7, #31]
 8003f22:	7ffb      	ldrb	r3, [r7, #31]
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	d9e4      	bls.n	8003ef2 <LSM6DSL_GyroReadXYZAngRate+0xde>
  }
}
 8003f28:	bf00      	nop
 8003f2a:	3720      	adds	r7, #32
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	410c0000 	.word	0x410c0000
 8003f34:	418c0000 	.word	0x418c0000
 8003f38:	420c0000 	.word	0x420c0000
 8003f3c:	428c0000 	.word	0x428c0000

08003f40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b088      	sub	sp, #32
 8003f44:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003f46:	f7fc fabf 	bl	80004c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003f4a:	f000 f824 	bl	8003f96 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003f4e:	f000 f90b 	bl	8004168 <MX_GPIO_Init>
  MX_I2C2_Init();
 8003f52:	f000 f899 	bl	8004088 <MX_I2C2_Init>
  MX_UART4_Init();
 8003f56:	f000 f8d7 	bl	8004108 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  BSP_ACCELERO_Init();
 8003f5a:	f000 fabf 	bl	80044dc <BSP_ACCELERO_Init>
  BSP_GYRO_Init();
 8003f5e:	f000 fb13 	bl	8004588 <BSP_GYRO_Init>
  BSP_MAGNETO_Init();
 8003f62:	f000 fb99 	bl	8004698 <BSP_MAGNETO_Init>
  BSP_HSENSOR_Init();
 8003f66:	f000 fb69 	bl	800463c <BSP_HSENSOR_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	// poll sensors at 10 Hz
	BSP_ACCELERO_AccGetXYZ(accelero);
 8003f6a:	f107 0314 	add.w	r3, r7, #20
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f000 faf2 	bl	8004558 <BSP_ACCELERO_AccGetXYZ>
	BSP_GYRO_GetXYZ(gyro);
 8003f74:	f107 0308 	add.w	r3, r7, #8
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f000 fb47 	bl	800460c <BSP_GYRO_GetXYZ>
	BSP_MAGNETO_GetXYZ(magneto);
 8003f7e:	463b      	mov	r3, r7
 8003f80:	4618      	mov	r0, r3
 8003f82:	f000 fbb5 	bl	80046f0 <BSP_MAGNETO_GetXYZ>
	hsensor = BSP_HSENSOR_ReadHumidity();
 8003f86:	f000 fb79 	bl	800467c <BSP_HSENSOR_ReadHumidity>
 8003f8a:	ed87 0a07 	vstr	s0, [r7, #28]
	HAL_Delay(100);
 8003f8e:	2064      	movs	r0, #100	; 0x64
 8003f90:	f7fc fb0e 	bl	80005b0 <HAL_Delay>
	BSP_ACCELERO_AccGetXYZ(accelero);
 8003f94:	e7e9      	b.n	8003f6a <main+0x2a>

08003f96 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003f96:	b580      	push	{r7, lr}
 8003f98:	b0b8      	sub	sp, #224	; 0xe0
 8003f9a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003f9c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003fa0:	2244      	movs	r2, #68	; 0x44
 8003fa2:	2100      	movs	r1, #0
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f000 fd3b 	bl	8004a20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003faa:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003fae:	2200      	movs	r2, #0
 8003fb0:	601a      	str	r2, [r3, #0]
 8003fb2:	605a      	str	r2, [r3, #4]
 8003fb4:	609a      	str	r2, [r3, #8]
 8003fb6:	60da      	str	r2, [r3, #12]
 8003fb8:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003fba:	463b      	mov	r3, r7
 8003fbc:	2288      	movs	r2, #136	; 0x88
 8003fbe:	2100      	movs	r1, #0
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f000 fd2d 	bl	8004a20 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8003fc6:	2310      	movs	r3, #16
 8003fc8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8003fd8:	2360      	movs	r3, #96	; 0x60
 8003fda:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003fde:	2302      	movs	r3, #2
 8003fe0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003fea:	2301      	movs	r3, #1
 8003fec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8003ff0:	2328      	movs	r3, #40	; 0x28
 8003ff2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003ff6:	2307      	movs	r3, #7
 8003ff8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003ffc:	2302      	movs	r3, #2
 8003ffe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004002:	2302      	movs	r3, #2
 8004004:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004008:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800400c:	4618      	mov	r0, r3
 800400e:	f7fd fcbb 	bl	8001988 <HAL_RCC_OscConfig>
 8004012:	4603      	mov	r3, r0
 8004014:	2b00      	cmp	r3, #0
 8004016:	d001      	beq.n	800401c <SystemClock_Config+0x86>
  {
    Error_Handler();
 8004018:	f000 f908 	bl	800422c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800401c:	230f      	movs	r3, #15
 800401e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004022:	2303      	movs	r3, #3
 8004024:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004028:	2300      	movs	r3, #0
 800402a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800402e:	2300      	movs	r3, #0
 8004030:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004034:	2300      	movs	r3, #0
 8004036:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800403a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800403e:	2104      	movs	r1, #4
 8004040:	4618      	mov	r0, r3
 8004042:	f7fe f887 	bl	8002154 <HAL_RCC_ClockConfig>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d001      	beq.n	8004050 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800404c:	f000 f8ee 	bl	800422c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_I2C2;
 8004050:	2388      	movs	r3, #136	; 0x88
 8004052:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8004054:	2300      	movs	r3, #0
 8004056:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8004058:	2300      	movs	r3, #0
 800405a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800405c:	463b      	mov	r3, r7
 800405e:	4618      	mov	r0, r3
 8004060:	f7fe fa7c 	bl	800255c <HAL_RCCEx_PeriphCLKConfig>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d001      	beq.n	800406e <SystemClock_Config+0xd8>
  {
    Error_Handler();
 800406a:	f000 f8df 	bl	800422c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800406e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004072:	f7fd fc33 	bl	80018dc <HAL_PWREx_ControlVoltageScaling>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d001      	beq.n	8004080 <SystemClock_Config+0xea>
  {
    Error_Handler();
 800407c:	f000 f8d6 	bl	800422c <Error_Handler>
  }
}
 8004080:	bf00      	nop
 8004082:	37e0      	adds	r7, #224	; 0xe0
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800408c:	4b1b      	ldr	r3, [pc, #108]	; (80040fc <MX_I2C2_Init+0x74>)
 800408e:	4a1c      	ldr	r2, [pc, #112]	; (8004100 <MX_I2C2_Init+0x78>)
 8004090:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8004092:	4b1a      	ldr	r3, [pc, #104]	; (80040fc <MX_I2C2_Init+0x74>)
 8004094:	4a1b      	ldr	r2, [pc, #108]	; (8004104 <MX_I2C2_Init+0x7c>)
 8004096:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8004098:	4b18      	ldr	r3, [pc, #96]	; (80040fc <MX_I2C2_Init+0x74>)
 800409a:	2200      	movs	r2, #0
 800409c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800409e:	4b17      	ldr	r3, [pc, #92]	; (80040fc <MX_I2C2_Init+0x74>)
 80040a0:	2201      	movs	r2, #1
 80040a2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80040a4:	4b15      	ldr	r3, [pc, #84]	; (80040fc <MX_I2C2_Init+0x74>)
 80040a6:	2200      	movs	r2, #0
 80040a8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80040aa:	4b14      	ldr	r3, [pc, #80]	; (80040fc <MX_I2C2_Init+0x74>)
 80040ac:	2200      	movs	r2, #0
 80040ae:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80040b0:	4b12      	ldr	r3, [pc, #72]	; (80040fc <MX_I2C2_Init+0x74>)
 80040b2:	2200      	movs	r2, #0
 80040b4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80040b6:	4b11      	ldr	r3, [pc, #68]	; (80040fc <MX_I2C2_Init+0x74>)
 80040b8:	2200      	movs	r2, #0
 80040ba:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80040bc:	4b0f      	ldr	r3, [pc, #60]	; (80040fc <MX_I2C2_Init+0x74>)
 80040be:	2200      	movs	r2, #0
 80040c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80040c2:	480e      	ldr	r0, [pc, #56]	; (80040fc <MX_I2C2_Init+0x74>)
 80040c4:	f7fc fe5c 	bl	8000d80 <HAL_I2C_Init>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d001      	beq.n	80040d2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80040ce:	f000 f8ad 	bl	800422c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80040d2:	2100      	movs	r1, #0
 80040d4:	4809      	ldr	r0, [pc, #36]	; (80040fc <MX_I2C2_Init+0x74>)
 80040d6:	f7fd fb5b 	bl	8001790 <HAL_I2CEx_ConfigAnalogFilter>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d001      	beq.n	80040e4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80040e0:	f000 f8a4 	bl	800422c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80040e4:	2100      	movs	r1, #0
 80040e6:	4805      	ldr	r0, [pc, #20]	; (80040fc <MX_I2C2_Init+0x74>)
 80040e8:	f7fd fb9d 	bl	8001826 <HAL_I2CEx_ConfigDigitalFilter>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d001      	beq.n	80040f6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80040f2:	f000 f89b 	bl	800422c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80040f6:	bf00      	nop
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	200000e4 	.word	0x200000e4
 8004100:	40005800 	.word	0x40005800
 8004104:	10909cec 	.word	0x10909cec

08004108 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800410c:	4b14      	ldr	r3, [pc, #80]	; (8004160 <MX_UART4_Init+0x58>)
 800410e:	4a15      	ldr	r2, [pc, #84]	; (8004164 <MX_UART4_Init+0x5c>)
 8004110:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8004112:	4b13      	ldr	r3, [pc, #76]	; (8004160 <MX_UART4_Init+0x58>)
 8004114:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004118:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800411a:	4b11      	ldr	r3, [pc, #68]	; (8004160 <MX_UART4_Init+0x58>)
 800411c:	2200      	movs	r2, #0
 800411e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8004120:	4b0f      	ldr	r3, [pc, #60]	; (8004160 <MX_UART4_Init+0x58>)
 8004122:	2200      	movs	r2, #0
 8004124:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8004126:	4b0e      	ldr	r3, [pc, #56]	; (8004160 <MX_UART4_Init+0x58>)
 8004128:	2200      	movs	r2, #0
 800412a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800412c:	4b0c      	ldr	r3, [pc, #48]	; (8004160 <MX_UART4_Init+0x58>)
 800412e:	220c      	movs	r2, #12
 8004130:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004132:	4b0b      	ldr	r3, [pc, #44]	; (8004160 <MX_UART4_Init+0x58>)
 8004134:	2200      	movs	r2, #0
 8004136:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8004138:	4b09      	ldr	r3, [pc, #36]	; (8004160 <MX_UART4_Init+0x58>)
 800413a:	2200      	movs	r2, #0
 800413c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800413e:	4b08      	ldr	r3, [pc, #32]	; (8004160 <MX_UART4_Init+0x58>)
 8004140:	2200      	movs	r2, #0
 8004142:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004144:	4b06      	ldr	r3, [pc, #24]	; (8004160 <MX_UART4_Init+0x58>)
 8004146:	2200      	movs	r2, #0
 8004148:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800414a:	4805      	ldr	r0, [pc, #20]	; (8004160 <MX_UART4_Init+0x58>)
 800414c:	f7fe feb6 	bl	8002ebc <HAL_UART_Init>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d001      	beq.n	800415a <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8004156:	f000 f869 	bl	800422c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800415a:	bf00      	nop
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	20000130 	.word	0x20000130
 8004164:	40004c00 	.word	0x40004c00

08004168 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b088      	sub	sp, #32
 800416c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800416e:	f107 030c 	add.w	r3, r7, #12
 8004172:	2200      	movs	r2, #0
 8004174:	601a      	str	r2, [r3, #0]
 8004176:	605a      	str	r2, [r3, #4]
 8004178:	609a      	str	r2, [r3, #8]
 800417a:	60da      	str	r2, [r3, #12]
 800417c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800417e:	4b28      	ldr	r3, [pc, #160]	; (8004220 <MX_GPIO_Init+0xb8>)
 8004180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004182:	4a27      	ldr	r2, [pc, #156]	; (8004220 <MX_GPIO_Init+0xb8>)
 8004184:	f043 0310 	orr.w	r3, r3, #16
 8004188:	64d3      	str	r3, [r2, #76]	; 0x4c
 800418a:	4b25      	ldr	r3, [pc, #148]	; (8004220 <MX_GPIO_Init+0xb8>)
 800418c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800418e:	f003 0310 	and.w	r3, r3, #16
 8004192:	60bb      	str	r3, [r7, #8]
 8004194:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004196:	4b22      	ldr	r3, [pc, #136]	; (8004220 <MX_GPIO_Init+0xb8>)
 8004198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800419a:	4a21      	ldr	r2, [pc, #132]	; (8004220 <MX_GPIO_Init+0xb8>)
 800419c:	f043 0301 	orr.w	r3, r3, #1
 80041a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80041a2:	4b1f      	ldr	r3, [pc, #124]	; (8004220 <MX_GPIO_Init+0xb8>)
 80041a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	607b      	str	r3, [r7, #4]
 80041ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80041ae:	4b1c      	ldr	r3, [pc, #112]	; (8004220 <MX_GPIO_Init+0xb8>)
 80041b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041b2:	4a1b      	ldr	r2, [pc, #108]	; (8004220 <MX_GPIO_Init+0xb8>)
 80041b4:	f043 0302 	orr.w	r3, r3, #2
 80041b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80041ba:	4b19      	ldr	r3, [pc, #100]	; (8004220 <MX_GPIO_Init+0xb8>)
 80041bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041be:	f003 0302 	and.w	r3, r3, #2
 80041c2:	603b      	str	r3, [r7, #0]
 80041c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80041c6:	2200      	movs	r2, #0
 80041c8:	2108      	movs	r1, #8
 80041ca:	4816      	ldr	r0, [pc, #88]	; (8004224 <MX_GPIO_Init+0xbc>)
 80041cc:	f7fc fdc0 	bl	8000d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80041d0:	2200      	movs	r2, #0
 80041d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80041d6:	4814      	ldr	r0, [pc, #80]	; (8004228 <MX_GPIO_Init+0xc0>)
 80041d8:	f7fc fdba 	bl	8000d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 80041dc:	2308      	movs	r3, #8
 80041de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041e0:	2301      	movs	r3, #1
 80041e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041e4:	2300      	movs	r3, #0
 80041e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041e8:	2300      	movs	r3, #0
 80041ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 80041ec:	f107 030c 	add.w	r3, r7, #12
 80041f0:	4619      	mov	r1, r3
 80041f2:	480c      	ldr	r0, [pc, #48]	; (8004224 <MX_GPIO_Init+0xbc>)
 80041f4:	f7fc fb10 	bl	8000818 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80041f8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80041fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041fe:	2301      	movs	r3, #1
 8004200:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004202:	2300      	movs	r3, #0
 8004204:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004206:	2300      	movs	r3, #0
 8004208:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800420a:	f107 030c 	add.w	r3, r7, #12
 800420e:	4619      	mov	r1, r3
 8004210:	4805      	ldr	r0, [pc, #20]	; (8004228 <MX_GPIO_Init+0xc0>)
 8004212:	f7fc fb01 	bl	8000818 <HAL_GPIO_Init>

}
 8004216:	bf00      	nop
 8004218:	3720      	adds	r7, #32
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	40021000 	.word	0x40021000
 8004224:	48001000 	.word	0x48001000
 8004228:	48000400 	.word	0x48000400

0800422c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800422c:	b480      	push	{r7}
 800422e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004230:	bf00      	nop
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
	...

0800423c <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b08a      	sub	sp, #40	; 0x28
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8004244:	4b27      	ldr	r3, [pc, #156]	; (80042e4 <I2Cx_MspInit+0xa8>)
 8004246:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004248:	4a26      	ldr	r2, [pc, #152]	; (80042e4 <I2Cx_MspInit+0xa8>)
 800424a:	f043 0302 	orr.w	r3, r3, #2
 800424e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004250:	4b24      	ldr	r3, [pc, #144]	; (80042e4 <I2Cx_MspInit+0xa8>)
 8004252:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004254:	f003 0302 	and.w	r3, r3, #2
 8004258:	613b      	str	r3, [r7, #16]
 800425a:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 800425c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004260:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8004262:	2312      	movs	r3, #18
 8004264:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8004266:	2301      	movs	r3, #1
 8004268:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800426a:	2303      	movs	r3, #3
 800426c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 800426e:	2304      	movs	r3, #4
 8004270:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8004272:	f107 0314 	add.w	r3, r7, #20
 8004276:	4619      	mov	r1, r3
 8004278:	481b      	ldr	r0, [pc, #108]	; (80042e8 <I2Cx_MspInit+0xac>)
 800427a:	f7fc facd 	bl	8000818 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800427e:	f107 0314 	add.w	r3, r7, #20
 8004282:	4619      	mov	r1, r3
 8004284:	4818      	ldr	r0, [pc, #96]	; (80042e8 <I2Cx_MspInit+0xac>)
 8004286:	f7fc fac7 	bl	8000818 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 800428a:	4b16      	ldr	r3, [pc, #88]	; (80042e4 <I2Cx_MspInit+0xa8>)
 800428c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800428e:	4a15      	ldr	r2, [pc, #84]	; (80042e4 <I2Cx_MspInit+0xa8>)
 8004290:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004294:	6593      	str	r3, [r2, #88]	; 0x58
 8004296:	4b13      	ldr	r3, [pc, #76]	; (80042e4 <I2Cx_MspInit+0xa8>)
 8004298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800429a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800429e:	60fb      	str	r3, [r7, #12]
 80042a0:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 80042a2:	4b10      	ldr	r3, [pc, #64]	; (80042e4 <I2Cx_MspInit+0xa8>)
 80042a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a6:	4a0f      	ldr	r2, [pc, #60]	; (80042e4 <I2Cx_MspInit+0xa8>)
 80042a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80042ac:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 80042ae:	4b0d      	ldr	r3, [pc, #52]	; (80042e4 <I2Cx_MspInit+0xa8>)
 80042b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b2:	4a0c      	ldr	r2, [pc, #48]	; (80042e4 <I2Cx_MspInit+0xa8>)
 80042b4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80042b8:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80042ba:	2200      	movs	r2, #0
 80042bc:	210f      	movs	r1, #15
 80042be:	2021      	movs	r0, #33	; 0x21
 80042c0:	f7fc fa73 	bl	80007aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80042c4:	2021      	movs	r0, #33	; 0x21
 80042c6:	f7fc fa8c 	bl	80007e2 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80042ca:	2200      	movs	r2, #0
 80042cc:	210f      	movs	r1, #15
 80042ce:	2022      	movs	r0, #34	; 0x22
 80042d0:	f7fc fa6b 	bl	80007aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 80042d4:	2022      	movs	r0, #34	; 0x22
 80042d6:	f7fc fa84 	bl	80007e2 <HAL_NVIC_EnableIRQ>
}
 80042da:	bf00      	nop
 80042dc:	3728      	adds	r7, #40	; 0x28
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	40021000 	.word	0x40021000
 80042e8:	48000400 	.word	0x48000400

080042ec <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a12      	ldr	r2, [pc, #72]	; (8004340 <I2Cx_Init+0x54>)
 80042f8:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a11      	ldr	r2, [pc, #68]	; (8004344 <I2Cx_Init+0x58>)
 80042fe:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2201      	movs	r2, #1
 800430a:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f7ff ff89 	bl	800423c <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f7fc fd28 	bl	8000d80 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8004330:	2100      	movs	r1, #0
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f7fd fa2c 	bl	8001790 <HAL_I2CEx_ConfigAnalogFilter>
}
 8004338:	bf00      	nop
 800433a:	3708      	adds	r7, #8
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}
 8004340:	40005800 	.word	0x40005800
 8004344:	00702681 	.word	0x00702681

08004348 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b08a      	sub	sp, #40	; 0x28
 800434c:	af04      	add	r7, sp, #16
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	4608      	mov	r0, r1
 8004352:	4611      	mov	r1, r2
 8004354:	461a      	mov	r2, r3
 8004356:	4603      	mov	r3, r0
 8004358:	72fb      	strb	r3, [r7, #11]
 800435a:	460b      	mov	r3, r1
 800435c:	813b      	strh	r3, [r7, #8]
 800435e:	4613      	mov	r3, r2
 8004360:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8004362:	2300      	movs	r3, #0
 8004364:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8004366:	7afb      	ldrb	r3, [r7, #11]
 8004368:	b299      	uxth	r1, r3
 800436a:	88f8      	ldrh	r0, [r7, #6]
 800436c:	893a      	ldrh	r2, [r7, #8]
 800436e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004372:	9302      	str	r3, [sp, #8]
 8004374:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004376:	9301      	str	r3, [sp, #4]
 8004378:	6a3b      	ldr	r3, [r7, #32]
 800437a:	9300      	str	r3, [sp, #0]
 800437c:	4603      	mov	r3, r0
 800437e:	68f8      	ldr	r0, [r7, #12]
 8004380:	f7fc fed0 	bl	8001124 <HAL_I2C_Mem_Read>
 8004384:	4603      	mov	r3, r0
 8004386:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8004388:	7dfb      	ldrb	r3, [r7, #23]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d004      	beq.n	8004398 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 800438e:	7afb      	ldrb	r3, [r7, #11]
 8004390:	4619      	mov	r1, r3
 8004392:	68f8      	ldr	r0, [r7, #12]
 8004394:	f000 f832 	bl	80043fc <I2Cx_Error>
  }
  return status;
 8004398:	7dfb      	ldrb	r3, [r7, #23]
}
 800439a:	4618      	mov	r0, r3
 800439c:	3718      	adds	r7, #24
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}

080043a2 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80043a2:	b580      	push	{r7, lr}
 80043a4:	b08a      	sub	sp, #40	; 0x28
 80043a6:	af04      	add	r7, sp, #16
 80043a8:	60f8      	str	r0, [r7, #12]
 80043aa:	4608      	mov	r0, r1
 80043ac:	4611      	mov	r1, r2
 80043ae:	461a      	mov	r2, r3
 80043b0:	4603      	mov	r3, r0
 80043b2:	72fb      	strb	r3, [r7, #11]
 80043b4:	460b      	mov	r3, r1
 80043b6:	813b      	strh	r3, [r7, #8]
 80043b8:	4613      	mov	r3, r2
 80043ba:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80043bc:	2300      	movs	r3, #0
 80043be:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80043c0:	7afb      	ldrb	r3, [r7, #11]
 80043c2:	b299      	uxth	r1, r3
 80043c4:	88f8      	ldrh	r0, [r7, #6]
 80043c6:	893a      	ldrh	r2, [r7, #8]
 80043c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80043cc:	9302      	str	r3, [sp, #8]
 80043ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80043d0:	9301      	str	r3, [sp, #4]
 80043d2:	6a3b      	ldr	r3, [r7, #32]
 80043d4:	9300      	str	r3, [sp, #0]
 80043d6:	4603      	mov	r3, r0
 80043d8:	68f8      	ldr	r0, [r7, #12]
 80043da:	f7fc fd8f 	bl	8000efc <HAL_I2C_Mem_Write>
 80043de:	4603      	mov	r3, r0
 80043e0:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80043e2:	7dfb      	ldrb	r3, [r7, #23]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d004      	beq.n	80043f2 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80043e8:	7afb      	ldrb	r3, [r7, #11]
 80043ea:	4619      	mov	r1, r3
 80043ec:	68f8      	ldr	r0, [r7, #12]
 80043ee:	f000 f805 	bl	80043fc <I2Cx_Error>
  }
  return status;
 80043f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3718      	adds	r7, #24
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}

080043fc <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b082      	sub	sp, #8
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	460b      	mov	r3, r1
 8004406:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f7fc fd48 	bl	8000e9e <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f7ff ff6c 	bl	80042ec <I2Cx_Init>
}
 8004414:	bf00      	nop
 8004416:	3708      	adds	r7, #8
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8004420:	4802      	ldr	r0, [pc, #8]	; (800442c <SENSOR_IO_Init+0x10>)
 8004422:	f7ff ff63 	bl	80042ec <I2Cx_Init>
}
 8004426:	bf00      	nop
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	20000230 	.word	0x20000230

08004430 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af02      	add	r7, sp, #8
 8004436:	4603      	mov	r3, r0
 8004438:	71fb      	strb	r3, [r7, #7]
 800443a:	460b      	mov	r3, r1
 800443c:	71bb      	strb	r3, [r7, #6]
 800443e:	4613      	mov	r3, r2
 8004440:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8004442:	79bb      	ldrb	r3, [r7, #6]
 8004444:	b29a      	uxth	r2, r3
 8004446:	79f9      	ldrb	r1, [r7, #7]
 8004448:	2301      	movs	r3, #1
 800444a:	9301      	str	r3, [sp, #4]
 800444c:	1d7b      	adds	r3, r7, #5
 800444e:	9300      	str	r3, [sp, #0]
 8004450:	2301      	movs	r3, #1
 8004452:	4803      	ldr	r0, [pc, #12]	; (8004460 <SENSOR_IO_Write+0x30>)
 8004454:	f7ff ffa5 	bl	80043a2 <I2Cx_WriteMultiple>
}
 8004458:	bf00      	nop
 800445a:	3708      	adds	r7, #8
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}
 8004460:	20000230 	.word	0x20000230

08004464 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b086      	sub	sp, #24
 8004468:	af02      	add	r7, sp, #8
 800446a:	4603      	mov	r3, r0
 800446c:	460a      	mov	r2, r1
 800446e:	71fb      	strb	r3, [r7, #7]
 8004470:	4613      	mov	r3, r2
 8004472:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8004474:	2300      	movs	r3, #0
 8004476:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8004478:	79bb      	ldrb	r3, [r7, #6]
 800447a:	b29a      	uxth	r2, r3
 800447c:	79f9      	ldrb	r1, [r7, #7]
 800447e:	2301      	movs	r3, #1
 8004480:	9301      	str	r3, [sp, #4]
 8004482:	f107 030f 	add.w	r3, r7, #15
 8004486:	9300      	str	r3, [sp, #0]
 8004488:	2301      	movs	r3, #1
 800448a:	4804      	ldr	r0, [pc, #16]	; (800449c <SENSOR_IO_Read+0x38>)
 800448c:	f7ff ff5c 	bl	8004348 <I2Cx_ReadMultiple>

  return read_value;
 8004490:	7bfb      	ldrb	r3, [r7, #15]
}
 8004492:	4618      	mov	r0, r3
 8004494:	3710      	adds	r7, #16
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	20000230 	.word	0x20000230

080044a0 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b084      	sub	sp, #16
 80044a4:	af02      	add	r7, sp, #8
 80044a6:	603a      	str	r2, [r7, #0]
 80044a8:	461a      	mov	r2, r3
 80044aa:	4603      	mov	r3, r0
 80044ac:	71fb      	strb	r3, [r7, #7]
 80044ae:	460b      	mov	r3, r1
 80044b0:	71bb      	strb	r3, [r7, #6]
 80044b2:	4613      	mov	r3, r2
 80044b4:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 80044b6:	79bb      	ldrb	r3, [r7, #6]
 80044b8:	b29a      	uxth	r2, r3
 80044ba:	79f9      	ldrb	r1, [r7, #7]
 80044bc:	88bb      	ldrh	r3, [r7, #4]
 80044be:	9301      	str	r3, [sp, #4]
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	9300      	str	r3, [sp, #0]
 80044c4:	2301      	movs	r3, #1
 80044c6:	4804      	ldr	r0, [pc, #16]	; (80044d8 <SENSOR_IO_ReadMultiple+0x38>)
 80044c8:	f7ff ff3e 	bl	8004348 <I2Cx_ReadMultiple>
 80044cc:	4603      	mov	r3, r0
 80044ce:	b29b      	uxth	r3, r3
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3708      	adds	r7, #8
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	20000230 	.word	0x20000230

080044dc <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 80044dc:	b580      	push	{r7, lr}
 80044de:	b084      	sub	sp, #16
 80044e0:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 80044e2:	2300      	movs	r3, #0
 80044e4:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80044e6:	2300      	movs	r3, #0
 80044e8:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 80044ea:	4b19      	ldr	r3, [pc, #100]	; (8004550 <BSP_ACCELERO_Init+0x74>)
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	4798      	blx	r3
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b6a      	cmp	r3, #106	; 0x6a
 80044f4:	d002      	beq.n	80044fc <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	73fb      	strb	r3, [r7, #15]
 80044fa:	e024      	b.n	8004546 <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 80044fc:	4b15      	ldr	r3, [pc, #84]	; (8004554 <BSP_ACCELERO_Init+0x78>)
 80044fe:	4a14      	ldr	r2, [pc, #80]	; (8004550 <BSP_ACCELERO_Init+0x74>)
 8004500:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 8004502:	2330      	movs	r3, #48	; 0x30
 8004504:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8004506:	2300      	movs	r3, #0
 8004508:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 800450a:	2300      	movs	r3, #0
 800450c:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 800450e:	2340      	movs	r3, #64	; 0x40
 8004510:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8004512:	2300      	movs	r3, #0
 8004514:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8004516:	2300      	movs	r3, #0
 8004518:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 800451a:	797a      	ldrb	r2, [r7, #5]
 800451c:	7abb      	ldrb	r3, [r7, #10]
 800451e:	4313      	orrs	r3, r2
 8004520:	b2db      	uxtb	r3, r3
 8004522:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8004524:	7a3b      	ldrb	r3, [r7, #8]
 8004526:	f043 0304 	orr.w	r3, r3, #4
 800452a:	b2db      	uxtb	r3, r3
 800452c:	021b      	lsls	r3, r3, #8
 800452e:	b21a      	sxth	r2, r3
 8004530:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004534:	4313      	orrs	r3, r2
 8004536:	b21b      	sxth	r3, r3
 8004538:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 800453a:	4b06      	ldr	r3, [pc, #24]	; (8004554 <BSP_ACCELERO_Init+0x78>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	89ba      	ldrh	r2, [r7, #12]
 8004542:	4610      	mov	r0, r2
 8004544:	4798      	blx	r3
  }  

  return ret;
 8004546:	7bfb      	ldrb	r3, [r7, #15]
}
 8004548:	4618      	mov	r0, r3
 800454a:	3710      	adds	r7, #16
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}
 8004550:	20000048 	.word	0x20000048
 8004554:	200000d0 	.word	0x200000d0

08004558 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b082      	sub	sp, #8
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8004560:	4b08      	ldr	r3, [pc, #32]	; (8004584 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d009      	beq.n	800457c <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8004568:	4b06      	ldr	r3, [pc, #24]	; (8004584 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800456e:	2b00      	cmp	r3, #0
 8004570:	d004      	beq.n	800457c <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8004572:	4b04      	ldr	r3, [pc, #16]	; (8004584 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	4798      	blx	r3
    }
  }
}
 800457c:	bf00      	nop
 800457e:	3708      	adds	r7, #8
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	200000d0 	.word	0x200000d0

08004588 <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 8004588:	b580      	push	{r7, lr}
 800458a:	b084      	sub	sp, #16
 800458c:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8004592:	2300      	movs	r3, #0
 8004594:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8004596:	4b1b      	ldr	r3, [pc, #108]	; (8004604 <BSP_GYRO_Init+0x7c>)
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	4798      	blx	r3
 800459c:	4603      	mov	r3, r0
 800459e:	2b6a      	cmp	r3, #106	; 0x6a
 80045a0:	d002      	beq.n	80045a8 <BSP_GYRO_Init+0x20>
  {
    ret = GYRO_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	73fb      	strb	r3, [r7, #15]
 80045a6:	e028      	b.n	80045fa <BSP_GYRO_Init+0x72>
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 80045a8:	4b17      	ldr	r3, [pc, #92]	; (8004608 <BSP_GYRO_Init+0x80>)
 80045aa:	4a16      	ldr	r2, [pc, #88]	; (8004604 <BSP_GYRO_Init+0x7c>)
 80045ac:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    LSM6DSL_InitStructure.Power_Mode = 0;
 80045ae:	2300      	movs	r3, #0
 80045b0:	713b      	strb	r3, [r7, #4]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_52Hz;
 80045b2:	2330      	movs	r3, #48	; 0x30
 80045b4:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 80045b6:	2300      	movs	r3, #0
 80045b8:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.Band_Width = 0;
 80045ba:	2300      	movs	r3, #0
 80045bc:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 80045be:	2340      	movs	r3, #64	; 0x40
 80045c0:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.Endianness = 0;
 80045c2:	2300      	movs	r3, #0
 80045c4:	727b      	strb	r3, [r7, #9]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_2000; 
 80045c6:	230c      	movs	r3, #12
 80045c8:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, full scale  */
    ctrl = (LSM6DSL_InitStructure.Full_Scale | LSM6DSL_InitStructure.Output_DataRate);
 80045ca:	7aba      	ldrb	r2, [r7, #10]
 80045cc:	797b      	ldrb	r3, [r7, #5]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 80045d4:	7a3b      	ldrb	r3, [r7, #8]
 80045d6:	f043 0304 	orr.w	r3, r3, #4
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	021b      	lsls	r3, r3, #8
 80045de:	b21a      	sxth	r2, r3
 80045e0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	b21b      	sxth	r3, r3
 80045e8:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 80045ea:	4b07      	ldr	r3, [pc, #28]	; (8004608 <BSP_GYRO_Init+0x80>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	89ba      	ldrh	r2, [r7, #12]
 80045f2:	4610      	mov	r0, r2
 80045f4:	4798      	blx	r3
    
    ret = GYRO_OK;
 80045f6:	2300      	movs	r3, #0
 80045f8:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 80045fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3710      	adds	r7, #16
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}
 8004604:	2000007c 	.word	0x2000007c
 8004608:	200000d4 	.word	0x200000d4

0800460c <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b082      	sub	sp, #8
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv != NULL)
 8004614:	4b08      	ldr	r3, [pc, #32]	; (8004638 <BSP_GYRO_GetXYZ+0x2c>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d009      	beq.n	8004630 <BSP_GYRO_GetXYZ+0x24>
  {
    if(GyroscopeDrv->GetXYZ!= NULL)
 800461c:	4b06      	ldr	r3, [pc, #24]	; (8004638 <BSP_GYRO_GetXYZ+0x2c>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004622:	2b00      	cmp	r3, #0
 8004624:	d004      	beq.n	8004630 <BSP_GYRO_GetXYZ+0x24>
    {
      GyroscopeDrv->GetXYZ(pfData);
 8004626:	4b04      	ldr	r3, [pc, #16]	; (8004638 <BSP_GYRO_GetXYZ+0x2c>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	4798      	blx	r3
    }
  }
}
 8004630:	bf00      	nop
 8004632:	3708      	adds	r7, #8
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}
 8004638:	200000d4 	.word	0x200000d4

0800463c <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b082      	sub	sp, #8
 8004640:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 8004642:	4b0c      	ldr	r3, [pc, #48]	; (8004674 <BSP_HSENSOR_Init+0x38>)
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	20be      	movs	r0, #190	; 0xbe
 8004648:	4798      	blx	r3
 800464a:	4603      	mov	r3, r0
 800464c:	2bbc      	cmp	r3, #188	; 0xbc
 800464e:	d002      	beq.n	8004656 <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	607b      	str	r3, [r7, #4]
 8004654:	e009      	b.n	800466a <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 8004656:	4b08      	ldr	r3, [pc, #32]	; (8004678 <BSP_HSENSOR_Init+0x3c>)
 8004658:	4a06      	ldr	r2, [pc, #24]	; (8004674 <BSP_HSENSOR_Init+0x38>)
 800465a:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 800465c:	4b06      	ldr	r3, [pc, #24]	; (8004678 <BSP_HSENSOR_Init+0x3c>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	20be      	movs	r0, #190	; 0xbe
 8004664:	4798      	blx	r3
    ret = HSENSOR_OK;
 8004666:	2300      	movs	r3, #0
 8004668:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 800466a:	687b      	ldr	r3, [r7, #4]
}
 800466c:	4618      	mov	r0, r3
 800466e:	3708      	adds	r7, #8
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}
 8004674:	20000008 	.word	0x20000008
 8004678:	200000d8 	.word	0x200000d8

0800467c <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 800467c:	b580      	push	{r7, lr}
 800467e:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 8004680:	4b04      	ldr	r3, [pc, #16]	; (8004694 <BSP_HSENSOR_ReadHumidity+0x18>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	20be      	movs	r0, #190	; 0xbe
 8004688:	4798      	blx	r3
 800468a:	eef0 7a40 	vmov.f32	s15, s0
}
 800468e:	eeb0 0a67 	vmov.f32	s0, s15
 8004692:	bd80      	pop	{r7, pc}
 8004694:	200000d8 	.word	0x200000d8

08004698 <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af00      	add	r7, sp, #0
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 800469e:	2300      	movs	r3, #0
 80046a0:	71fb      	strb	r3, [r7, #7]
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 80046a2:	4b11      	ldr	r3, [pc, #68]	; (80046e8 <BSP_MAGNETO_Init+0x50>)
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	4798      	blx	r3
 80046a8:	4603      	mov	r3, r0
 80046aa:	2b3d      	cmp	r3, #61	; 0x3d
 80046ac:	d002      	beq.n	80046b4 <BSP_MAGNETO_Init+0x1c>
  {
    ret = MAGNETO_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	71fb      	strb	r3, [r7, #7]
 80046b2:	e013      	b.n	80046dc <BSP_MAGNETO_Init+0x44>
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 80046b4:	4b0d      	ldr	r3, [pc, #52]	; (80046ec <BSP_MAGNETO_Init+0x54>)
 80046b6:	4a0c      	ldr	r2, [pc, #48]	; (80046e8 <BSP_MAGNETO_Init+0x50>)
 80046b8:	601a      	str	r2, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 80046ba:	2358      	movs	r3, #88	; 0x58
 80046bc:	703b      	strb	r3, [r7, #0]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 80046be:	2300      	movs	r3, #0
 80046c0:	707b      	strb	r3, [r7, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 80046c2:	2300      	movs	r3, #0
 80046c4:	70bb      	strb	r3, [r7, #2]
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 80046c6:	2308      	movs	r3, #8
 80046c8:	70fb      	strb	r3, [r7, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 80046ca:	2340      	movs	r3, #64	; 0x40
 80046cc:	713b      	strb	r3, [r7, #4]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 80046ce:	4b07      	ldr	r3, [pc, #28]	; (80046ec <BSP_MAGNETO_Init+0x54>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	463a      	mov	r2, r7
 80046d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80046da:	4798      	blx	r3
  } 

  return ret;  
 80046dc:	79fb      	ldrb	r3, [r7, #7]
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3708      	adds	r7, #8
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	20000014 	.word	0x20000014
 80046ec:	200000dc 	.word	0x200000dc

080046f0 <BSP_MAGNETO_GetXYZ>:
  * @brief  Get XYZ magnetometer values.
  * @param  pDataXYZ Pointer on 3 magnetometer values table with
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis 
  */
void BSP_MAGNETO_GetXYZ(int16_t *pDataXYZ)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b082      	sub	sp, #8
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  if(MagnetoDrv != NULL)
 80046f8:	4b08      	ldr	r3, [pc, #32]	; (800471c <BSP_MAGNETO_GetXYZ+0x2c>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d009      	beq.n	8004714 <BSP_MAGNETO_GetXYZ+0x24>
  {
    if(MagnetoDrv->GetXYZ != NULL)
 8004700:	4b06      	ldr	r3, [pc, #24]	; (800471c <BSP_MAGNETO_GetXYZ+0x2c>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004706:	2b00      	cmp	r3, #0
 8004708:	d004      	beq.n	8004714 <BSP_MAGNETO_GetXYZ+0x24>
    {   
      MagnetoDrv->GetXYZ(pDataXYZ);
 800470a:	4b04      	ldr	r3, [pc, #16]	; (800471c <BSP_MAGNETO_GetXYZ+0x2c>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	4798      	blx	r3
    }
  }
}
 8004714:	bf00      	nop
 8004716:	3708      	adds	r7, #8
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}
 800471c:	200000dc 	.word	0x200000dc

08004720 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004720:	b480      	push	{r7}
 8004722:	b083      	sub	sp, #12
 8004724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004726:	4b0f      	ldr	r3, [pc, #60]	; (8004764 <HAL_MspInit+0x44>)
 8004728:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800472a:	4a0e      	ldr	r2, [pc, #56]	; (8004764 <HAL_MspInit+0x44>)
 800472c:	f043 0301 	orr.w	r3, r3, #1
 8004730:	6613      	str	r3, [r2, #96]	; 0x60
 8004732:	4b0c      	ldr	r3, [pc, #48]	; (8004764 <HAL_MspInit+0x44>)
 8004734:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004736:	f003 0301 	and.w	r3, r3, #1
 800473a:	607b      	str	r3, [r7, #4]
 800473c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800473e:	4b09      	ldr	r3, [pc, #36]	; (8004764 <HAL_MspInit+0x44>)
 8004740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004742:	4a08      	ldr	r2, [pc, #32]	; (8004764 <HAL_MspInit+0x44>)
 8004744:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004748:	6593      	str	r3, [r2, #88]	; 0x58
 800474a:	4b06      	ldr	r3, [pc, #24]	; (8004764 <HAL_MspInit+0x44>)
 800474c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800474e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004752:	603b      	str	r3, [r7, #0]
 8004754:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004756:	bf00      	nop
 8004758:	370c      	adds	r7, #12
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr
 8004762:	bf00      	nop
 8004764:	40021000 	.word	0x40021000

08004768 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b08a      	sub	sp, #40	; 0x28
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004770:	f107 0314 	add.w	r3, r7, #20
 8004774:	2200      	movs	r2, #0
 8004776:	601a      	str	r2, [r3, #0]
 8004778:	605a      	str	r2, [r3, #4]
 800477a:	609a      	str	r2, [r3, #8]
 800477c:	60da      	str	r2, [r3, #12]
 800477e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a17      	ldr	r2, [pc, #92]	; (80047e4 <HAL_I2C_MspInit+0x7c>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d128      	bne.n	80047dc <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800478a:	4b17      	ldr	r3, [pc, #92]	; (80047e8 <HAL_I2C_MspInit+0x80>)
 800478c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800478e:	4a16      	ldr	r2, [pc, #88]	; (80047e8 <HAL_I2C_MspInit+0x80>)
 8004790:	f043 0302 	orr.w	r3, r3, #2
 8004794:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004796:	4b14      	ldr	r3, [pc, #80]	; (80047e8 <HAL_I2C_MspInit+0x80>)
 8004798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800479a:	f003 0302 	and.w	r3, r3, #2
 800479e:	613b      	str	r3, [r7, #16]
 80047a0:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80047a2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80047a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80047a8:	2312      	movs	r3, #18
 80047aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80047ac:	2301      	movs	r3, #1
 80047ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047b0:	2303      	movs	r3, #3
 80047b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80047b4:	2304      	movs	r3, #4
 80047b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047b8:	f107 0314 	add.w	r3, r7, #20
 80047bc:	4619      	mov	r1, r3
 80047be:	480b      	ldr	r0, [pc, #44]	; (80047ec <HAL_I2C_MspInit+0x84>)
 80047c0:	f7fc f82a 	bl	8000818 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80047c4:	4b08      	ldr	r3, [pc, #32]	; (80047e8 <HAL_I2C_MspInit+0x80>)
 80047c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047c8:	4a07      	ldr	r2, [pc, #28]	; (80047e8 <HAL_I2C_MspInit+0x80>)
 80047ca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80047ce:	6593      	str	r3, [r2, #88]	; 0x58
 80047d0:	4b05      	ldr	r3, [pc, #20]	; (80047e8 <HAL_I2C_MspInit+0x80>)
 80047d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047d8:	60fb      	str	r3, [r7, #12]
 80047da:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80047dc:	bf00      	nop
 80047de:	3728      	adds	r7, #40	; 0x28
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	40005800 	.word	0x40005800
 80047e8:	40021000 	.word	0x40021000
 80047ec:	48000400 	.word	0x48000400

080047f0 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b082      	sub	sp, #8
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a0b      	ldr	r2, [pc, #44]	; (800482c <HAL_I2C_MspDeInit+0x3c>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d10f      	bne.n	8004822 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8004802:	4b0b      	ldr	r3, [pc, #44]	; (8004830 <HAL_I2C_MspDeInit+0x40>)
 8004804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004806:	4a0a      	ldr	r2, [pc, #40]	; (8004830 <HAL_I2C_MspDeInit+0x40>)
 8004808:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800480c:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 800480e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004812:	4808      	ldr	r0, [pc, #32]	; (8004834 <HAL_I2C_MspDeInit+0x44>)
 8004814:	f7fc f9a8 	bl	8000b68 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8004818:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800481c:	4805      	ldr	r0, [pc, #20]	; (8004834 <HAL_I2C_MspDeInit+0x44>)
 800481e:	f7fc f9a3 	bl	8000b68 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8004822:	bf00      	nop
 8004824:	3708      	adds	r7, #8
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	40005800 	.word	0x40005800
 8004830:	40021000 	.word	0x40021000
 8004834:	48000400 	.word	0x48000400

08004838 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b08a      	sub	sp, #40	; 0x28
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004840:	f107 0314 	add.w	r3, r7, #20
 8004844:	2200      	movs	r2, #0
 8004846:	601a      	str	r2, [r3, #0]
 8004848:	605a      	str	r2, [r3, #4]
 800484a:	609a      	str	r2, [r3, #8]
 800484c:	60da      	str	r2, [r3, #12]
 800484e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a17      	ldr	r2, [pc, #92]	; (80048b4 <HAL_UART_MspInit+0x7c>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d128      	bne.n	80048ac <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800485a:	4b17      	ldr	r3, [pc, #92]	; (80048b8 <HAL_UART_MspInit+0x80>)
 800485c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800485e:	4a16      	ldr	r2, [pc, #88]	; (80048b8 <HAL_UART_MspInit+0x80>)
 8004860:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004864:	6593      	str	r3, [r2, #88]	; 0x58
 8004866:	4b14      	ldr	r3, [pc, #80]	; (80048b8 <HAL_UART_MspInit+0x80>)
 8004868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800486a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800486e:	613b      	str	r3, [r7, #16]
 8004870:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004872:	4b11      	ldr	r3, [pc, #68]	; (80048b8 <HAL_UART_MspInit+0x80>)
 8004874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004876:	4a10      	ldr	r2, [pc, #64]	; (80048b8 <HAL_UART_MspInit+0x80>)
 8004878:	f043 0301 	orr.w	r3, r3, #1
 800487c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800487e:	4b0e      	ldr	r3, [pc, #56]	; (80048b8 <HAL_UART_MspInit+0x80>)
 8004880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004882:	f003 0301 	and.w	r3, r3, #1
 8004886:	60fb      	str	r3, [r7, #12]
 8004888:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800488a:	2303      	movs	r3, #3
 800488c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800488e:	2302      	movs	r3, #2
 8004890:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004892:	2300      	movs	r3, #0
 8004894:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004896:	2303      	movs	r3, #3
 8004898:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800489a:	2308      	movs	r3, #8
 800489c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800489e:	f107 0314 	add.w	r3, r7, #20
 80048a2:	4619      	mov	r1, r3
 80048a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80048a8:	f7fb ffb6 	bl	8000818 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 80048ac:	bf00      	nop
 80048ae:	3728      	adds	r7, #40	; 0x28
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	40004c00 	.word	0x40004c00
 80048b8:	40021000 	.word	0x40021000

080048bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80048bc:	b480      	push	{r7}
 80048be:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80048c0:	bf00      	nop
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr

080048ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80048ca:	b480      	push	{r7}
 80048cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80048ce:	e7fe      	b.n	80048ce <HardFault_Handler+0x4>

080048d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80048d0:	b480      	push	{r7}
 80048d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80048d4:	e7fe      	b.n	80048d4 <MemManage_Handler+0x4>

080048d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80048d6:	b480      	push	{r7}
 80048d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80048da:	e7fe      	b.n	80048da <BusFault_Handler+0x4>

080048dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80048dc:	b480      	push	{r7}
 80048de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80048e0:	e7fe      	b.n	80048e0 <UsageFault_Handler+0x4>

080048e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80048e2:	b480      	push	{r7}
 80048e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80048e6:	bf00      	nop
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr

080048f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80048f0:	b480      	push	{r7}
 80048f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80048f4:	bf00      	nop
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr

080048fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80048fe:	b480      	push	{r7}
 8004900:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004902:	bf00      	nop
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004910:	f7fb fe2e 	bl	8000570 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004914:	bf00      	nop
 8004916:	bd80      	pop	{r7, pc}

08004918 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004918:	b480      	push	{r7}
 800491a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800491c:	4b17      	ldr	r3, [pc, #92]	; (800497c <SystemInit+0x64>)
 800491e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004922:	4a16      	ldr	r2, [pc, #88]	; (800497c <SystemInit+0x64>)
 8004924:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004928:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800492c:	4b14      	ldr	r3, [pc, #80]	; (8004980 <SystemInit+0x68>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a13      	ldr	r2, [pc, #76]	; (8004980 <SystemInit+0x68>)
 8004932:	f043 0301 	orr.w	r3, r3, #1
 8004936:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8004938:	4b11      	ldr	r3, [pc, #68]	; (8004980 <SystemInit+0x68>)
 800493a:	2200      	movs	r2, #0
 800493c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800493e:	4b10      	ldr	r3, [pc, #64]	; (8004980 <SystemInit+0x68>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a0f      	ldr	r2, [pc, #60]	; (8004980 <SystemInit+0x68>)
 8004944:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8004948:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800494c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800494e:	4b0c      	ldr	r3, [pc, #48]	; (8004980 <SystemInit+0x68>)
 8004950:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004954:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004956:	4b0a      	ldr	r3, [pc, #40]	; (8004980 <SystemInit+0x68>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a09      	ldr	r2, [pc, #36]	; (8004980 <SystemInit+0x68>)
 800495c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004960:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8004962:	4b07      	ldr	r3, [pc, #28]	; (8004980 <SystemInit+0x68>)
 8004964:	2200      	movs	r2, #0
 8004966:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004968:	4b04      	ldr	r3, [pc, #16]	; (800497c <SystemInit+0x64>)
 800496a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800496e:	609a      	str	r2, [r3, #8]
#endif
}
 8004970:	bf00      	nop
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr
 800497a:	bf00      	nop
 800497c:	e000ed00 	.word	0xe000ed00
 8004980:	40021000 	.word	0x40021000

08004984 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004984:	f8df d034 	ldr.w	sp, [pc, #52]	; 80049bc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004988:	f7ff ffc6 	bl	8004918 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800498c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800498e:	e003      	b.n	8004998 <LoopCopyDataInit>

08004990 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004990:	4b0b      	ldr	r3, [pc, #44]	; (80049c0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004992:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004994:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004996:	3104      	adds	r1, #4

08004998 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004998:	480a      	ldr	r0, [pc, #40]	; (80049c4 <LoopForever+0xa>)
	ldr	r3, =_edata
 800499a:	4b0b      	ldr	r3, [pc, #44]	; (80049c8 <LoopForever+0xe>)
	adds	r2, r0, r1
 800499c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800499e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80049a0:	d3f6      	bcc.n	8004990 <CopyDataInit>
	ldr	r2, =_sbss
 80049a2:	4a0a      	ldr	r2, [pc, #40]	; (80049cc <LoopForever+0x12>)
	b	LoopFillZerobss
 80049a4:	e002      	b.n	80049ac <LoopFillZerobss>

080049a6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80049a6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80049a8:	f842 3b04 	str.w	r3, [r2], #4

080049ac <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80049ac:	4b08      	ldr	r3, [pc, #32]	; (80049d0 <LoopForever+0x16>)
	cmp	r2, r3
 80049ae:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80049b0:	d3f9      	bcc.n	80049a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80049b2:	f000 f811 	bl	80049d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80049b6:	f7ff fac3 	bl	8003f40 <main>

080049ba <LoopForever>:

LoopForever:
    b LoopForever
 80049ba:	e7fe      	b.n	80049ba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80049bc:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80049c0:	08004aa0 	.word	0x08004aa0
	ldr	r0, =_sdata
 80049c4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80049c8:	200000b4 	.word	0x200000b4
	ldr	r2, =_sbss
 80049cc:	200000b4 	.word	0x200000b4
	ldr	r3, = _ebss
 80049d0:	2000027c 	.word	0x2000027c

080049d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80049d4:	e7fe      	b.n	80049d4 <ADC1_2_IRQHandler>
	...

080049d8 <__libc_init_array>:
 80049d8:	b570      	push	{r4, r5, r6, lr}
 80049da:	4e0d      	ldr	r6, [pc, #52]	; (8004a10 <__libc_init_array+0x38>)
 80049dc:	4c0d      	ldr	r4, [pc, #52]	; (8004a14 <__libc_init_array+0x3c>)
 80049de:	1ba4      	subs	r4, r4, r6
 80049e0:	10a4      	asrs	r4, r4, #2
 80049e2:	2500      	movs	r5, #0
 80049e4:	42a5      	cmp	r5, r4
 80049e6:	d109      	bne.n	80049fc <__libc_init_array+0x24>
 80049e8:	4e0b      	ldr	r6, [pc, #44]	; (8004a18 <__libc_init_array+0x40>)
 80049ea:	4c0c      	ldr	r4, [pc, #48]	; (8004a1c <__libc_init_array+0x44>)
 80049ec:	f000 f820 	bl	8004a30 <_init>
 80049f0:	1ba4      	subs	r4, r4, r6
 80049f2:	10a4      	asrs	r4, r4, #2
 80049f4:	2500      	movs	r5, #0
 80049f6:	42a5      	cmp	r5, r4
 80049f8:	d105      	bne.n	8004a06 <__libc_init_array+0x2e>
 80049fa:	bd70      	pop	{r4, r5, r6, pc}
 80049fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004a00:	4798      	blx	r3
 8004a02:	3501      	adds	r5, #1
 8004a04:	e7ee      	b.n	80049e4 <__libc_init_array+0xc>
 8004a06:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004a0a:	4798      	blx	r3
 8004a0c:	3501      	adds	r5, #1
 8004a0e:	e7f2      	b.n	80049f6 <__libc_init_array+0x1e>
 8004a10:	08004a98 	.word	0x08004a98
 8004a14:	08004a98 	.word	0x08004a98
 8004a18:	08004a98 	.word	0x08004a98
 8004a1c:	08004a9c 	.word	0x08004a9c

08004a20 <memset>:
 8004a20:	4402      	add	r2, r0
 8004a22:	4603      	mov	r3, r0
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d100      	bne.n	8004a2a <memset+0xa>
 8004a28:	4770      	bx	lr
 8004a2a:	f803 1b01 	strb.w	r1, [r3], #1
 8004a2e:	e7f9      	b.n	8004a24 <memset+0x4>

08004a30 <_init>:
 8004a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a32:	bf00      	nop
 8004a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a36:	bc08      	pop	{r3}
 8004a38:	469e      	mov	lr, r3
 8004a3a:	4770      	bx	lr

08004a3c <_fini>:
 8004a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a3e:	bf00      	nop
 8004a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a42:	bc08      	pop	{r3}
 8004a44:	469e      	mov	lr, r3
 8004a46:	4770      	bx	lr
