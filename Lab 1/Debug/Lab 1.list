
Lab 1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000142c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080015b4  080015b4  000115b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800161c  0800161c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800161c  0800161c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800161c  0800161c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800161c  0800161c  0001161c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001620  08001620  00011620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001624  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08001630  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001630  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000061db  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000011e4  00000000  00000000  00026217  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000588  00000000  00000000  00027400  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000004c0  00000000  00000000  00027988  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024c1e  00000000  00000000  00027e48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004e70  00000000  00000000  0004ca66  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e2594  00000000  00000000  000518d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000f0  00000000  00000000  00133e6a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001358  00000000  00000000  00133f5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00000363  00000000  00000000  001352b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800159c 	.word	0x0800159c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800159c 	.word	0x0800159c

080001c8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80001ce:	2300      	movs	r3, #0
 80001d0:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001d2:	2003      	movs	r0, #3
 80001d4:	f000 f91e 	bl	8000414 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80001d8:	2000      	movs	r0, #0
 80001da:	f000 f80d 	bl	80001f8 <HAL_InitTick>
 80001de:	4603      	mov	r3, r0
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d002      	beq.n	80001ea <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80001e4:	2301      	movs	r3, #1
 80001e6:	71fb      	strb	r3, [r7, #7]
 80001e8:	e001      	b.n	80001ee <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80001ea:	f001 f88d 	bl	8001308 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80001ee:	79fb      	ldrb	r3, [r7, #7]
}
 80001f0:	4618      	mov	r0, r3
 80001f2:	3708      	adds	r7, #8
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bd80      	pop	{r7, pc}

080001f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b084      	sub	sp, #16
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000200:	2300      	movs	r3, #0
 8000202:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000204:	4b17      	ldr	r3, [pc, #92]	; (8000264 <HAL_InitTick+0x6c>)
 8000206:	781b      	ldrb	r3, [r3, #0]
 8000208:	2b00      	cmp	r3, #0
 800020a:	d023      	beq.n	8000254 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800020c:	4b16      	ldr	r3, [pc, #88]	; (8000268 <HAL_InitTick+0x70>)
 800020e:	681a      	ldr	r2, [r3, #0]
 8000210:	4b14      	ldr	r3, [pc, #80]	; (8000264 <HAL_InitTick+0x6c>)
 8000212:	781b      	ldrb	r3, [r3, #0]
 8000214:	4619      	mov	r1, r3
 8000216:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800021a:	fbb3 f3f1 	udiv	r3, r3, r1
 800021e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000222:	4618      	mov	r0, r3
 8000224:	f000 f91d 	bl	8000462 <HAL_SYSTICK_Config>
 8000228:	4603      	mov	r3, r0
 800022a:	2b00      	cmp	r3, #0
 800022c:	d10f      	bne.n	800024e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	2b0f      	cmp	r3, #15
 8000232:	d809      	bhi.n	8000248 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000234:	2200      	movs	r2, #0
 8000236:	6879      	ldr	r1, [r7, #4]
 8000238:	f04f 30ff 	mov.w	r0, #4294967295
 800023c:	f000 f8f5 	bl	800042a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000240:	4a0a      	ldr	r2, [pc, #40]	; (800026c <HAL_InitTick+0x74>)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	6013      	str	r3, [r2, #0]
 8000246:	e007      	b.n	8000258 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000248:	2301      	movs	r3, #1
 800024a:	73fb      	strb	r3, [r7, #15]
 800024c:	e004      	b.n	8000258 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800024e:	2301      	movs	r3, #1
 8000250:	73fb      	strb	r3, [r7, #15]
 8000252:	e001      	b.n	8000258 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000254:	2301      	movs	r3, #1
 8000256:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000258:	7bfb      	ldrb	r3, [r7, #15]
}
 800025a:	4618      	mov	r0, r3
 800025c:	3710      	adds	r7, #16
 800025e:	46bd      	mov	sp, r7
 8000260:	bd80      	pop	{r7, pc}
 8000262:	bf00      	nop
 8000264:	20000004 	.word	0x20000004
 8000268:	20000008 	.word	0x20000008
 800026c:	20000000 	.word	0x20000000

08000270 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000274:	4b06      	ldr	r3, [pc, #24]	; (8000290 <HAL_IncTick+0x20>)
 8000276:	781b      	ldrb	r3, [r3, #0]
 8000278:	461a      	mov	r2, r3
 800027a:	4b06      	ldr	r3, [pc, #24]	; (8000294 <HAL_IncTick+0x24>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	4413      	add	r3, r2
 8000280:	4a04      	ldr	r2, [pc, #16]	; (8000294 <HAL_IncTick+0x24>)
 8000282:	6013      	str	r3, [r2, #0]
}
 8000284:	bf00      	nop
 8000286:	46bd      	mov	sp, r7
 8000288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop
 8000290:	20000004 	.word	0x20000004
 8000294:	20000028 	.word	0x20000028

08000298 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000298:	b480      	push	{r7}
 800029a:	af00      	add	r7, sp, #0
  return uwTick;
 800029c:	4b03      	ldr	r3, [pc, #12]	; (80002ac <HAL_GetTick+0x14>)
 800029e:	681b      	ldr	r3, [r3, #0]
}
 80002a0:	4618      	mov	r0, r3
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	20000028 	.word	0x20000028

080002b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b085      	sub	sp, #20
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	f003 0307 	and.w	r3, r3, #7
 80002be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002c0:	4b0c      	ldr	r3, [pc, #48]	; (80002f4 <__NVIC_SetPriorityGrouping+0x44>)
 80002c2:	68db      	ldr	r3, [r3, #12]
 80002c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80002c6:	68ba      	ldr	r2, [r7, #8]
 80002c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80002cc:	4013      	ands	r3, r2
 80002ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80002d4:	68bb      	ldr	r3, [r7, #8]
 80002d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80002d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80002dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80002e2:	4a04      	ldr	r2, [pc, #16]	; (80002f4 <__NVIC_SetPriorityGrouping+0x44>)
 80002e4:	68bb      	ldr	r3, [r7, #8]
 80002e6:	60d3      	str	r3, [r2, #12]
}
 80002e8:	bf00      	nop
 80002ea:	3714      	adds	r7, #20
 80002ec:	46bd      	mov	sp, r7
 80002ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f2:	4770      	bx	lr
 80002f4:	e000ed00 	.word	0xe000ed00

080002f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80002f8:	b480      	push	{r7}
 80002fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002fc:	4b04      	ldr	r3, [pc, #16]	; (8000310 <__NVIC_GetPriorityGrouping+0x18>)
 80002fe:	68db      	ldr	r3, [r3, #12]
 8000300:	0a1b      	lsrs	r3, r3, #8
 8000302:	f003 0307 	and.w	r3, r3, #7
}
 8000306:	4618      	mov	r0, r3
 8000308:	46bd      	mov	sp, r7
 800030a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030e:	4770      	bx	lr
 8000310:	e000ed00 	.word	0xe000ed00

08000314 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000314:	b480      	push	{r7}
 8000316:	b083      	sub	sp, #12
 8000318:	af00      	add	r7, sp, #0
 800031a:	4603      	mov	r3, r0
 800031c:	6039      	str	r1, [r7, #0]
 800031e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000324:	2b00      	cmp	r3, #0
 8000326:	db0a      	blt.n	800033e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000328:	683b      	ldr	r3, [r7, #0]
 800032a:	b2da      	uxtb	r2, r3
 800032c:	490c      	ldr	r1, [pc, #48]	; (8000360 <__NVIC_SetPriority+0x4c>)
 800032e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000332:	0112      	lsls	r2, r2, #4
 8000334:	b2d2      	uxtb	r2, r2
 8000336:	440b      	add	r3, r1
 8000338:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800033c:	e00a      	b.n	8000354 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800033e:	683b      	ldr	r3, [r7, #0]
 8000340:	b2da      	uxtb	r2, r3
 8000342:	4908      	ldr	r1, [pc, #32]	; (8000364 <__NVIC_SetPriority+0x50>)
 8000344:	79fb      	ldrb	r3, [r7, #7]
 8000346:	f003 030f 	and.w	r3, r3, #15
 800034a:	3b04      	subs	r3, #4
 800034c:	0112      	lsls	r2, r2, #4
 800034e:	b2d2      	uxtb	r2, r2
 8000350:	440b      	add	r3, r1
 8000352:	761a      	strb	r2, [r3, #24]
}
 8000354:	bf00      	nop
 8000356:	370c      	adds	r7, #12
 8000358:	46bd      	mov	sp, r7
 800035a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035e:	4770      	bx	lr
 8000360:	e000e100 	.word	0xe000e100
 8000364:	e000ed00 	.word	0xe000ed00

08000368 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000368:	b480      	push	{r7}
 800036a:	b089      	sub	sp, #36	; 0x24
 800036c:	af00      	add	r7, sp, #0
 800036e:	60f8      	str	r0, [r7, #12]
 8000370:	60b9      	str	r1, [r7, #8]
 8000372:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	f003 0307 	and.w	r3, r3, #7
 800037a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800037c:	69fb      	ldr	r3, [r7, #28]
 800037e:	f1c3 0307 	rsb	r3, r3, #7
 8000382:	2b04      	cmp	r3, #4
 8000384:	bf28      	it	cs
 8000386:	2304      	movcs	r3, #4
 8000388:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800038a:	69fb      	ldr	r3, [r7, #28]
 800038c:	3304      	adds	r3, #4
 800038e:	2b06      	cmp	r3, #6
 8000390:	d902      	bls.n	8000398 <NVIC_EncodePriority+0x30>
 8000392:	69fb      	ldr	r3, [r7, #28]
 8000394:	3b03      	subs	r3, #3
 8000396:	e000      	b.n	800039a <NVIC_EncodePriority+0x32>
 8000398:	2300      	movs	r3, #0
 800039a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800039c:	f04f 32ff 	mov.w	r2, #4294967295
 80003a0:	69bb      	ldr	r3, [r7, #24]
 80003a2:	fa02 f303 	lsl.w	r3, r2, r3
 80003a6:	43da      	mvns	r2, r3
 80003a8:	68bb      	ldr	r3, [r7, #8]
 80003aa:	401a      	ands	r2, r3
 80003ac:	697b      	ldr	r3, [r7, #20]
 80003ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80003b0:	f04f 31ff 	mov.w	r1, #4294967295
 80003b4:	697b      	ldr	r3, [r7, #20]
 80003b6:	fa01 f303 	lsl.w	r3, r1, r3
 80003ba:	43d9      	mvns	r1, r3
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003c0:	4313      	orrs	r3, r2
         );
}
 80003c2:	4618      	mov	r0, r3
 80003c4:	3724      	adds	r7, #36	; 0x24
 80003c6:	46bd      	mov	sp, r7
 80003c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003cc:	4770      	bx	lr
	...

080003d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	3b01      	subs	r3, #1
 80003dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80003e0:	d301      	bcc.n	80003e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80003e2:	2301      	movs	r3, #1
 80003e4:	e00f      	b.n	8000406 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003e6:	4a0a      	ldr	r2, [pc, #40]	; (8000410 <SysTick_Config+0x40>)
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	3b01      	subs	r3, #1
 80003ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80003ee:	210f      	movs	r1, #15
 80003f0:	f04f 30ff 	mov.w	r0, #4294967295
 80003f4:	f7ff ff8e 	bl	8000314 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003f8:	4b05      	ldr	r3, [pc, #20]	; (8000410 <SysTick_Config+0x40>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003fe:	4b04      	ldr	r3, [pc, #16]	; (8000410 <SysTick_Config+0x40>)
 8000400:	2207      	movs	r2, #7
 8000402:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000404:	2300      	movs	r3, #0
}
 8000406:	4618      	mov	r0, r3
 8000408:	3708      	adds	r7, #8
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	e000e010 	.word	0xe000e010

08000414 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800041c:	6878      	ldr	r0, [r7, #4]
 800041e:	f7ff ff47 	bl	80002b0 <__NVIC_SetPriorityGrouping>
}
 8000422:	bf00      	nop
 8000424:	3708      	adds	r7, #8
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}

0800042a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800042a:	b580      	push	{r7, lr}
 800042c:	b086      	sub	sp, #24
 800042e:	af00      	add	r7, sp, #0
 8000430:	4603      	mov	r3, r0
 8000432:	60b9      	str	r1, [r7, #8]
 8000434:	607a      	str	r2, [r7, #4]
 8000436:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000438:	2300      	movs	r3, #0
 800043a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800043c:	f7ff ff5c 	bl	80002f8 <__NVIC_GetPriorityGrouping>
 8000440:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000442:	687a      	ldr	r2, [r7, #4]
 8000444:	68b9      	ldr	r1, [r7, #8]
 8000446:	6978      	ldr	r0, [r7, #20]
 8000448:	f7ff ff8e 	bl	8000368 <NVIC_EncodePriority>
 800044c:	4602      	mov	r2, r0
 800044e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000452:	4611      	mov	r1, r2
 8000454:	4618      	mov	r0, r3
 8000456:	f7ff ff5d 	bl	8000314 <__NVIC_SetPriority>
}
 800045a:	bf00      	nop
 800045c:	3718      	adds	r7, #24
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}

08000462 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000462:	b580      	push	{r7, lr}
 8000464:	b082      	sub	sp, #8
 8000466:	af00      	add	r7, sp, #0
 8000468:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800046a:	6878      	ldr	r0, [r7, #4]
 800046c:	f7ff ffb0 	bl	80003d0 <SysTick_Config>
 8000470:	4603      	mov	r3, r0
}
 8000472:	4618      	mov	r0, r3
 8000474:	3708      	adds	r7, #8
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
	...

0800047c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000480:	4b04      	ldr	r3, [pc, #16]	; (8000494 <HAL_PWREx_GetVoltageRange+0x18>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000488:	4618      	mov	r0, r3
 800048a:	46bd      	mov	sp, r7
 800048c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000490:	4770      	bx	lr
 8000492:	bf00      	nop
 8000494:	40007000 	.word	0x40007000

08000498 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000498:	b480      	push	{r7}
 800049a:	b085      	sub	sp, #20
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80004a6:	d130      	bne.n	800050a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80004a8:	4b23      	ldr	r3, [pc, #140]	; (8000538 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80004b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80004b4:	d038      	beq.n	8000528 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80004b6:	4b20      	ldr	r3, [pc, #128]	; (8000538 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80004be:	4a1e      	ldr	r2, [pc, #120]	; (8000538 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80004c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004c4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80004c6:	4b1d      	ldr	r3, [pc, #116]	; (800053c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	2232      	movs	r2, #50	; 0x32
 80004cc:	fb02 f303 	mul.w	r3, r2, r3
 80004d0:	4a1b      	ldr	r2, [pc, #108]	; (8000540 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80004d2:	fba2 2303 	umull	r2, r3, r2, r3
 80004d6:	0c9b      	lsrs	r3, r3, #18
 80004d8:	3301      	adds	r3, #1
 80004da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80004dc:	e002      	b.n	80004e4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80004de:	68fb      	ldr	r3, [r7, #12]
 80004e0:	3b01      	subs	r3, #1
 80004e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80004e4:	4b14      	ldr	r3, [pc, #80]	; (8000538 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80004e6:	695b      	ldr	r3, [r3, #20]
 80004e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80004ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80004f0:	d102      	bne.n	80004f8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d1f2      	bne.n	80004de <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80004f8:	4b0f      	ldr	r3, [pc, #60]	; (8000538 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80004fa:	695b      	ldr	r3, [r3, #20]
 80004fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000500:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000504:	d110      	bne.n	8000528 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000506:	2303      	movs	r3, #3
 8000508:	e00f      	b.n	800052a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800050a:	4b0b      	ldr	r3, [pc, #44]	; (8000538 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000512:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000516:	d007      	beq.n	8000528 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000518:	4b07      	ldr	r3, [pc, #28]	; (8000538 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000520:	4a05      	ldr	r2, [pc, #20]	; (8000538 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000522:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000526:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000528:	2300      	movs	r3, #0
}
 800052a:	4618      	mov	r0, r3
 800052c:	3714      	adds	r7, #20
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	40007000 	.word	0x40007000
 800053c:	20000008 	.word	0x20000008
 8000540:	431bde83 	.word	0x431bde83

08000544 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b088      	sub	sp, #32
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	2b00      	cmp	r3, #0
 8000550:	d101      	bne.n	8000556 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000552:	2301      	movs	r3, #1
 8000554:	e3d4      	b.n	8000d00 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000556:	4ba1      	ldr	r3, [pc, #644]	; (80007dc <HAL_RCC_OscConfig+0x298>)
 8000558:	689b      	ldr	r3, [r3, #8]
 800055a:	f003 030c 	and.w	r3, r3, #12
 800055e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000560:	4b9e      	ldr	r3, [pc, #632]	; (80007dc <HAL_RCC_OscConfig+0x298>)
 8000562:	68db      	ldr	r3, [r3, #12]
 8000564:	f003 0303 	and.w	r3, r3, #3
 8000568:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	f003 0310 	and.w	r3, r3, #16
 8000572:	2b00      	cmp	r3, #0
 8000574:	f000 80e4 	beq.w	8000740 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000578:	69bb      	ldr	r3, [r7, #24]
 800057a:	2b00      	cmp	r3, #0
 800057c:	d007      	beq.n	800058e <HAL_RCC_OscConfig+0x4a>
 800057e:	69bb      	ldr	r3, [r7, #24]
 8000580:	2b0c      	cmp	r3, #12
 8000582:	f040 808b 	bne.w	800069c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000586:	697b      	ldr	r3, [r7, #20]
 8000588:	2b01      	cmp	r3, #1
 800058a:	f040 8087 	bne.w	800069c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800058e:	4b93      	ldr	r3, [pc, #588]	; (80007dc <HAL_RCC_OscConfig+0x298>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	f003 0302 	and.w	r3, r3, #2
 8000596:	2b00      	cmp	r3, #0
 8000598:	d005      	beq.n	80005a6 <HAL_RCC_OscConfig+0x62>
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	699b      	ldr	r3, [r3, #24]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d101      	bne.n	80005a6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80005a2:	2301      	movs	r3, #1
 80005a4:	e3ac      	b.n	8000d00 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	6a1a      	ldr	r2, [r3, #32]
 80005aa:	4b8c      	ldr	r3, [pc, #560]	; (80007dc <HAL_RCC_OscConfig+0x298>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	f003 0308 	and.w	r3, r3, #8
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d004      	beq.n	80005c0 <HAL_RCC_OscConfig+0x7c>
 80005b6:	4b89      	ldr	r3, [pc, #548]	; (80007dc <HAL_RCC_OscConfig+0x298>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80005be:	e005      	b.n	80005cc <HAL_RCC_OscConfig+0x88>
 80005c0:	4b86      	ldr	r3, [pc, #536]	; (80007dc <HAL_RCC_OscConfig+0x298>)
 80005c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80005c6:	091b      	lsrs	r3, r3, #4
 80005c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80005cc:	4293      	cmp	r3, r2
 80005ce:	d223      	bcs.n	8000618 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	6a1b      	ldr	r3, [r3, #32]
 80005d4:	4618      	mov	r0, r3
 80005d6:	f000 fd07 	bl	8000fe8 <RCC_SetFlashLatencyFromMSIRange>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80005e0:	2301      	movs	r3, #1
 80005e2:	e38d      	b.n	8000d00 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80005e4:	4b7d      	ldr	r3, [pc, #500]	; (80007dc <HAL_RCC_OscConfig+0x298>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a7c      	ldr	r2, [pc, #496]	; (80007dc <HAL_RCC_OscConfig+0x298>)
 80005ea:	f043 0308 	orr.w	r3, r3, #8
 80005ee:	6013      	str	r3, [r2, #0]
 80005f0:	4b7a      	ldr	r3, [pc, #488]	; (80007dc <HAL_RCC_OscConfig+0x298>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	6a1b      	ldr	r3, [r3, #32]
 80005fc:	4977      	ldr	r1, [pc, #476]	; (80007dc <HAL_RCC_OscConfig+0x298>)
 80005fe:	4313      	orrs	r3, r2
 8000600:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000602:	4b76      	ldr	r3, [pc, #472]	; (80007dc <HAL_RCC_OscConfig+0x298>)
 8000604:	685b      	ldr	r3, [r3, #4]
 8000606:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	69db      	ldr	r3, [r3, #28]
 800060e:	021b      	lsls	r3, r3, #8
 8000610:	4972      	ldr	r1, [pc, #456]	; (80007dc <HAL_RCC_OscConfig+0x298>)
 8000612:	4313      	orrs	r3, r2
 8000614:	604b      	str	r3, [r1, #4]
 8000616:	e025      	b.n	8000664 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000618:	4b70      	ldr	r3, [pc, #448]	; (80007dc <HAL_RCC_OscConfig+0x298>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a6f      	ldr	r2, [pc, #444]	; (80007dc <HAL_RCC_OscConfig+0x298>)
 800061e:	f043 0308 	orr.w	r3, r3, #8
 8000622:	6013      	str	r3, [r2, #0]
 8000624:	4b6d      	ldr	r3, [pc, #436]	; (80007dc <HAL_RCC_OscConfig+0x298>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	6a1b      	ldr	r3, [r3, #32]
 8000630:	496a      	ldr	r1, [pc, #424]	; (80007dc <HAL_RCC_OscConfig+0x298>)
 8000632:	4313      	orrs	r3, r2
 8000634:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000636:	4b69      	ldr	r3, [pc, #420]	; (80007dc <HAL_RCC_OscConfig+0x298>)
 8000638:	685b      	ldr	r3, [r3, #4]
 800063a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	69db      	ldr	r3, [r3, #28]
 8000642:	021b      	lsls	r3, r3, #8
 8000644:	4965      	ldr	r1, [pc, #404]	; (80007dc <HAL_RCC_OscConfig+0x298>)
 8000646:	4313      	orrs	r3, r2
 8000648:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800064a:	69bb      	ldr	r3, [r7, #24]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d109      	bne.n	8000664 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	6a1b      	ldr	r3, [r3, #32]
 8000654:	4618      	mov	r0, r3
 8000656:	f000 fcc7 	bl	8000fe8 <RCC_SetFlashLatencyFromMSIRange>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000660:	2301      	movs	r3, #1
 8000662:	e34d      	b.n	8000d00 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000664:	f000 fc36 	bl	8000ed4 <HAL_RCC_GetSysClockFreq>
 8000668:	4601      	mov	r1, r0
 800066a:	4b5c      	ldr	r3, [pc, #368]	; (80007dc <HAL_RCC_OscConfig+0x298>)
 800066c:	689b      	ldr	r3, [r3, #8]
 800066e:	091b      	lsrs	r3, r3, #4
 8000670:	f003 030f 	and.w	r3, r3, #15
 8000674:	4a5a      	ldr	r2, [pc, #360]	; (80007e0 <HAL_RCC_OscConfig+0x29c>)
 8000676:	5cd3      	ldrb	r3, [r2, r3]
 8000678:	f003 031f 	and.w	r3, r3, #31
 800067c:	fa21 f303 	lsr.w	r3, r1, r3
 8000680:	4a58      	ldr	r2, [pc, #352]	; (80007e4 <HAL_RCC_OscConfig+0x2a0>)
 8000682:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000684:	4b58      	ldr	r3, [pc, #352]	; (80007e8 <HAL_RCC_OscConfig+0x2a4>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4618      	mov	r0, r3
 800068a:	f7ff fdb5 	bl	80001f8 <HAL_InitTick>
 800068e:	4603      	mov	r3, r0
 8000690:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000692:	7bfb      	ldrb	r3, [r7, #15]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d052      	beq.n	800073e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000698:	7bfb      	ldrb	r3, [r7, #15]
 800069a:	e331      	b.n	8000d00 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	699b      	ldr	r3, [r3, #24]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d032      	beq.n	800070a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80006a4:	4b4d      	ldr	r3, [pc, #308]	; (80007dc <HAL_RCC_OscConfig+0x298>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a4c      	ldr	r2, [pc, #304]	; (80007dc <HAL_RCC_OscConfig+0x298>)
 80006aa:	f043 0301 	orr.w	r3, r3, #1
 80006ae:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80006b0:	f7ff fdf2 	bl	8000298 <HAL_GetTick>
 80006b4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80006b6:	e008      	b.n	80006ca <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80006b8:	f7ff fdee 	bl	8000298 <HAL_GetTick>
 80006bc:	4602      	mov	r2, r0
 80006be:	693b      	ldr	r3, [r7, #16]
 80006c0:	1ad3      	subs	r3, r2, r3
 80006c2:	2b02      	cmp	r3, #2
 80006c4:	d901      	bls.n	80006ca <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80006c6:	2303      	movs	r3, #3
 80006c8:	e31a      	b.n	8000d00 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80006ca:	4b44      	ldr	r3, [pc, #272]	; (80007dc <HAL_RCC_OscConfig+0x298>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	f003 0302 	and.w	r3, r3, #2
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d0f0      	beq.n	80006b8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80006d6:	4b41      	ldr	r3, [pc, #260]	; (80007dc <HAL_RCC_OscConfig+0x298>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	4a40      	ldr	r2, [pc, #256]	; (80007dc <HAL_RCC_OscConfig+0x298>)
 80006dc:	f043 0308 	orr.w	r3, r3, #8
 80006e0:	6013      	str	r3, [r2, #0]
 80006e2:	4b3e      	ldr	r3, [pc, #248]	; (80007dc <HAL_RCC_OscConfig+0x298>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	6a1b      	ldr	r3, [r3, #32]
 80006ee:	493b      	ldr	r1, [pc, #236]	; (80007dc <HAL_RCC_OscConfig+0x298>)
 80006f0:	4313      	orrs	r3, r2
 80006f2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80006f4:	4b39      	ldr	r3, [pc, #228]	; (80007dc <HAL_RCC_OscConfig+0x298>)
 80006f6:	685b      	ldr	r3, [r3, #4]
 80006f8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	69db      	ldr	r3, [r3, #28]
 8000700:	021b      	lsls	r3, r3, #8
 8000702:	4936      	ldr	r1, [pc, #216]	; (80007dc <HAL_RCC_OscConfig+0x298>)
 8000704:	4313      	orrs	r3, r2
 8000706:	604b      	str	r3, [r1, #4]
 8000708:	e01a      	b.n	8000740 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800070a:	4b34      	ldr	r3, [pc, #208]	; (80007dc <HAL_RCC_OscConfig+0x298>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	4a33      	ldr	r2, [pc, #204]	; (80007dc <HAL_RCC_OscConfig+0x298>)
 8000710:	f023 0301 	bic.w	r3, r3, #1
 8000714:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000716:	f7ff fdbf 	bl	8000298 <HAL_GetTick>
 800071a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800071c:	e008      	b.n	8000730 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800071e:	f7ff fdbb 	bl	8000298 <HAL_GetTick>
 8000722:	4602      	mov	r2, r0
 8000724:	693b      	ldr	r3, [r7, #16]
 8000726:	1ad3      	subs	r3, r2, r3
 8000728:	2b02      	cmp	r3, #2
 800072a:	d901      	bls.n	8000730 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800072c:	2303      	movs	r3, #3
 800072e:	e2e7      	b.n	8000d00 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000730:	4b2a      	ldr	r3, [pc, #168]	; (80007dc <HAL_RCC_OscConfig+0x298>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f003 0302 	and.w	r3, r3, #2
 8000738:	2b00      	cmp	r3, #0
 800073a:	d1f0      	bne.n	800071e <HAL_RCC_OscConfig+0x1da>
 800073c:	e000      	b.n	8000740 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800073e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f003 0301 	and.w	r3, r3, #1
 8000748:	2b00      	cmp	r3, #0
 800074a:	d074      	beq.n	8000836 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800074c:	69bb      	ldr	r3, [r7, #24]
 800074e:	2b08      	cmp	r3, #8
 8000750:	d005      	beq.n	800075e <HAL_RCC_OscConfig+0x21a>
 8000752:	69bb      	ldr	r3, [r7, #24]
 8000754:	2b0c      	cmp	r3, #12
 8000756:	d10e      	bne.n	8000776 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000758:	697b      	ldr	r3, [r7, #20]
 800075a:	2b03      	cmp	r3, #3
 800075c:	d10b      	bne.n	8000776 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800075e:	4b1f      	ldr	r3, [pc, #124]	; (80007dc <HAL_RCC_OscConfig+0x298>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000766:	2b00      	cmp	r3, #0
 8000768:	d064      	beq.n	8000834 <HAL_RCC_OscConfig+0x2f0>
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	685b      	ldr	r3, [r3, #4]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d160      	bne.n	8000834 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000772:	2301      	movs	r3, #1
 8000774:	e2c4      	b.n	8000d00 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	685b      	ldr	r3, [r3, #4]
 800077a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800077e:	d106      	bne.n	800078e <HAL_RCC_OscConfig+0x24a>
 8000780:	4b16      	ldr	r3, [pc, #88]	; (80007dc <HAL_RCC_OscConfig+0x298>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a15      	ldr	r2, [pc, #84]	; (80007dc <HAL_RCC_OscConfig+0x298>)
 8000786:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800078a:	6013      	str	r3, [r2, #0]
 800078c:	e01d      	b.n	80007ca <HAL_RCC_OscConfig+0x286>
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	685b      	ldr	r3, [r3, #4]
 8000792:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000796:	d10c      	bne.n	80007b2 <HAL_RCC_OscConfig+0x26e>
 8000798:	4b10      	ldr	r3, [pc, #64]	; (80007dc <HAL_RCC_OscConfig+0x298>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a0f      	ldr	r2, [pc, #60]	; (80007dc <HAL_RCC_OscConfig+0x298>)
 800079e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007a2:	6013      	str	r3, [r2, #0]
 80007a4:	4b0d      	ldr	r3, [pc, #52]	; (80007dc <HAL_RCC_OscConfig+0x298>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a0c      	ldr	r2, [pc, #48]	; (80007dc <HAL_RCC_OscConfig+0x298>)
 80007aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007ae:	6013      	str	r3, [r2, #0]
 80007b0:	e00b      	b.n	80007ca <HAL_RCC_OscConfig+0x286>
 80007b2:	4b0a      	ldr	r3, [pc, #40]	; (80007dc <HAL_RCC_OscConfig+0x298>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4a09      	ldr	r2, [pc, #36]	; (80007dc <HAL_RCC_OscConfig+0x298>)
 80007b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007bc:	6013      	str	r3, [r2, #0]
 80007be:	4b07      	ldr	r3, [pc, #28]	; (80007dc <HAL_RCC_OscConfig+0x298>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4a06      	ldr	r2, [pc, #24]	; (80007dc <HAL_RCC_OscConfig+0x298>)
 80007c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007c8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	685b      	ldr	r3, [r3, #4]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d01c      	beq.n	800080c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80007d2:	f7ff fd61 	bl	8000298 <HAL_GetTick>
 80007d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80007d8:	e011      	b.n	80007fe <HAL_RCC_OscConfig+0x2ba>
 80007da:	bf00      	nop
 80007dc:	40021000 	.word	0x40021000
 80007e0:	080015dc 	.word	0x080015dc
 80007e4:	20000008 	.word	0x20000008
 80007e8:	20000000 	.word	0x20000000
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80007ec:	f7ff fd54 	bl	8000298 <HAL_GetTick>
 80007f0:	4602      	mov	r2, r0
 80007f2:	693b      	ldr	r3, [r7, #16]
 80007f4:	1ad3      	subs	r3, r2, r3
 80007f6:	2b64      	cmp	r3, #100	; 0x64
 80007f8:	d901      	bls.n	80007fe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80007fa:	2303      	movs	r3, #3
 80007fc:	e280      	b.n	8000d00 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80007fe:	4baf      	ldr	r3, [pc, #700]	; (8000abc <HAL_RCC_OscConfig+0x578>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000806:	2b00      	cmp	r3, #0
 8000808:	d0f0      	beq.n	80007ec <HAL_RCC_OscConfig+0x2a8>
 800080a:	e014      	b.n	8000836 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800080c:	f7ff fd44 	bl	8000298 <HAL_GetTick>
 8000810:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000812:	e008      	b.n	8000826 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000814:	f7ff fd40 	bl	8000298 <HAL_GetTick>
 8000818:	4602      	mov	r2, r0
 800081a:	693b      	ldr	r3, [r7, #16]
 800081c:	1ad3      	subs	r3, r2, r3
 800081e:	2b64      	cmp	r3, #100	; 0x64
 8000820:	d901      	bls.n	8000826 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000822:	2303      	movs	r3, #3
 8000824:	e26c      	b.n	8000d00 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000826:	4ba5      	ldr	r3, [pc, #660]	; (8000abc <HAL_RCC_OscConfig+0x578>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800082e:	2b00      	cmp	r3, #0
 8000830:	d1f0      	bne.n	8000814 <HAL_RCC_OscConfig+0x2d0>
 8000832:	e000      	b.n	8000836 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000834:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	f003 0302 	and.w	r3, r3, #2
 800083e:	2b00      	cmp	r3, #0
 8000840:	d060      	beq.n	8000904 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000842:	69bb      	ldr	r3, [r7, #24]
 8000844:	2b04      	cmp	r3, #4
 8000846:	d005      	beq.n	8000854 <HAL_RCC_OscConfig+0x310>
 8000848:	69bb      	ldr	r3, [r7, #24]
 800084a:	2b0c      	cmp	r3, #12
 800084c:	d119      	bne.n	8000882 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800084e:	697b      	ldr	r3, [r7, #20]
 8000850:	2b02      	cmp	r3, #2
 8000852:	d116      	bne.n	8000882 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000854:	4b99      	ldr	r3, [pc, #612]	; (8000abc <HAL_RCC_OscConfig+0x578>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800085c:	2b00      	cmp	r3, #0
 800085e:	d005      	beq.n	800086c <HAL_RCC_OscConfig+0x328>
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	68db      	ldr	r3, [r3, #12]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d101      	bne.n	800086c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000868:	2301      	movs	r3, #1
 800086a:	e249      	b.n	8000d00 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800086c:	4b93      	ldr	r3, [pc, #588]	; (8000abc <HAL_RCC_OscConfig+0x578>)
 800086e:	685b      	ldr	r3, [r3, #4]
 8000870:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	691b      	ldr	r3, [r3, #16]
 8000878:	061b      	lsls	r3, r3, #24
 800087a:	4990      	ldr	r1, [pc, #576]	; (8000abc <HAL_RCC_OscConfig+0x578>)
 800087c:	4313      	orrs	r3, r2
 800087e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000880:	e040      	b.n	8000904 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	68db      	ldr	r3, [r3, #12]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d023      	beq.n	80008d2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800088a:	4b8c      	ldr	r3, [pc, #560]	; (8000abc <HAL_RCC_OscConfig+0x578>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	4a8b      	ldr	r2, [pc, #556]	; (8000abc <HAL_RCC_OscConfig+0x578>)
 8000890:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000894:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000896:	f7ff fcff 	bl	8000298 <HAL_GetTick>
 800089a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800089c:	e008      	b.n	80008b0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800089e:	f7ff fcfb 	bl	8000298 <HAL_GetTick>
 80008a2:	4602      	mov	r2, r0
 80008a4:	693b      	ldr	r3, [r7, #16]
 80008a6:	1ad3      	subs	r3, r2, r3
 80008a8:	2b02      	cmp	r3, #2
 80008aa:	d901      	bls.n	80008b0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80008ac:	2303      	movs	r3, #3
 80008ae:	e227      	b.n	8000d00 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80008b0:	4b82      	ldr	r3, [pc, #520]	; (8000abc <HAL_RCC_OscConfig+0x578>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d0f0      	beq.n	800089e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008bc:	4b7f      	ldr	r3, [pc, #508]	; (8000abc <HAL_RCC_OscConfig+0x578>)
 80008be:	685b      	ldr	r3, [r3, #4]
 80008c0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	691b      	ldr	r3, [r3, #16]
 80008c8:	061b      	lsls	r3, r3, #24
 80008ca:	497c      	ldr	r1, [pc, #496]	; (8000abc <HAL_RCC_OscConfig+0x578>)
 80008cc:	4313      	orrs	r3, r2
 80008ce:	604b      	str	r3, [r1, #4]
 80008d0:	e018      	b.n	8000904 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80008d2:	4b7a      	ldr	r3, [pc, #488]	; (8000abc <HAL_RCC_OscConfig+0x578>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4a79      	ldr	r2, [pc, #484]	; (8000abc <HAL_RCC_OscConfig+0x578>)
 80008d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80008dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80008de:	f7ff fcdb 	bl	8000298 <HAL_GetTick>
 80008e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80008e4:	e008      	b.n	80008f8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80008e6:	f7ff fcd7 	bl	8000298 <HAL_GetTick>
 80008ea:	4602      	mov	r2, r0
 80008ec:	693b      	ldr	r3, [r7, #16]
 80008ee:	1ad3      	subs	r3, r2, r3
 80008f0:	2b02      	cmp	r3, #2
 80008f2:	d901      	bls.n	80008f8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80008f4:	2303      	movs	r3, #3
 80008f6:	e203      	b.n	8000d00 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80008f8:	4b70      	ldr	r3, [pc, #448]	; (8000abc <HAL_RCC_OscConfig+0x578>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000900:	2b00      	cmp	r3, #0
 8000902:	d1f0      	bne.n	80008e6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	f003 0308 	and.w	r3, r3, #8
 800090c:	2b00      	cmp	r3, #0
 800090e:	d03c      	beq.n	800098a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	695b      	ldr	r3, [r3, #20]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d01c      	beq.n	8000952 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000918:	4b68      	ldr	r3, [pc, #416]	; (8000abc <HAL_RCC_OscConfig+0x578>)
 800091a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800091e:	4a67      	ldr	r2, [pc, #412]	; (8000abc <HAL_RCC_OscConfig+0x578>)
 8000920:	f043 0301 	orr.w	r3, r3, #1
 8000924:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000928:	f7ff fcb6 	bl	8000298 <HAL_GetTick>
 800092c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800092e:	e008      	b.n	8000942 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000930:	f7ff fcb2 	bl	8000298 <HAL_GetTick>
 8000934:	4602      	mov	r2, r0
 8000936:	693b      	ldr	r3, [r7, #16]
 8000938:	1ad3      	subs	r3, r2, r3
 800093a:	2b02      	cmp	r3, #2
 800093c:	d901      	bls.n	8000942 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800093e:	2303      	movs	r3, #3
 8000940:	e1de      	b.n	8000d00 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000942:	4b5e      	ldr	r3, [pc, #376]	; (8000abc <HAL_RCC_OscConfig+0x578>)
 8000944:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000948:	f003 0302 	and.w	r3, r3, #2
 800094c:	2b00      	cmp	r3, #0
 800094e:	d0ef      	beq.n	8000930 <HAL_RCC_OscConfig+0x3ec>
 8000950:	e01b      	b.n	800098a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000952:	4b5a      	ldr	r3, [pc, #360]	; (8000abc <HAL_RCC_OscConfig+0x578>)
 8000954:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000958:	4a58      	ldr	r2, [pc, #352]	; (8000abc <HAL_RCC_OscConfig+0x578>)
 800095a:	f023 0301 	bic.w	r3, r3, #1
 800095e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000962:	f7ff fc99 	bl	8000298 <HAL_GetTick>
 8000966:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000968:	e008      	b.n	800097c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800096a:	f7ff fc95 	bl	8000298 <HAL_GetTick>
 800096e:	4602      	mov	r2, r0
 8000970:	693b      	ldr	r3, [r7, #16]
 8000972:	1ad3      	subs	r3, r2, r3
 8000974:	2b02      	cmp	r3, #2
 8000976:	d901      	bls.n	800097c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8000978:	2303      	movs	r3, #3
 800097a:	e1c1      	b.n	8000d00 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800097c:	4b4f      	ldr	r3, [pc, #316]	; (8000abc <HAL_RCC_OscConfig+0x578>)
 800097e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000982:	f003 0302 	and.w	r3, r3, #2
 8000986:	2b00      	cmp	r3, #0
 8000988:	d1ef      	bne.n	800096a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	f003 0304 	and.w	r3, r3, #4
 8000992:	2b00      	cmp	r3, #0
 8000994:	f000 80a6 	beq.w	8000ae4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000998:	2300      	movs	r3, #0
 800099a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800099c:	4b47      	ldr	r3, [pc, #284]	; (8000abc <HAL_RCC_OscConfig+0x578>)
 800099e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d10d      	bne.n	80009c4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80009a8:	4b44      	ldr	r3, [pc, #272]	; (8000abc <HAL_RCC_OscConfig+0x578>)
 80009aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ac:	4a43      	ldr	r2, [pc, #268]	; (8000abc <HAL_RCC_OscConfig+0x578>)
 80009ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009b2:	6593      	str	r3, [r2, #88]	; 0x58
 80009b4:	4b41      	ldr	r3, [pc, #260]	; (8000abc <HAL_RCC_OscConfig+0x578>)
 80009b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009bc:	60bb      	str	r3, [r7, #8]
 80009be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80009c0:	2301      	movs	r3, #1
 80009c2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80009c4:	4b3e      	ldr	r3, [pc, #248]	; (8000ac0 <HAL_RCC_OscConfig+0x57c>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d118      	bne.n	8000a02 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80009d0:	4b3b      	ldr	r3, [pc, #236]	; (8000ac0 <HAL_RCC_OscConfig+0x57c>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a3a      	ldr	r2, [pc, #232]	; (8000ac0 <HAL_RCC_OscConfig+0x57c>)
 80009d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009da:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80009dc:	f7ff fc5c 	bl	8000298 <HAL_GetTick>
 80009e0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80009e2:	e008      	b.n	80009f6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80009e4:	f7ff fc58 	bl	8000298 <HAL_GetTick>
 80009e8:	4602      	mov	r2, r0
 80009ea:	693b      	ldr	r3, [r7, #16]
 80009ec:	1ad3      	subs	r3, r2, r3
 80009ee:	2b02      	cmp	r3, #2
 80009f0:	d901      	bls.n	80009f6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80009f2:	2303      	movs	r3, #3
 80009f4:	e184      	b.n	8000d00 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80009f6:	4b32      	ldr	r3, [pc, #200]	; (8000ac0 <HAL_RCC_OscConfig+0x57c>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d0f0      	beq.n	80009e4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	689b      	ldr	r3, [r3, #8]
 8000a06:	2b01      	cmp	r3, #1
 8000a08:	d108      	bne.n	8000a1c <HAL_RCC_OscConfig+0x4d8>
 8000a0a:	4b2c      	ldr	r3, [pc, #176]	; (8000abc <HAL_RCC_OscConfig+0x578>)
 8000a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000a10:	4a2a      	ldr	r2, [pc, #168]	; (8000abc <HAL_RCC_OscConfig+0x578>)
 8000a12:	f043 0301 	orr.w	r3, r3, #1
 8000a16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000a1a:	e024      	b.n	8000a66 <HAL_RCC_OscConfig+0x522>
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	689b      	ldr	r3, [r3, #8]
 8000a20:	2b05      	cmp	r3, #5
 8000a22:	d110      	bne.n	8000a46 <HAL_RCC_OscConfig+0x502>
 8000a24:	4b25      	ldr	r3, [pc, #148]	; (8000abc <HAL_RCC_OscConfig+0x578>)
 8000a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000a2a:	4a24      	ldr	r2, [pc, #144]	; (8000abc <HAL_RCC_OscConfig+0x578>)
 8000a2c:	f043 0304 	orr.w	r3, r3, #4
 8000a30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000a34:	4b21      	ldr	r3, [pc, #132]	; (8000abc <HAL_RCC_OscConfig+0x578>)
 8000a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000a3a:	4a20      	ldr	r2, [pc, #128]	; (8000abc <HAL_RCC_OscConfig+0x578>)
 8000a3c:	f043 0301 	orr.w	r3, r3, #1
 8000a40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000a44:	e00f      	b.n	8000a66 <HAL_RCC_OscConfig+0x522>
 8000a46:	4b1d      	ldr	r3, [pc, #116]	; (8000abc <HAL_RCC_OscConfig+0x578>)
 8000a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000a4c:	4a1b      	ldr	r2, [pc, #108]	; (8000abc <HAL_RCC_OscConfig+0x578>)
 8000a4e:	f023 0301 	bic.w	r3, r3, #1
 8000a52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000a56:	4b19      	ldr	r3, [pc, #100]	; (8000abc <HAL_RCC_OscConfig+0x578>)
 8000a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000a5c:	4a17      	ldr	r2, [pc, #92]	; (8000abc <HAL_RCC_OscConfig+0x578>)
 8000a5e:	f023 0304 	bic.w	r3, r3, #4
 8000a62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	689b      	ldr	r3, [r3, #8]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d016      	beq.n	8000a9c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000a6e:	f7ff fc13 	bl	8000298 <HAL_GetTick>
 8000a72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000a74:	e00a      	b.n	8000a8c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000a76:	f7ff fc0f 	bl	8000298 <HAL_GetTick>
 8000a7a:	4602      	mov	r2, r0
 8000a7c:	693b      	ldr	r3, [r7, #16]
 8000a7e:	1ad3      	subs	r3, r2, r3
 8000a80:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d901      	bls.n	8000a8c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8000a88:	2303      	movs	r3, #3
 8000a8a:	e139      	b.n	8000d00 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000a8c:	4b0b      	ldr	r3, [pc, #44]	; (8000abc <HAL_RCC_OscConfig+0x578>)
 8000a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000a92:	f003 0302 	and.w	r3, r3, #2
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d0ed      	beq.n	8000a76 <HAL_RCC_OscConfig+0x532>
 8000a9a:	e01a      	b.n	8000ad2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000a9c:	f7ff fbfc 	bl	8000298 <HAL_GetTick>
 8000aa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000aa2:	e00f      	b.n	8000ac4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000aa4:	f7ff fbf8 	bl	8000298 <HAL_GetTick>
 8000aa8:	4602      	mov	r2, r0
 8000aaa:	693b      	ldr	r3, [r7, #16]
 8000aac:	1ad3      	subs	r3, r2, r3
 8000aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d906      	bls.n	8000ac4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8000ab6:	2303      	movs	r3, #3
 8000ab8:	e122      	b.n	8000d00 <HAL_RCC_OscConfig+0x7bc>
 8000aba:	bf00      	nop
 8000abc:	40021000 	.word	0x40021000
 8000ac0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000ac4:	4b90      	ldr	r3, [pc, #576]	; (8000d08 <HAL_RCC_OscConfig+0x7c4>)
 8000ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000aca:	f003 0302 	and.w	r3, r3, #2
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d1e8      	bne.n	8000aa4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000ad2:	7ffb      	ldrb	r3, [r7, #31]
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	d105      	bne.n	8000ae4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ad8:	4b8b      	ldr	r3, [pc, #556]	; (8000d08 <HAL_RCC_OscConfig+0x7c4>)
 8000ada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000adc:	4a8a      	ldr	r2, [pc, #552]	; (8000d08 <HAL_RCC_OscConfig+0x7c4>)
 8000ade:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ae2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	f000 8108 	beq.w	8000cfe <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000af2:	2b02      	cmp	r3, #2
 8000af4:	f040 80d0 	bne.w	8000c98 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8000af8:	4b83      	ldr	r3, [pc, #524]	; (8000d08 <HAL_RCC_OscConfig+0x7c4>)
 8000afa:	68db      	ldr	r3, [r3, #12]
 8000afc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	f003 0203 	and.w	r2, r3, #3
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	d130      	bne.n	8000b6e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	3b01      	subs	r3, #1
 8000b18:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000b1a:	429a      	cmp	r2, r3
 8000b1c:	d127      	bne.n	8000b6e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b28:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8000b2a:	429a      	cmp	r2, r3
 8000b2c:	d11f      	bne.n	8000b6e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b34:	687a      	ldr	r2, [r7, #4]
 8000b36:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8000b38:	2a07      	cmp	r2, #7
 8000b3a:	bf14      	ite	ne
 8000b3c:	2201      	movne	r2, #1
 8000b3e:	2200      	moveq	r2, #0
 8000b40:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d113      	bne.n	8000b6e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b50:	085b      	lsrs	r3, r3, #1
 8000b52:	3b01      	subs	r3, #1
 8000b54:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8000b56:	429a      	cmp	r2, r3
 8000b58:	d109      	bne.n	8000b6e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b64:	085b      	lsrs	r3, r3, #1
 8000b66:	3b01      	subs	r3, #1
 8000b68:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000b6a:	429a      	cmp	r2, r3
 8000b6c:	d06e      	beq.n	8000c4c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8000b6e:	69bb      	ldr	r3, [r7, #24]
 8000b70:	2b0c      	cmp	r3, #12
 8000b72:	d069      	beq.n	8000c48 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8000b74:	4b64      	ldr	r3, [pc, #400]	; (8000d08 <HAL_RCC_OscConfig+0x7c4>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d105      	bne.n	8000b8c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8000b80:	4b61      	ldr	r3, [pc, #388]	; (8000d08 <HAL_RCC_OscConfig+0x7c4>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	e0b7      	b.n	8000d00 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8000b90:	4b5d      	ldr	r3, [pc, #372]	; (8000d08 <HAL_RCC_OscConfig+0x7c4>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a5c      	ldr	r2, [pc, #368]	; (8000d08 <HAL_RCC_OscConfig+0x7c4>)
 8000b96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000b9a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8000b9c:	f7ff fb7c 	bl	8000298 <HAL_GetTick>
 8000ba0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000ba2:	e008      	b.n	8000bb6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ba4:	f7ff fb78 	bl	8000298 <HAL_GetTick>
 8000ba8:	4602      	mov	r2, r0
 8000baa:	693b      	ldr	r3, [r7, #16]
 8000bac:	1ad3      	subs	r3, r2, r3
 8000bae:	2b02      	cmp	r3, #2
 8000bb0:	d901      	bls.n	8000bb6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8000bb2:	2303      	movs	r3, #3
 8000bb4:	e0a4      	b.n	8000d00 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000bb6:	4b54      	ldr	r3, [pc, #336]	; (8000d08 <HAL_RCC_OscConfig+0x7c4>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d1f0      	bne.n	8000ba4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000bc2:	4b51      	ldr	r3, [pc, #324]	; (8000d08 <HAL_RCC_OscConfig+0x7c4>)
 8000bc4:	68da      	ldr	r2, [r3, #12]
 8000bc6:	4b51      	ldr	r3, [pc, #324]	; (8000d0c <HAL_RCC_OscConfig+0x7c8>)
 8000bc8:	4013      	ands	r3, r2
 8000bca:	687a      	ldr	r2, [r7, #4]
 8000bcc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8000bce:	687a      	ldr	r2, [r7, #4]
 8000bd0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000bd2:	3a01      	subs	r2, #1
 8000bd4:	0112      	lsls	r2, r2, #4
 8000bd6:	4311      	orrs	r1, r2
 8000bd8:	687a      	ldr	r2, [r7, #4]
 8000bda:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000bdc:	0212      	lsls	r2, r2, #8
 8000bde:	4311      	orrs	r1, r2
 8000be0:	687a      	ldr	r2, [r7, #4]
 8000be2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8000be4:	0852      	lsrs	r2, r2, #1
 8000be6:	3a01      	subs	r2, #1
 8000be8:	0552      	lsls	r2, r2, #21
 8000bea:	4311      	orrs	r1, r2
 8000bec:	687a      	ldr	r2, [r7, #4]
 8000bee:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000bf0:	0852      	lsrs	r2, r2, #1
 8000bf2:	3a01      	subs	r2, #1
 8000bf4:	0652      	lsls	r2, r2, #25
 8000bf6:	4311      	orrs	r1, r2
 8000bf8:	687a      	ldr	r2, [r7, #4]
 8000bfa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8000bfc:	0912      	lsrs	r2, r2, #4
 8000bfe:	0452      	lsls	r2, r2, #17
 8000c00:	430a      	orrs	r2, r1
 8000c02:	4941      	ldr	r1, [pc, #260]	; (8000d08 <HAL_RCC_OscConfig+0x7c4>)
 8000c04:	4313      	orrs	r3, r2
 8000c06:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8000c08:	4b3f      	ldr	r3, [pc, #252]	; (8000d08 <HAL_RCC_OscConfig+0x7c4>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a3e      	ldr	r2, [pc, #248]	; (8000d08 <HAL_RCC_OscConfig+0x7c4>)
 8000c0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c12:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8000c14:	4b3c      	ldr	r3, [pc, #240]	; (8000d08 <HAL_RCC_OscConfig+0x7c4>)
 8000c16:	68db      	ldr	r3, [r3, #12]
 8000c18:	4a3b      	ldr	r2, [pc, #236]	; (8000d08 <HAL_RCC_OscConfig+0x7c4>)
 8000c1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c1e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8000c20:	f7ff fb3a 	bl	8000298 <HAL_GetTick>
 8000c24:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000c26:	e008      	b.n	8000c3a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000c28:	f7ff fb36 	bl	8000298 <HAL_GetTick>
 8000c2c:	4602      	mov	r2, r0
 8000c2e:	693b      	ldr	r3, [r7, #16]
 8000c30:	1ad3      	subs	r3, r2, r3
 8000c32:	2b02      	cmp	r3, #2
 8000c34:	d901      	bls.n	8000c3a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8000c36:	2303      	movs	r3, #3
 8000c38:	e062      	b.n	8000d00 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000c3a:	4b33      	ldr	r3, [pc, #204]	; (8000d08 <HAL_RCC_OscConfig+0x7c4>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d0f0      	beq.n	8000c28 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8000c46:	e05a      	b.n	8000cfe <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	e059      	b.n	8000d00 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000c4c:	4b2e      	ldr	r3, [pc, #184]	; (8000d08 <HAL_RCC_OscConfig+0x7c4>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d152      	bne.n	8000cfe <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8000c58:	4b2b      	ldr	r3, [pc, #172]	; (8000d08 <HAL_RCC_OscConfig+0x7c4>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a2a      	ldr	r2, [pc, #168]	; (8000d08 <HAL_RCC_OscConfig+0x7c4>)
 8000c5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c62:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8000c64:	4b28      	ldr	r3, [pc, #160]	; (8000d08 <HAL_RCC_OscConfig+0x7c4>)
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	4a27      	ldr	r2, [pc, #156]	; (8000d08 <HAL_RCC_OscConfig+0x7c4>)
 8000c6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c6e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8000c70:	f7ff fb12 	bl	8000298 <HAL_GetTick>
 8000c74:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000c76:	e008      	b.n	8000c8a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000c78:	f7ff fb0e 	bl	8000298 <HAL_GetTick>
 8000c7c:	4602      	mov	r2, r0
 8000c7e:	693b      	ldr	r3, [r7, #16]
 8000c80:	1ad3      	subs	r3, r2, r3
 8000c82:	2b02      	cmp	r3, #2
 8000c84:	d901      	bls.n	8000c8a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8000c86:	2303      	movs	r3, #3
 8000c88:	e03a      	b.n	8000d00 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000c8a:	4b1f      	ldr	r3, [pc, #124]	; (8000d08 <HAL_RCC_OscConfig+0x7c4>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d0f0      	beq.n	8000c78 <HAL_RCC_OscConfig+0x734>
 8000c96:	e032      	b.n	8000cfe <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8000c98:	69bb      	ldr	r3, [r7, #24]
 8000c9a:	2b0c      	cmp	r3, #12
 8000c9c:	d02d      	beq.n	8000cfa <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000c9e:	4b1a      	ldr	r3, [pc, #104]	; (8000d08 <HAL_RCC_OscConfig+0x7c4>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4a19      	ldr	r2, [pc, #100]	; (8000d08 <HAL_RCC_OscConfig+0x7c4>)
 8000ca4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000ca8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8000caa:	4b17      	ldr	r3, [pc, #92]	; (8000d08 <HAL_RCC_OscConfig+0x7c4>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d105      	bne.n	8000cc2 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8000cb6:	4b14      	ldr	r3, [pc, #80]	; (8000d08 <HAL_RCC_OscConfig+0x7c4>)
 8000cb8:	68db      	ldr	r3, [r3, #12]
 8000cba:	4a13      	ldr	r2, [pc, #76]	; (8000d08 <HAL_RCC_OscConfig+0x7c4>)
 8000cbc:	f023 0303 	bic.w	r3, r3, #3
 8000cc0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8000cc2:	4b11      	ldr	r3, [pc, #68]	; (8000d08 <HAL_RCC_OscConfig+0x7c4>)
 8000cc4:	68db      	ldr	r3, [r3, #12]
 8000cc6:	4a10      	ldr	r2, [pc, #64]	; (8000d08 <HAL_RCC_OscConfig+0x7c4>)
 8000cc8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8000ccc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cd0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cd2:	f7ff fae1 	bl	8000298 <HAL_GetTick>
 8000cd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000cd8:	e008      	b.n	8000cec <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000cda:	f7ff fadd 	bl	8000298 <HAL_GetTick>
 8000cde:	4602      	mov	r2, r0
 8000ce0:	693b      	ldr	r3, [r7, #16]
 8000ce2:	1ad3      	subs	r3, r2, r3
 8000ce4:	2b02      	cmp	r3, #2
 8000ce6:	d901      	bls.n	8000cec <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8000ce8:	2303      	movs	r3, #3
 8000cea:	e009      	b.n	8000d00 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000cec:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <HAL_RCC_OscConfig+0x7c4>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d1f0      	bne.n	8000cda <HAL_RCC_OscConfig+0x796>
 8000cf8:	e001      	b.n	8000cfe <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e000      	b.n	8000d00 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8000cfe:	2300      	movs	r3, #0
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3720      	adds	r7, #32
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40021000 	.word	0x40021000
 8000d0c:	f99d808c 	.word	0xf99d808c

08000d10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d101      	bne.n	8000d24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000d20:	2301      	movs	r3, #1
 8000d22:	e0c8      	b.n	8000eb6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000d24:	4b66      	ldr	r3, [pc, #408]	; (8000ec0 <HAL_RCC_ClockConfig+0x1b0>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f003 0307 	and.w	r3, r3, #7
 8000d2c:	683a      	ldr	r2, [r7, #0]
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	d910      	bls.n	8000d54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d32:	4b63      	ldr	r3, [pc, #396]	; (8000ec0 <HAL_RCC_ClockConfig+0x1b0>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f023 0207 	bic.w	r2, r3, #7
 8000d3a:	4961      	ldr	r1, [pc, #388]	; (8000ec0 <HAL_RCC_ClockConfig+0x1b0>)
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d42:	4b5f      	ldr	r3, [pc, #380]	; (8000ec0 <HAL_RCC_ClockConfig+0x1b0>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f003 0307 	and.w	r3, r3, #7
 8000d4a:	683a      	ldr	r2, [r7, #0]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d001      	beq.n	8000d54 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8000d50:	2301      	movs	r3, #1
 8000d52:	e0b0      	b.n	8000eb6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f003 0301 	and.w	r3, r3, #1
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d04c      	beq.n	8000dfa <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	2b03      	cmp	r3, #3
 8000d66:	d107      	bne.n	8000d78 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000d68:	4b56      	ldr	r3, [pc, #344]	; (8000ec4 <HAL_RCC_ClockConfig+0x1b4>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d121      	bne.n	8000db8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8000d74:	2301      	movs	r3, #1
 8000d76:	e09e      	b.n	8000eb6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	2b02      	cmp	r3, #2
 8000d7e:	d107      	bne.n	8000d90 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000d80:	4b50      	ldr	r3, [pc, #320]	; (8000ec4 <HAL_RCC_ClockConfig+0x1b4>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d115      	bne.n	8000db8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	e092      	b.n	8000eb6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d107      	bne.n	8000da8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000d98:	4b4a      	ldr	r3, [pc, #296]	; (8000ec4 <HAL_RCC_ClockConfig+0x1b4>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f003 0302 	and.w	r3, r3, #2
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d109      	bne.n	8000db8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8000da4:	2301      	movs	r3, #1
 8000da6:	e086      	b.n	8000eb6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000da8:	4b46      	ldr	r3, [pc, #280]	; (8000ec4 <HAL_RCC_ClockConfig+0x1b4>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d101      	bne.n	8000db8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8000db4:	2301      	movs	r3, #1
 8000db6:	e07e      	b.n	8000eb6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8000db8:	4b42      	ldr	r3, [pc, #264]	; (8000ec4 <HAL_RCC_ClockConfig+0x1b4>)
 8000dba:	689b      	ldr	r3, [r3, #8]
 8000dbc:	f023 0203 	bic.w	r2, r3, #3
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	493f      	ldr	r1, [pc, #252]	; (8000ec4 <HAL_RCC_ClockConfig+0x1b4>)
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8000dca:	f7ff fa65 	bl	8000298 <HAL_GetTick>
 8000dce:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000dd0:	e00a      	b.n	8000de8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000dd2:	f7ff fa61 	bl	8000298 <HAL_GetTick>
 8000dd6:	4602      	mov	r2, r0
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	1ad3      	subs	r3, r2, r3
 8000ddc:	f241 3288 	movw	r2, #5000	; 0x1388
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d901      	bls.n	8000de8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8000de4:	2303      	movs	r3, #3
 8000de6:	e066      	b.n	8000eb6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000de8:	4b36      	ldr	r3, [pc, #216]	; (8000ec4 <HAL_RCC_ClockConfig+0x1b4>)
 8000dea:	689b      	ldr	r3, [r3, #8]
 8000dec:	f003 020c 	and.w	r2, r3, #12
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	429a      	cmp	r2, r3
 8000df8:	d1eb      	bne.n	8000dd2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f003 0302 	and.w	r3, r3, #2
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d008      	beq.n	8000e18 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000e06:	4b2f      	ldr	r3, [pc, #188]	; (8000ec4 <HAL_RCC_ClockConfig+0x1b4>)
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	689b      	ldr	r3, [r3, #8]
 8000e12:	492c      	ldr	r1, [pc, #176]	; (8000ec4 <HAL_RCC_ClockConfig+0x1b4>)
 8000e14:	4313      	orrs	r3, r2
 8000e16:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000e18:	4b29      	ldr	r3, [pc, #164]	; (8000ec0 <HAL_RCC_ClockConfig+0x1b0>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f003 0307 	and.w	r3, r3, #7
 8000e20:	683a      	ldr	r2, [r7, #0]
 8000e22:	429a      	cmp	r2, r3
 8000e24:	d210      	bcs.n	8000e48 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e26:	4b26      	ldr	r3, [pc, #152]	; (8000ec0 <HAL_RCC_ClockConfig+0x1b0>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f023 0207 	bic.w	r2, r3, #7
 8000e2e:	4924      	ldr	r1, [pc, #144]	; (8000ec0 <HAL_RCC_ClockConfig+0x1b0>)
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	4313      	orrs	r3, r2
 8000e34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e36:	4b22      	ldr	r3, [pc, #136]	; (8000ec0 <HAL_RCC_ClockConfig+0x1b0>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f003 0307 	and.w	r3, r3, #7
 8000e3e:	683a      	ldr	r2, [r7, #0]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d001      	beq.n	8000e48 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8000e44:	2301      	movs	r3, #1
 8000e46:	e036      	b.n	8000eb6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f003 0304 	and.w	r3, r3, #4
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d008      	beq.n	8000e66 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000e54:	4b1b      	ldr	r3, [pc, #108]	; (8000ec4 <HAL_RCC_ClockConfig+0x1b4>)
 8000e56:	689b      	ldr	r3, [r3, #8]
 8000e58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	4918      	ldr	r1, [pc, #96]	; (8000ec4 <HAL_RCC_ClockConfig+0x1b4>)
 8000e62:	4313      	orrs	r3, r2
 8000e64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f003 0308 	and.w	r3, r3, #8
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d009      	beq.n	8000e86 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000e72:	4b14      	ldr	r3, [pc, #80]	; (8000ec4 <HAL_RCC_ClockConfig+0x1b4>)
 8000e74:	689b      	ldr	r3, [r3, #8]
 8000e76:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	691b      	ldr	r3, [r3, #16]
 8000e7e:	00db      	lsls	r3, r3, #3
 8000e80:	4910      	ldr	r1, [pc, #64]	; (8000ec4 <HAL_RCC_ClockConfig+0x1b4>)
 8000e82:	4313      	orrs	r3, r2
 8000e84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000e86:	f000 f825 	bl	8000ed4 <HAL_RCC_GetSysClockFreq>
 8000e8a:	4601      	mov	r1, r0
 8000e8c:	4b0d      	ldr	r3, [pc, #52]	; (8000ec4 <HAL_RCC_ClockConfig+0x1b4>)
 8000e8e:	689b      	ldr	r3, [r3, #8]
 8000e90:	091b      	lsrs	r3, r3, #4
 8000e92:	f003 030f 	and.w	r3, r3, #15
 8000e96:	4a0c      	ldr	r2, [pc, #48]	; (8000ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8000e98:	5cd3      	ldrb	r3, [r2, r3]
 8000e9a:	f003 031f 	and.w	r3, r3, #31
 8000e9e:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea2:	4a0a      	ldr	r2, [pc, #40]	; (8000ecc <HAL_RCC_ClockConfig+0x1bc>)
 8000ea4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8000ea6:	4b0a      	ldr	r3, [pc, #40]	; (8000ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f7ff f9a4 	bl	80001f8 <HAL_InitTick>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	72fb      	strb	r3, [r7, #11]

  return status;
 8000eb4:	7afb      	ldrb	r3, [r7, #11]
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3710      	adds	r7, #16
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40022000 	.word	0x40022000
 8000ec4:	40021000 	.word	0x40021000
 8000ec8:	080015dc 	.word	0x080015dc
 8000ecc:	20000008 	.word	0x20000008
 8000ed0:	20000000 	.word	0x20000000

08000ed4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b089      	sub	sp, #36	; 0x24
 8000ed8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8000eda:	2300      	movs	r3, #0
 8000edc:	61fb      	str	r3, [r7, #28]
 8000ede:	2300      	movs	r3, #0
 8000ee0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ee2:	4b3d      	ldr	r3, [pc, #244]	; (8000fd8 <HAL_RCC_GetSysClockFreq+0x104>)
 8000ee4:	689b      	ldr	r3, [r3, #8]
 8000ee6:	f003 030c 	and.w	r3, r3, #12
 8000eea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000eec:	4b3a      	ldr	r3, [pc, #232]	; (8000fd8 <HAL_RCC_GetSysClockFreq+0x104>)
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	f003 0303 	and.w	r3, r3, #3
 8000ef4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d005      	beq.n	8000f08 <HAL_RCC_GetSysClockFreq+0x34>
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	2b0c      	cmp	r3, #12
 8000f00:	d121      	bne.n	8000f46 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d11e      	bne.n	8000f46 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8000f08:	4b33      	ldr	r3, [pc, #204]	; (8000fd8 <HAL_RCC_GetSysClockFreq+0x104>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f003 0308 	and.w	r3, r3, #8
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d107      	bne.n	8000f24 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8000f14:	4b30      	ldr	r3, [pc, #192]	; (8000fd8 <HAL_RCC_GetSysClockFreq+0x104>)
 8000f16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f1a:	0a1b      	lsrs	r3, r3, #8
 8000f1c:	f003 030f 	and.w	r3, r3, #15
 8000f20:	61fb      	str	r3, [r7, #28]
 8000f22:	e005      	b.n	8000f30 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8000f24:	4b2c      	ldr	r3, [pc, #176]	; (8000fd8 <HAL_RCC_GetSysClockFreq+0x104>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	091b      	lsrs	r3, r3, #4
 8000f2a:	f003 030f 	and.w	r3, r3, #15
 8000f2e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8000f30:	4a2a      	ldr	r2, [pc, #168]	; (8000fdc <HAL_RCC_GetSysClockFreq+0x108>)
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f38:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d10d      	bne.n	8000f5c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000f44:	e00a      	b.n	8000f5c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	2b04      	cmp	r3, #4
 8000f4a:	d102      	bne.n	8000f52 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8000f4c:	4b24      	ldr	r3, [pc, #144]	; (8000fe0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8000f4e:	61bb      	str	r3, [r7, #24]
 8000f50:	e004      	b.n	8000f5c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	2b08      	cmp	r3, #8
 8000f56:	d101      	bne.n	8000f5c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8000f58:	4b22      	ldr	r3, [pc, #136]	; (8000fe4 <HAL_RCC_GetSysClockFreq+0x110>)
 8000f5a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	2b0c      	cmp	r3, #12
 8000f60:	d133      	bne.n	8000fca <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8000f62:	4b1d      	ldr	r3, [pc, #116]	; (8000fd8 <HAL_RCC_GetSysClockFreq+0x104>)
 8000f64:	68db      	ldr	r3, [r3, #12]
 8000f66:	f003 0303 	and.w	r3, r3, #3
 8000f6a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	2b02      	cmp	r3, #2
 8000f70:	d002      	beq.n	8000f78 <HAL_RCC_GetSysClockFreq+0xa4>
 8000f72:	2b03      	cmp	r3, #3
 8000f74:	d003      	beq.n	8000f7e <HAL_RCC_GetSysClockFreq+0xaa>
 8000f76:	e005      	b.n	8000f84 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8000f78:	4b19      	ldr	r3, [pc, #100]	; (8000fe0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8000f7a:	617b      	str	r3, [r7, #20]
      break;
 8000f7c:	e005      	b.n	8000f8a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8000f7e:	4b19      	ldr	r3, [pc, #100]	; (8000fe4 <HAL_RCC_GetSysClockFreq+0x110>)
 8000f80:	617b      	str	r3, [r7, #20]
      break;
 8000f82:	e002      	b.n	8000f8a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	617b      	str	r3, [r7, #20]
      break;
 8000f88:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000f8a:	4b13      	ldr	r3, [pc, #76]	; (8000fd8 <HAL_RCC_GetSysClockFreq+0x104>)
 8000f8c:	68db      	ldr	r3, [r3, #12]
 8000f8e:	091b      	lsrs	r3, r3, #4
 8000f90:	f003 0307 	and.w	r3, r3, #7
 8000f94:	3301      	adds	r3, #1
 8000f96:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8000f98:	4b0f      	ldr	r3, [pc, #60]	; (8000fd8 <HAL_RCC_GetSysClockFreq+0x104>)
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	0a1b      	lsrs	r3, r3, #8
 8000f9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000fa2:	697a      	ldr	r2, [r7, #20]
 8000fa4:	fb02 f203 	mul.w	r2, r2, r3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fae:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000fb0:	4b09      	ldr	r3, [pc, #36]	; (8000fd8 <HAL_RCC_GetSysClockFreq+0x104>)
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	0e5b      	lsrs	r3, r3, #25
 8000fb6:	f003 0303 	and.w	r3, r3, #3
 8000fba:	3301      	adds	r3, #1
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8000fc0:	697a      	ldr	r2, [r7, #20]
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fc8:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8000fca:	69bb      	ldr	r3, [r7, #24]
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3724      	adds	r7, #36	; 0x24
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	080015ec 	.word	0x080015ec
 8000fe0:	00f42400 	.word	0x00f42400
 8000fe4:	007a1200 	.word	0x007a1200

08000fe8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000ff4:	4b2a      	ldr	r3, [pc, #168]	; (80010a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8000ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ff8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d003      	beq.n	8001008 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001000:	f7ff fa3c 	bl	800047c <HAL_PWREx_GetVoltageRange>
 8001004:	6178      	str	r0, [r7, #20]
 8001006:	e014      	b.n	8001032 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001008:	4b25      	ldr	r3, [pc, #148]	; (80010a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800100a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800100c:	4a24      	ldr	r2, [pc, #144]	; (80010a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800100e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001012:	6593      	str	r3, [r2, #88]	; 0x58
 8001014:	4b22      	ldr	r3, [pc, #136]	; (80010a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001018:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001020:	f7ff fa2c 	bl	800047c <HAL_PWREx_GetVoltageRange>
 8001024:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001026:	4b1e      	ldr	r3, [pc, #120]	; (80010a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800102a:	4a1d      	ldr	r2, [pc, #116]	; (80010a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800102c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001030:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001038:	d10b      	bne.n	8001052 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2b80      	cmp	r3, #128	; 0x80
 800103e:	d919      	bls.n	8001074 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2ba0      	cmp	r3, #160	; 0xa0
 8001044:	d902      	bls.n	800104c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001046:	2302      	movs	r3, #2
 8001048:	613b      	str	r3, [r7, #16]
 800104a:	e013      	b.n	8001074 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800104c:	2301      	movs	r3, #1
 800104e:	613b      	str	r3, [r7, #16]
 8001050:	e010      	b.n	8001074 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2b80      	cmp	r3, #128	; 0x80
 8001056:	d902      	bls.n	800105e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001058:	2303      	movs	r3, #3
 800105a:	613b      	str	r3, [r7, #16]
 800105c:	e00a      	b.n	8001074 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2b80      	cmp	r3, #128	; 0x80
 8001062:	d102      	bne.n	800106a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001064:	2302      	movs	r3, #2
 8001066:	613b      	str	r3, [r7, #16]
 8001068:	e004      	b.n	8001074 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2b70      	cmp	r3, #112	; 0x70
 800106e:	d101      	bne.n	8001074 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001070:	2301      	movs	r3, #1
 8001072:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001074:	4b0b      	ldr	r3, [pc, #44]	; (80010a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f023 0207 	bic.w	r2, r3, #7
 800107c:	4909      	ldr	r1, [pc, #36]	; (80010a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	4313      	orrs	r3, r2
 8001082:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001084:	4b07      	ldr	r3, [pc, #28]	; (80010a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f003 0307 	and.w	r3, r3, #7
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	429a      	cmp	r2, r3
 8001090:	d001      	beq.n	8001096 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e000      	b.n	8001098 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001096:	2300      	movs	r3, #0
}
 8001098:	4618      	mov	r0, r3
 800109a:	3718      	adds	r7, #24
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	40021000 	.word	0x40021000
 80010a4:	40022000 	.word	0x40022000

080010a8 <asmMax>:
 * R2 = pointer to max
 * R3 = pointer to maxIndex
 */

asmMax:
	PUSH		{R4, R5}			// saving R4 and R5 according to calling convention
 80010a8:	b430      	push	{r4, r5}
	VLDR.f32	S0, [R0]			// max = array[0] (fp register S0 is used for max)
 80010aa:	ed90 0a00 	vldr	s0, [r0]
	MOV			R4, #0				// maxIndex = 0 (register R4 is used for maxIndex)
 80010ae:	f04f 0400 	mov.w	r4, #0

080010b2 <loop>:

loop:
	SUBS		R1, R1, #1			// size = size - 1
 80010b2:	3901      	subs	r1, #1
	BLT			done				// loop finishes when R1 < 0
 80010b4:	db0c      	blt.n	80010d0 <done>
	ADD			R5, R0, R1, LSL #2	// calculate base address (in R5) for array element
 80010b6:	eb00 0581 	add.w	r5, r0, r1, lsl #2
	VLDR.f32	S1, [R5]			// load element into fp register S1 (from address in R5)
 80010ba:	edd5 0a00 	vldr	s1, [r5]
	VCMP.f32	S0, S1				// compare new element with current max
 80010be:	eeb4 0a60 	vcmp.f32	s0, s1
	VMRS		APSR_nzvc, FPSCR	// load the FP PSR to branch using FP conditions
 80010c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	BGT			continue			// if max > new element, on to the next element
 80010c6:	dc02      	bgt.n	80010ce <continue>
	VMOV.f32	S0, S1				// otherwise, max = new element
 80010c8:	eeb0 0a60 	vmov.f32	s0, s1
	MOV			R4, R1				// update maxIndex
 80010cc:	460c      	mov	r4, r1

080010ce <continue>:

continue:
	B			loop				// next iteration
 80010ce:	e7f0      	b.n	80010b2 <loop>

080010d0 <done>:

done:
	VSTR.f32	S0, [R2]			// store max value in the pointer to max variable given
 80010d0:	ed82 0a00 	vstr	s0, [r2]
	STR			R4, [R3]			// store max index in the pointer to maxIndex given
 80010d4:	601c      	str	r4, [r3, #0]
	POP			{R4, R5}			// restore context
 80010d6:	bc30      	pop	{r4, r5}
	BX			LR					// return
 80010d8:	4770      	bx	lr

080010da <cMax>:
 *      Author: Wombat
 */

#import "main.h"

void cMax(float *array, uint32_t size, float *max, uint32_t *maxIndex) {
 80010da:	b480      	push	{r7}
 80010dc:	b087      	sub	sp, #28
 80010de:	af00      	add	r7, sp, #0
 80010e0:	60f8      	str	r0, [r7, #12]
 80010e2:	60b9      	str	r1, [r7, #8]
 80010e4:	607a      	str	r2, [r7, #4]
 80010e6:	603b      	str	r3, [r7, #0]
	(*max) = array[0];
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	601a      	str	r2, [r3, #0]
	(*maxIndex) = 0;
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]

	for (uint32_t i = 1; i < size; i++) {
 80010f6:	2301      	movs	r3, #1
 80010f8:	617b      	str	r3, [r7, #20]
 80010fa:	e01a      	b.n	8001132 <cMax+0x58>
		if (array[i] > (*max)) {
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	68fa      	ldr	r2, [r7, #12]
 8001102:	4413      	add	r3, r2
 8001104:	ed93 7a00 	vldr	s14, [r3]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	edd3 7a00 	vldr	s15, [r3]
 800110e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001116:	dd09      	ble.n	800112c <cMax+0x52>
			(*max) = array[i];
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	68fa      	ldr	r2, [r7, #12]
 800111e:	4413      	add	r3, r2
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	601a      	str	r2, [r3, #0]
			(*maxIndex) = i;
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	697a      	ldr	r2, [r7, #20]
 800112a:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 1; i < size; i++) {
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	3301      	adds	r3, #1
 8001130:	617b      	str	r3, [r7, #20]
 8001132:	697a      	ldr	r2, [r7, #20]
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	429a      	cmp	r2, r3
 8001138:	d3e0      	bcc.n	80010fc <cMax+0x22>
		}
	}
}
 800113a:	bf00      	nop
 800113c:	371c      	adds	r7, #28
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
	...

08001148 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001148:	b5b0      	push	{r4, r5, r7, lr}
 800114a:	b094      	sub	sp, #80	; 0x50
 800114c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800114e:	f7ff f83b 	bl	80001c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001152:	f000 f85b 	bl	800120c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001156:	f000 f8ab 	bl	80012b0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  // define our variables and array
  float maxC = 0;
 800115a:	f04f 0300 	mov.w	r3, #0
 800115e:	643b      	str	r3, [r7, #64]	; 0x40
  float maxAsm = 0;
 8001160:	f04f 0300 	mov.w	r3, #0
 8001164:	63fb      	str	r3, [r7, #60]	; 0x3c
  float maxCMSIS = 0;
 8001166:	f04f 0300 	mov.w	r3, #0
 800116a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t maxIndexC;
  uint32_t maxIndexAsm;
  uint32_t maxIndexCMSIS;
  // the max is 88.49 at index 5
  float array[10] = {48.21, 79.48, 24.27, 28.82, 78.24, 88.49, 31.19, 5.52, 82.70, 77.73};
 800116c:	4b25      	ldr	r3, [pc, #148]	; (8001204 <main+0xbc>)
 800116e:	1d3c      	adds	r4, r7, #4
 8001170:	461d      	mov	r5, r3
 8001172:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001174:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001176:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001178:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800117a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800117e:	e884 0003 	stmia.w	r4, {r0, r1}
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	ITM_Port32(31) = 1;
 8001182:	4b21      	ldr	r3, [pc, #132]	; (8001208 <main+0xc0>)
 8001184:	2201      	movs	r2, #1
 8001186:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < 1000; i++)
 8001188:	2300      	movs	r3, #0
 800118a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800118c:	e00a      	b.n	80011a4 <main+0x5c>
		cMax(&array, 10, &maxC, &maxIndexC);
 800118e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001192:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001196:	1d38      	adds	r0, r7, #4
 8001198:	210a      	movs	r1, #10
 800119a:	f7ff ff9e 	bl	80010da <cMax>
	for (uint32_t i = 0; i < 1000; i++)
 800119e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80011a0:	3301      	adds	r3, #1
 80011a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80011a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80011a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011aa:	d3f0      	bcc.n	800118e <main+0x46>
	ITM_Port32(31) = 2;
 80011ac:	4b16      	ldr	r3, [pc, #88]	; (8001208 <main+0xc0>)
 80011ae:	2202      	movs	r2, #2
 80011b0:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < 1000; i++)
 80011b2:	2300      	movs	r3, #0
 80011b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80011b6:	e00a      	b.n	80011ce <main+0x86>
		asmMax(&array, 10, &maxAsm, &maxIndexAsm);
 80011b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011bc:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80011c0:	1d38      	adds	r0, r7, #4
 80011c2:	210a      	movs	r1, #10
 80011c4:	f7ff ff70 	bl	80010a8 <asmMax>
	for (uint32_t i = 0; i < 1000; i++)
 80011c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80011ca:	3301      	adds	r3, #1
 80011cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80011ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80011d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011d4:	d3f0      	bcc.n	80011b8 <main+0x70>
	ITM_Port32(31) = 3;
 80011d6:	4b0c      	ldr	r3, [pc, #48]	; (8001208 <main+0xc0>)
 80011d8:	2203      	movs	r2, #3
 80011da:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < 1000; i++)
 80011dc:	2300      	movs	r3, #0
 80011de:	647b      	str	r3, [r7, #68]	; 0x44
 80011e0:	e00a      	b.n	80011f8 <main+0xb0>
		arm_max_f32(&array, 10, &maxCMSIS, &maxIndexCMSIS);
 80011e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011e6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80011ea:	1d38      	adds	r0, r7, #4
 80011ec:	210a      	movs	r1, #10
 80011ee:	f000 f93d 	bl	800146c <arm_max_f32>
	for (uint32_t i = 0; i < 1000; i++)
 80011f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011f4:	3301      	adds	r3, #1
 80011f6:	647b      	str	r3, [r7, #68]	; 0x44
 80011f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011fe:	d3f0      	bcc.n	80011e2 <main+0x9a>
	ITM_Port32(31) = 1;
 8001200:	e7bf      	b.n	8001182 <main+0x3a>
 8001202:	bf00      	nop
 8001204:	080015b4 	.word	0x080015b4
 8001208:	e000007c 	.word	0xe000007c

0800120c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b096      	sub	sp, #88	; 0x58
 8001210:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001212:	f107 0314 	add.w	r3, r7, #20
 8001216:	2244      	movs	r2, #68	; 0x44
 8001218:	2100      	movs	r1, #0
 800121a:	4618      	mov	r0, r3
 800121c:	f000 f9b6 	bl	800158c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001220:	463b      	mov	r3, r7
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	605a      	str	r2, [r3, #4]
 8001228:	609a      	str	r2, [r3, #8]
 800122a:	60da      	str	r2, [r3, #12]
 800122c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800122e:	2310      	movs	r3, #16
 8001230:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001232:	2301      	movs	r3, #1
 8001234:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001236:	2300      	movs	r3, #0
 8001238:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800123a:	2360      	movs	r3, #96	; 0x60
 800123c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800123e:	2302      	movs	r3, #2
 8001240:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001242:	2301      	movs	r3, #1
 8001244:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001246:	2301      	movs	r3, #1
 8001248:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800124a:	2328      	movs	r3, #40	; 0x28
 800124c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800124e:	2307      	movs	r3, #7
 8001250:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001252:	2302      	movs	r3, #2
 8001254:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001256:	2302      	movs	r3, #2
 8001258:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800125a:	f107 0314 	add.w	r3, r7, #20
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff f970 	bl	8000544 <HAL_RCC_OscConfig>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <SystemClock_Config+0x62>
  {
    Error_Handler();
 800126a:	f000 f845 	bl	80012f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800126e:	230f      	movs	r3, #15
 8001270:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001272:	2303      	movs	r3, #3
 8001274:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001276:	2300      	movs	r3, #0
 8001278:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800127a:	2300      	movs	r3, #0
 800127c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800127e:	2300      	movs	r3, #0
 8001280:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001282:	463b      	mov	r3, r7
 8001284:	2104      	movs	r1, #4
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff fd42 	bl	8000d10 <HAL_RCC_ClockConfig>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001292:	f000 f831 	bl	80012f8 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001296:	f44f 7000 	mov.w	r0, #512	; 0x200
 800129a:	f7ff f8fd 	bl	8000498 <HAL_PWREx_ControlVoltageScaling>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80012a4:	f000 f828 	bl	80012f8 <Error_Handler>
  }
}
 80012a8:	bf00      	nop
 80012aa:	3758      	adds	r7, #88	; 0x58
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b6:	4b0f      	ldr	r3, [pc, #60]	; (80012f4 <MX_GPIO_Init+0x44>)
 80012b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ba:	4a0e      	ldr	r2, [pc, #56]	; (80012f4 <MX_GPIO_Init+0x44>)
 80012bc:	f043 0301 	orr.w	r3, r3, #1
 80012c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012c2:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <MX_GPIO_Init+0x44>)
 80012c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	607b      	str	r3, [r7, #4]
 80012cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ce:	4b09      	ldr	r3, [pc, #36]	; (80012f4 <MX_GPIO_Init+0x44>)
 80012d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d2:	4a08      	ldr	r2, [pc, #32]	; (80012f4 <MX_GPIO_Init+0x44>)
 80012d4:	f043 0302 	orr.w	r3, r3, #2
 80012d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012da:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <MX_GPIO_Init+0x44>)
 80012dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	603b      	str	r3, [r7, #0]
 80012e4:	683b      	ldr	r3, [r7, #0]

}
 80012e6:	bf00      	nop
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	40021000 	.word	0x40021000

080012f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80012fc:	bf00      	nop
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
	...

08001308 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800130e:	4b0f      	ldr	r3, [pc, #60]	; (800134c <HAL_MspInit+0x44>)
 8001310:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001312:	4a0e      	ldr	r2, [pc, #56]	; (800134c <HAL_MspInit+0x44>)
 8001314:	f043 0301 	orr.w	r3, r3, #1
 8001318:	6613      	str	r3, [r2, #96]	; 0x60
 800131a:	4b0c      	ldr	r3, [pc, #48]	; (800134c <HAL_MspInit+0x44>)
 800131c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	607b      	str	r3, [r7, #4]
 8001324:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001326:	4b09      	ldr	r3, [pc, #36]	; (800134c <HAL_MspInit+0x44>)
 8001328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800132a:	4a08      	ldr	r2, [pc, #32]	; (800134c <HAL_MspInit+0x44>)
 800132c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001330:	6593      	str	r3, [r2, #88]	; 0x58
 8001332:	4b06      	ldr	r3, [pc, #24]	; (800134c <HAL_MspInit+0x44>)
 8001334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800133a:	603b      	str	r3, [r7, #0]
 800133c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	40021000 	.word	0x40021000

08001350 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001354:	bf00      	nop
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr

0800135e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800135e:	b480      	push	{r7}
 8001360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001362:	e7fe      	b.n	8001362 <HardFault_Handler+0x4>

08001364 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001368:	e7fe      	b.n	8001368 <MemManage_Handler+0x4>

0800136a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800136a:	b480      	push	{r7}
 800136c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800136e:	e7fe      	b.n	800136e <BusFault_Handler+0x4>

08001370 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001374:	e7fe      	b.n	8001374 <UsageFault_Handler+0x4>

08001376 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001376:	b480      	push	{r7}
 8001378:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800137a:	bf00      	nop
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr

08001384 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr

08001392 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001392:	b480      	push	{r7}
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001396:	bf00      	nop
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013a4:	f7fe ff64 	bl	8000270 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013a8:	bf00      	nop
 80013aa:	bd80      	pop	{r7, pc}

080013ac <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013b0:	4b17      	ldr	r3, [pc, #92]	; (8001410 <SystemInit+0x64>)
 80013b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013b6:	4a16      	ldr	r2, [pc, #88]	; (8001410 <SystemInit+0x64>)
 80013b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80013c0:	4b14      	ldr	r3, [pc, #80]	; (8001414 <SystemInit+0x68>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a13      	ldr	r2, [pc, #76]	; (8001414 <SystemInit+0x68>)
 80013c6:	f043 0301 	orr.w	r3, r3, #1
 80013ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80013cc:	4b11      	ldr	r3, [pc, #68]	; (8001414 <SystemInit+0x68>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80013d2:	4b10      	ldr	r3, [pc, #64]	; (8001414 <SystemInit+0x68>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a0f      	ldr	r2, [pc, #60]	; (8001414 <SystemInit+0x68>)
 80013d8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80013dc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80013e0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80013e2:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <SystemInit+0x68>)
 80013e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013e8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80013ea:	4b0a      	ldr	r3, [pc, #40]	; (8001414 <SystemInit+0x68>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a09      	ldr	r2, [pc, #36]	; (8001414 <SystemInit+0x68>)
 80013f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013f4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80013f6:	4b07      	ldr	r3, [pc, #28]	; (8001414 <SystemInit+0x68>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80013fc:	4b04      	ldr	r3, [pc, #16]	; (8001410 <SystemInit+0x64>)
 80013fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001402:	609a      	str	r2, [r3, #8]
#endif
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	e000ed00 	.word	0xe000ed00
 8001414:	40021000 	.word	0x40021000

08001418 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001418:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001450 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800141c:	f7ff ffc6 	bl	80013ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001420:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001422:	e003      	b.n	800142c <LoopCopyDataInit>

08001424 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001424:	4b0b      	ldr	r3, [pc, #44]	; (8001454 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001426:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001428:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800142a:	3104      	adds	r1, #4

0800142c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800142c:	480a      	ldr	r0, [pc, #40]	; (8001458 <LoopForever+0xa>)
	ldr	r3, =_edata
 800142e:	4b0b      	ldr	r3, [pc, #44]	; (800145c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001430:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001432:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001434:	d3f6      	bcc.n	8001424 <CopyDataInit>
	ldr	r2, =_sbss
 8001436:	4a0a      	ldr	r2, [pc, #40]	; (8001460 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001438:	e002      	b.n	8001440 <LoopFillZerobss>

0800143a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800143a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800143c:	f842 3b04 	str.w	r3, [r2], #4

08001440 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001440:	4b08      	ldr	r3, [pc, #32]	; (8001464 <LoopForever+0x16>)
	cmp	r2, r3
 8001442:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001444:	d3f9      	bcc.n	800143a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001446:	f000 f87d 	bl	8001544 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800144a:	f7ff fe7d 	bl	8001148 <main>

0800144e <LoopForever>:

LoopForever:
    b LoopForever
 800144e:	e7fe      	b.n	800144e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001450:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001454:	08001624 	.word	0x08001624
	ldr	r0, =_sdata
 8001458:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800145c:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8001460:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8001464:	2000002c 	.word	0x2000002c

08001468 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001468:	e7fe      	b.n	8001468 <ADC1_2_IRQHandler>
	...

0800146c <arm_max_f32>:
 800146c:	f101 3cff 	add.w	ip, r1, #4294967295
 8001470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001472:	4607      	mov	r7, r0
 8001474:	ea5f 0e9c 	movs.w	lr, ip, lsr #2
 8001478:	ecf7 7a01 	vldmia	r7!, {s15}
 800147c:	d060      	beq.n	8001540 <arm_max_f32+0xd4>
 800147e:	2400      	movs	r4, #0
 8001480:	3014      	adds	r0, #20
 8001482:	4625      	mov	r5, r4
 8001484:	ea4f 068e 	mov.w	r6, lr, lsl #2
 8001488:	ed10 7a04 	vldr	s14, [r0, #-16]
 800148c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001494:	bf48      	it	mi
 8001496:	eef0 7a47 	vmovmi.f32	s15, s14
 800149a:	ed10 7a03 	vldr	s14, [r0, #-12]
 800149e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014a2:	bf48      	it	mi
 80014a4:	1c65      	addmi	r5, r4, #1
 80014a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014aa:	bf48      	it	mi
 80014ac:	eef0 7a47 	vmovmi.f32	s15, s14
 80014b0:	ed10 7a02 	vldr	s14, [r0, #-8]
 80014b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014b8:	bf48      	it	mi
 80014ba:	1ca5      	addmi	r5, r4, #2
 80014bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014c0:	bf48      	it	mi
 80014c2:	eef0 7a47 	vmovmi.f32	s15, s14
 80014c6:	ed10 7a01 	vldr	s14, [r0, #-4]
 80014ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014ce:	bf48      	it	mi
 80014d0:	1ce5      	addmi	r5, r4, #3
 80014d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014d6:	f104 0404 	add.w	r4, r4, #4
 80014da:	bf44      	itt	mi
 80014dc:	eef0 7a47 	vmovmi.f32	s15, s14
 80014e0:	4625      	movmi	r5, r4
 80014e2:	42a6      	cmp	r6, r4
 80014e4:	f100 0010 	add.w	r0, r0, #16
 80014e8:	d1ce      	bne.n	8001488 <arm_max_f32+0x1c>
 80014ea:	eb07 170e 	add.w	r7, r7, lr, lsl #4
 80014ee:	f01c 0003 	ands.w	r0, ip, #3
 80014f2:	d021      	beq.n	8001538 <arm_max_f32+0xcc>
 80014f4:	ed97 7a00 	vldr	s14, [r7]
 80014f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001500:	bfc4      	itt	gt
 8001502:	eef0 7a47 	vmovgt.f32	s15, s14
 8001506:	1a0d      	subgt	r5, r1, r0
 8001508:	3801      	subs	r0, #1
 800150a:	d015      	beq.n	8001538 <arm_max_f32+0xcc>
 800150c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001510:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001518:	bf44      	itt	mi
 800151a:	eef0 7a47 	vmovmi.f32	s15, s14
 800151e:	1a0d      	submi	r5, r1, r0
 8001520:	2801      	cmp	r0, #1
 8001522:	d009      	beq.n	8001538 <arm_max_f32+0xcc>
 8001524:	ed97 7a02 	vldr	s14, [r7, #8]
 8001528:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800152c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001530:	bfc4      	itt	gt
 8001532:	eef0 7a47 	vmovgt.f32	s15, s14
 8001536:	4665      	movgt	r5, ip
 8001538:	edc2 7a00 	vstr	s15, [r2]
 800153c:	601d      	str	r5, [r3, #0]
 800153e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001540:	4675      	mov	r5, lr
 8001542:	e7d4      	b.n	80014ee <arm_max_f32+0x82>

08001544 <__libc_init_array>:
 8001544:	b570      	push	{r4, r5, r6, lr}
 8001546:	4e0d      	ldr	r6, [pc, #52]	; (800157c <__libc_init_array+0x38>)
 8001548:	4c0d      	ldr	r4, [pc, #52]	; (8001580 <__libc_init_array+0x3c>)
 800154a:	1ba4      	subs	r4, r4, r6
 800154c:	10a4      	asrs	r4, r4, #2
 800154e:	2500      	movs	r5, #0
 8001550:	42a5      	cmp	r5, r4
 8001552:	d109      	bne.n	8001568 <__libc_init_array+0x24>
 8001554:	4e0b      	ldr	r6, [pc, #44]	; (8001584 <__libc_init_array+0x40>)
 8001556:	4c0c      	ldr	r4, [pc, #48]	; (8001588 <__libc_init_array+0x44>)
 8001558:	f000 f820 	bl	800159c <_init>
 800155c:	1ba4      	subs	r4, r4, r6
 800155e:	10a4      	asrs	r4, r4, #2
 8001560:	2500      	movs	r5, #0
 8001562:	42a5      	cmp	r5, r4
 8001564:	d105      	bne.n	8001572 <__libc_init_array+0x2e>
 8001566:	bd70      	pop	{r4, r5, r6, pc}
 8001568:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800156c:	4798      	blx	r3
 800156e:	3501      	adds	r5, #1
 8001570:	e7ee      	b.n	8001550 <__libc_init_array+0xc>
 8001572:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001576:	4798      	blx	r3
 8001578:	3501      	adds	r5, #1
 800157a:	e7f2      	b.n	8001562 <__libc_init_array+0x1e>
 800157c:	0800161c 	.word	0x0800161c
 8001580:	0800161c 	.word	0x0800161c
 8001584:	0800161c 	.word	0x0800161c
 8001588:	08001620 	.word	0x08001620

0800158c <memset>:
 800158c:	4402      	add	r2, r0
 800158e:	4603      	mov	r3, r0
 8001590:	4293      	cmp	r3, r2
 8001592:	d100      	bne.n	8001596 <memset+0xa>
 8001594:	4770      	bx	lr
 8001596:	f803 1b01 	strb.w	r1, [r3], #1
 800159a:	e7f9      	b.n	8001590 <memset+0x4>

0800159c <_init>:
 800159c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800159e:	bf00      	nop
 80015a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015a2:	bc08      	pop	{r3}
 80015a4:	469e      	mov	lr, r3
 80015a6:	4770      	bx	lr

080015a8 <_fini>:
 80015a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015aa:	bf00      	nop
 80015ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015ae:	bc08      	pop	{r3}
 80015b0:	469e      	mov	lr, r3
 80015b2:	4770      	bx	lr
