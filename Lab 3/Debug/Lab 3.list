
Lab 3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003af8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003c80  08003c80  00013c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003cc0  08003cc0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003cc0  08003cc0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003cc0  08003cc0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cc0  08003cc0  00013cc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003cc4  08003cc4  00013cc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003cc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  2000000c  08003cd4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08003cd4  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a1de  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000015d0  00000000  00000000  0002a21a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009c8  00000000  00000000  0002b7f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000910  00000000  00000000  0002c1b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025d90  00000000  00000000  0002cac8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007810  00000000  00000000  00052858  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f1bf0  00000000  00000000  0005a068  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014bc58  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002928  00000000  00000000  0014bcd4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003c68 	.word	0x08003c68

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003c68 	.word	0x08003c68

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a0e:	2003      	movs	r0, #3
 8000a10:	f001 fb08 	bl	8002024 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a14:	2000      	movs	r0, #0
 8000a16:	f000 f80d 	bl	8000a34 <HAL_InitTick>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d002      	beq.n	8000a26 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a20:	2301      	movs	r3, #1
 8000a22:	71fb      	strb	r3, [r7, #7]
 8000a24:	e001      	b.n	8000a2a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a26:	f002 fff9 	bl	8003a1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	3708      	adds	r7, #8
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a40:	4b17      	ldr	r3, [pc, #92]	; (8000aa0 <HAL_InitTick+0x6c>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d023      	beq.n	8000a90 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a48:	4b16      	ldr	r3, [pc, #88]	; (8000aa4 <HAL_InitTick+0x70>)
 8000a4a:	681a      	ldr	r2, [r3, #0]
 8000a4c:	4b14      	ldr	r3, [pc, #80]	; (8000aa0 <HAL_InitTick+0x6c>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	4619      	mov	r1, r3
 8000a52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f001 fb07 	bl	8002072 <HAL_SYSTICK_Config>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d10f      	bne.n	8000a8a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2b0f      	cmp	r3, #15
 8000a6e:	d809      	bhi.n	8000a84 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a70:	2200      	movs	r2, #0
 8000a72:	6879      	ldr	r1, [r7, #4]
 8000a74:	f04f 30ff 	mov.w	r0, #4294967295
 8000a78:	f001 fadf 	bl	800203a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a7c:	4a0a      	ldr	r2, [pc, #40]	; (8000aa8 <HAL_InitTick+0x74>)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	6013      	str	r3, [r2, #0]
 8000a82:	e007      	b.n	8000a94 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000a84:	2301      	movs	r3, #1
 8000a86:	73fb      	strb	r3, [r7, #15]
 8000a88:	e004      	b.n	8000a94 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	73fb      	strb	r3, [r7, #15]
 8000a8e:	e001      	b.n	8000a94 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a90:	2301      	movs	r3, #1
 8000a92:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3710      	adds	r7, #16
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	20000004 	.word	0x20000004
 8000aa4:	20000008 	.word	0x20000008
 8000aa8:	20000000 	.word	0x20000000

08000aac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ab0:	4b06      	ldr	r3, [pc, #24]	; (8000acc <HAL_IncTick+0x20>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <HAL_IncTick+0x24>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4413      	add	r3, r2
 8000abc:	4a04      	ldr	r2, [pc, #16]	; (8000ad0 <HAL_IncTick+0x24>)
 8000abe:	6013      	str	r3, [r2, #0]
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	20000004 	.word	0x20000004
 8000ad0:	2000002c 	.word	0x2000002c

08000ad4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ad8:	4b03      	ldr	r3, [pc, #12]	; (8000ae8 <HAL_GetTick+0x14>)
 8000ada:	681b      	ldr	r3, [r3, #0]
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	2000002c 	.word	0x2000002c

08000aec <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
 8000af4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	689b      	ldr	r3, [r3, #8]
 8000afa:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	431a      	orrs	r2, r3
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	609a      	str	r2, [r3, #8]
}
 8000b06:	bf00      	nop
 8000b08:	370c      	adds	r7, #12
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr

08000b12 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000b12:	b480      	push	{r7}
 8000b14:	b083      	sub	sp, #12
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	6078      	str	r0, [r7, #4]
 8000b1a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	689b      	ldr	r3, [r3, #8]
 8000b20:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	431a      	orrs	r2, r3
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
}
 8000b2c:	bf00      	nop
 8000b2e:	370c      	adds	r7, #12
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr

08000b38 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	689b      	ldr	r3, [r3, #8]
 8000b44:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	370c      	adds	r7, #12
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr

08000b54 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b087      	sub	sp, #28
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	60f8      	str	r0, [r7, #12]
 8000b5c:	60b9      	str	r1, [r7, #8]
 8000b5e:	607a      	str	r2, [r7, #4]
 8000b60:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	3360      	adds	r3, #96	; 0x60
 8000b66:	461a      	mov	r2, r3
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	009b      	lsls	r3, r3, #2
 8000b6c:	4413      	add	r3, r2
 8000b6e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <LL_ADC_SetOffset+0x44>)
 8000b76:	4013      	ands	r3, r2
 8000b78:	687a      	ldr	r2, [r7, #4]
 8000b7a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000b7e:	683a      	ldr	r2, [r7, #0]
 8000b80:	430a      	orrs	r2, r1
 8000b82:	4313      	orrs	r3, r2
 8000b84:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000b8c:	bf00      	nop
 8000b8e:	371c      	adds	r7, #28
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	03fff000 	.word	0x03fff000

08000b9c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b085      	sub	sp, #20
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
 8000ba4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	3360      	adds	r3, #96	; 0x60
 8000baa:	461a      	mov	r2, r3
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	009b      	lsls	r3, r3, #2
 8000bb0:	4413      	add	r3, r2
 8000bb2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	3714      	adds	r7, #20
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr

08000bc8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b087      	sub	sp, #28
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	60f8      	str	r0, [r7, #12]
 8000bd0:	60b9      	str	r1, [r7, #8]
 8000bd2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	3360      	adds	r3, #96	; 0x60
 8000bd8:	461a      	mov	r2, r3
 8000bda:	68bb      	ldr	r3, [r7, #8]
 8000bdc:	009b      	lsls	r3, r3, #2
 8000bde:	4413      	add	r3, r2
 8000be0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	431a      	orrs	r2, r3
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000bf2:	bf00      	nop
 8000bf4:	371c      	adds	r7, #28
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr

08000bfe <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	b083      	sub	sp, #12
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	68db      	ldr	r3, [r3, #12]
 8000c0a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d101      	bne.n	8000c16 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000c12:	2301      	movs	r3, #1
 8000c14:	e000      	b.n	8000c18 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000c16:	2300      	movs	r3, #0
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b087      	sub	sp, #28
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	60f8      	str	r0, [r7, #12]
 8000c2c:	60b9      	str	r1, [r7, #8]
 8000c2e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	3330      	adds	r3, #48	; 0x30
 8000c34:	461a      	mov	r2, r3
 8000c36:	68bb      	ldr	r3, [r7, #8]
 8000c38:	0a1b      	lsrs	r3, r3, #8
 8000c3a:	009b      	lsls	r3, r3, #2
 8000c3c:	f003 030c 	and.w	r3, r3, #12
 8000c40:	4413      	add	r3, r2
 8000c42:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	f003 031f 	and.w	r3, r3, #31
 8000c4e:	211f      	movs	r1, #31
 8000c50:	fa01 f303 	lsl.w	r3, r1, r3
 8000c54:	43db      	mvns	r3, r3
 8000c56:	401a      	ands	r2, r3
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	0e9b      	lsrs	r3, r3, #26
 8000c5c:	f003 011f 	and.w	r1, r3, #31
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	f003 031f 	and.w	r3, r3, #31
 8000c66:	fa01 f303 	lsl.w	r3, r1, r3
 8000c6a:	431a      	orrs	r2, r3
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000c70:	bf00      	nop
 8000c72:	371c      	adds	r7, #28
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr

08000c7c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b087      	sub	sp, #28
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	60f8      	str	r0, [r7, #12]
 8000c84:	60b9      	str	r1, [r7, #8]
 8000c86:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	3314      	adds	r3, #20
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	68bb      	ldr	r3, [r7, #8]
 8000c90:	0e5b      	lsrs	r3, r3, #25
 8000c92:	009b      	lsls	r3, r3, #2
 8000c94:	f003 0304 	and.w	r3, r3, #4
 8000c98:	4413      	add	r3, r2
 8000c9a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	0d1b      	lsrs	r3, r3, #20
 8000ca4:	f003 031f 	and.w	r3, r3, #31
 8000ca8:	2107      	movs	r1, #7
 8000caa:	fa01 f303 	lsl.w	r3, r1, r3
 8000cae:	43db      	mvns	r3, r3
 8000cb0:	401a      	ands	r2, r3
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	0d1b      	lsrs	r3, r3, #20
 8000cb6:	f003 031f 	and.w	r3, r3, #31
 8000cba:	6879      	ldr	r1, [r7, #4]
 8000cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc0:	431a      	orrs	r2, r3
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000cc6:	bf00      	nop
 8000cc8:	371c      	adds	r7, #28
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
	...

08000cd4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	60f8      	str	r0, [r7, #12]
 8000cdc:	60b9      	str	r1, [r7, #8]
 8000cde:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000ce6:	68bb      	ldr	r3, [r7, #8]
 8000ce8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000cec:	43db      	mvns	r3, r3
 8000cee:	401a      	ands	r2, r3
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	f003 0318 	and.w	r3, r3, #24
 8000cf6:	4908      	ldr	r1, [pc, #32]	; (8000d18 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000cf8:	40d9      	lsrs	r1, r3
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	400b      	ands	r3, r1
 8000cfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000d02:	431a      	orrs	r2, r3
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000d0a:	bf00      	nop
 8000d0c:	3714      	adds	r7, #20
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	0007ffff 	.word	0x0007ffff

08000d1c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	689b      	ldr	r3, [r3, #8]
 8000d28:	f003 031f 	and.w	r3, r3, #31
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	370c      	adds	r7, #12
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	689b      	ldr	r3, [r3, #8]
 8000d44:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	370c      	adds	r7, #12
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr

08000d54 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	689b      	ldr	r3, [r3, #8]
 8000d60:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000d64:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000d68:	687a      	ldr	r2, [r7, #4]
 8000d6a:	6093      	str	r3, [r2, #8]
}
 8000d6c:	bf00      	nop
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr

08000d78 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	689b      	ldr	r3, [r3, #8]
 8000d84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000d88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000d8c:	d101      	bne.n	8000d92 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e000      	b.n	8000d94 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000d92:	2300      	movs	r3, #0
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr

08000da0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	689b      	ldr	r3, [r3, #8]
 8000dac:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000db0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000db4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000dbc:	bf00      	nop
 8000dbe:	370c      	adds	r7, #12
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr

08000dc8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	689b      	ldr	r3, [r3, #8]
 8000dd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dd8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000ddc:	d101      	bne.n	8000de2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000dde:	2301      	movs	r3, #1
 8000de0:	e000      	b.n	8000de4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000de2:	2300      	movs	r3, #0
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr

08000df0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	689b      	ldr	r3, [r3, #8]
 8000dfc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000e00:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000e04:	f043 0201 	orr.w	r2, r3, #1
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000e0c:	bf00      	nop
 8000e0e:	370c      	adds	r7, #12
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr

08000e18 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	689b      	ldr	r3, [r3, #8]
 8000e24:	f003 0301 	and.w	r3, r3, #1
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d101      	bne.n	8000e30 <LL_ADC_IsEnabled+0x18>
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	e000      	b.n	8000e32 <LL_ADC_IsEnabled+0x1a>
 8000e30:	2300      	movs	r3, #0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	370c      	adds	r7, #12
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr

08000e3e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	b083      	sub	sp, #12
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	689b      	ldr	r3, [r3, #8]
 8000e4a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000e4e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000e52:	f043 0204 	orr.w	r2, r3, #4
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000e5a:	bf00      	nop
 8000e5c:	370c      	adds	r7, #12
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr

08000e66 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000e66:	b480      	push	{r7}
 8000e68:	b083      	sub	sp, #12
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	689b      	ldr	r3, [r3, #8]
 8000e72:	f003 0304 	and.w	r3, r3, #4
 8000e76:	2b04      	cmp	r3, #4
 8000e78:	d101      	bne.n	8000e7e <LL_ADC_REG_IsConversionOngoing+0x18>
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e000      	b.n	8000e80 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000e7e:	2300      	movs	r3, #0
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	689b      	ldr	r3, [r3, #8]
 8000e98:	f003 0308 	and.w	r3, r3, #8
 8000e9c:	2b08      	cmp	r3, #8
 8000e9e:	d101      	bne.n	8000ea4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	e000      	b.n	8000ea6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000ea4:	2300      	movs	r3, #0
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	370c      	adds	r7, #12
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
	...

08000eb4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000eb4:	b590      	push	{r4, r7, lr}
 8000eb6:	b089      	sub	sp, #36	; 0x24
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d101      	bne.n	8000ece <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e134      	b.n	8001138 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	691b      	ldr	r3, [r3, #16]
 8000ed2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d109      	bne.n	8000ef0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000edc:	6878      	ldr	r0, [r7, #4]
 8000ede:	f002 fdc1 	bl	8003a64 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2200      	movs	r2, #0
 8000eec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff ff3f 	bl	8000d78 <LL_ADC_IsDeepPowerDownEnabled>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d004      	beq.n	8000f0a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff ff25 	bl	8000d54 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff ff5a 	bl	8000dc8 <LL_ADC_IsInternalRegulatorEnabled>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d113      	bne.n	8000f42 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f7ff ff3e 	bl	8000da0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000f24:	4b86      	ldr	r3, [pc, #536]	; (8001140 <HAL_ADC_Init+0x28c>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	099b      	lsrs	r3, r3, #6
 8000f2a:	4a86      	ldr	r2, [pc, #536]	; (8001144 <HAL_ADC_Init+0x290>)
 8000f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f30:	099b      	lsrs	r3, r3, #6
 8000f32:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000f34:	e002      	b.n	8000f3c <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8000f36:	68bb      	ldr	r3, [r7, #8]
 8000f38:	3b01      	subs	r3, #1
 8000f3a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d1f9      	bne.n	8000f36 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff ff3e 	bl	8000dc8 <LL_ADC_IsInternalRegulatorEnabled>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d10d      	bne.n	8000f6e <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f56:	f043 0210 	orr.w	r2, r3, #16
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f62:	f043 0201 	orr.w	r2, r3, #1
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff ff77 	bl	8000e66 <LL_ADC_REG_IsConversionOngoing>
 8000f78:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f7e:	f003 0310 	and.w	r3, r3, #16
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	f040 80cf 	bne.w	8001126 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	f040 80cb 	bne.w	8001126 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f94:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000f98:	f043 0202 	orr.w	r2, r3, #2
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff ff37 	bl	8000e18 <LL_ADC_IsEnabled>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d115      	bne.n	8000fdc <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000fb0:	4865      	ldr	r0, [pc, #404]	; (8001148 <HAL_ADC_Init+0x294>)
 8000fb2:	f7ff ff31 	bl	8000e18 <LL_ADC_IsEnabled>
 8000fb6:	4604      	mov	r4, r0
 8000fb8:	4864      	ldr	r0, [pc, #400]	; (800114c <HAL_ADC_Init+0x298>)
 8000fba:	f7ff ff2d 	bl	8000e18 <LL_ADC_IsEnabled>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	431c      	orrs	r4, r3
 8000fc2:	4863      	ldr	r0, [pc, #396]	; (8001150 <HAL_ADC_Init+0x29c>)
 8000fc4:	f7ff ff28 	bl	8000e18 <LL_ADC_IsEnabled>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	4323      	orrs	r3, r4
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d105      	bne.n	8000fdc <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	485f      	ldr	r0, [pc, #380]	; (8001154 <HAL_ADC_Init+0x2a0>)
 8000fd8:	f7ff fd88 	bl	8000aec <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	7e5b      	ldrb	r3, [r3, #25]
 8000fe0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000fe6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8000fec:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8000ff2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ffa:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001006:	2b01      	cmp	r3, #1
 8001008:	d106      	bne.n	8001018 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800100e:	3b01      	subs	r3, #1
 8001010:	045b      	lsls	r3, r3, #17
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	4313      	orrs	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800101c:	2b00      	cmp	r3, #0
 800101e:	d009      	beq.n	8001034 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001024:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800102c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	4313      	orrs	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	68da      	ldr	r2, [r3, #12]
 800103a:	4b47      	ldr	r3, [pc, #284]	; (8001158 <HAL_ADC_Init+0x2a4>)
 800103c:	4013      	ands	r3, r2
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	6812      	ldr	r2, [r2, #0]
 8001042:	69b9      	ldr	r1, [r7, #24]
 8001044:	430b      	orrs	r3, r1
 8001046:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff ff0a 	bl	8000e66 <LL_ADC_REG_IsConversionOngoing>
 8001052:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff ff17 	bl	8000e8c <LL_ADC_INJ_IsConversionOngoing>
 800105e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d13d      	bne.n	80010e2 <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d13a      	bne.n	80010e2 <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001070:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001078:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800107a:	4313      	orrs	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001088:	f023 0302 	bic.w	r3, r3, #2
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	6812      	ldr	r2, [r2, #0]
 8001090:	69b9      	ldr	r1, [r7, #24]
 8001092:	430b      	orrs	r3, r1
 8001094:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800109c:	2b01      	cmp	r3, #1
 800109e:	d118      	bne.n	80010d2 <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	691b      	ldr	r3, [r3, #16]
 80010a6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80010aa:	f023 0304 	bic.w	r3, r3, #4
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80010b2:	687a      	ldr	r2, [r7, #4]
 80010b4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80010b6:	4311      	orrs	r1, r2
 80010b8:	687a      	ldr	r2, [r7, #4]
 80010ba:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80010bc:	4311      	orrs	r1, r2
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80010c2:	430a      	orrs	r2, r1
 80010c4:	431a      	orrs	r2, r3
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f042 0201 	orr.w	r2, r2, #1
 80010ce:	611a      	str	r2, [r3, #16]
 80010d0:	e007      	b.n	80010e2 <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	691a      	ldr	r2, [r3, #16]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f022 0201 	bic.w	r2, r2, #1
 80010e0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	691b      	ldr	r3, [r3, #16]
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d10c      	bne.n	8001104 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f0:	f023 010f 	bic.w	r1, r3, #15
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	69db      	ldr	r3, [r3, #28]
 80010f8:	1e5a      	subs	r2, r3, #1
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	430a      	orrs	r2, r1
 8001100:	631a      	str	r2, [r3, #48]	; 0x30
 8001102:	e007      	b.n	8001114 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f022 020f 	bic.w	r2, r2, #15
 8001112:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001118:	f023 0303 	bic.w	r3, r3, #3
 800111c:	f043 0201 	orr.w	r2, r3, #1
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	655a      	str	r2, [r3, #84]	; 0x54
 8001124:	e007      	b.n	8001136 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800112a:	f043 0210 	orr.w	r2, r3, #16
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001136:	7ffb      	ldrb	r3, [r7, #31]
}
 8001138:	4618      	mov	r0, r3
 800113a:	3724      	adds	r7, #36	; 0x24
 800113c:	46bd      	mov	sp, r7
 800113e:	bd90      	pop	{r4, r7, pc}
 8001140:	20000008 	.word	0x20000008
 8001144:	053e2d63 	.word	0x053e2d63
 8001148:	50040000 	.word	0x50040000
 800114c:	50040100 	.word	0x50040100
 8001150:	50040200 	.word	0x50040200
 8001154:	50040300 	.word	0x50040300
 8001158:	fff0c007 	.word	0xfff0c007

0800115c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001164:	4857      	ldr	r0, [pc, #348]	; (80012c4 <HAL_ADC_Start+0x168>)
 8001166:	f7ff fdd9 	bl	8000d1c <LL_ADC_GetMultimode>
 800116a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff fe78 	bl	8000e66 <LL_ADC_REG_IsConversionOngoing>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	f040 809c 	bne.w	80012b6 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001184:	2b01      	cmp	r3, #1
 8001186:	d101      	bne.n	800118c <HAL_ADC_Start+0x30>
 8001188:	2302      	movs	r3, #2
 800118a:	e097      	b.n	80012bc <HAL_ADC_Start+0x160>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2201      	movs	r2, #1
 8001190:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	f000 fd67 	bl	8001c68 <ADC_Enable>
 800119a:	4603      	mov	r3, r0
 800119c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800119e:	7dfb      	ldrb	r3, [r7, #23]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	f040 8083 	bne.w	80012ac <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011aa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80011ae:	f023 0301 	bic.w	r3, r3, #1
 80011b2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a42      	ldr	r2, [pc, #264]	; (80012c8 <HAL_ADC_Start+0x16c>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d002      	beq.n	80011ca <HAL_ADC_Start+0x6e>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	e000      	b.n	80011cc <HAL_ADC_Start+0x70>
 80011ca:	4b40      	ldr	r3, [pc, #256]	; (80012cc <HAL_ADC_Start+0x170>)
 80011cc:	687a      	ldr	r2, [r7, #4]
 80011ce:	6812      	ldr	r2, [r2, #0]
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d002      	beq.n	80011da <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d105      	bne.n	80011e6 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011de:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011f2:	d106      	bne.n	8001202 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011f8:	f023 0206 	bic.w	r2, r3, #6
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	659a      	str	r2, [r3, #88]	; 0x58
 8001200:	e002      	b.n	8001208 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2200      	movs	r2, #0
 8001206:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	221c      	movs	r2, #28
 800120e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2200      	movs	r2, #0
 8001214:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a2a      	ldr	r2, [pc, #168]	; (80012c8 <HAL_ADC_Start+0x16c>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d002      	beq.n	8001228 <HAL_ADC_Start+0xcc>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	e000      	b.n	800122a <HAL_ADC_Start+0xce>
 8001228:	4b28      	ldr	r3, [pc, #160]	; (80012cc <HAL_ADC_Start+0x170>)
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	6812      	ldr	r2, [r2, #0]
 800122e:	4293      	cmp	r3, r2
 8001230:	d008      	beq.n	8001244 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d005      	beq.n	8001244 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	2b05      	cmp	r3, #5
 800123c:	d002      	beq.n	8001244 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	2b09      	cmp	r3, #9
 8001242:	d114      	bne.n	800126e <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	68db      	ldr	r3, [r3, #12]
 800124a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800124e:	2b00      	cmp	r3, #0
 8001250:	d007      	beq.n	8001262 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001256:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800125a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff fde9 	bl	8000e3e <LL_ADC_REG_StartConversion>
 800126c:	e025      	b.n	80012ba <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001272:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a12      	ldr	r2, [pc, #72]	; (80012c8 <HAL_ADC_Start+0x16c>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d002      	beq.n	800128a <HAL_ADC_Start+0x12e>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	e000      	b.n	800128c <HAL_ADC_Start+0x130>
 800128a:	4b10      	ldr	r3, [pc, #64]	; (80012cc <HAL_ADC_Start+0x170>)
 800128c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	68db      	ldr	r3, [r3, #12]
 8001292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d00f      	beq.n	80012ba <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800129e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80012a2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	655a      	str	r2, [r3, #84]	; 0x54
 80012aa:	e006      	b.n	80012ba <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2200      	movs	r2, #0
 80012b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80012b4:	e001      	b.n	80012ba <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80012b6:	2302      	movs	r3, #2
 80012b8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80012ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3718      	adds	r7, #24
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	50040300 	.word	0x50040300
 80012c8:	50040100 	.word	0x50040100
 80012cc:	50040000 	.word	0x50040000

080012d0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b088      	sub	sp, #32
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80012da:	4862      	ldr	r0, [pc, #392]	; (8001464 <HAL_ADC_PollForConversion+0x194>)
 80012dc:	f7ff fd1e 	bl	8000d1c <LL_ADC_GetMultimode>
 80012e0:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	695b      	ldr	r3, [r3, #20]
 80012e6:	2b08      	cmp	r3, #8
 80012e8:	d102      	bne.n	80012f0 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80012ea:	2308      	movs	r3, #8
 80012ec:	61fb      	str	r3, [r7, #28]
 80012ee:	e02a      	b.n	8001346 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d005      	beq.n	8001302 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	2b05      	cmp	r3, #5
 80012fa:	d002      	beq.n	8001302 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	2b09      	cmp	r3, #9
 8001300:	d111      	bne.n	8001326 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	f003 0301 	and.w	r3, r3, #1
 800130c:	2b00      	cmp	r3, #0
 800130e:	d007      	beq.n	8001320 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001314:	f043 0220 	orr.w	r2, r3, #32
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	e09d      	b.n	800145c <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001320:	2304      	movs	r3, #4
 8001322:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001324:	e00f      	b.n	8001346 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001326:	484f      	ldr	r0, [pc, #316]	; (8001464 <HAL_ADC_PollForConversion+0x194>)
 8001328:	f7ff fd06 	bl	8000d38 <LL_ADC_GetMultiDMATransfer>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d007      	beq.n	8001342 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001336:	f043 0220 	orr.w	r2, r3, #32
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e08c      	b.n	800145c <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001342:	2304      	movs	r3, #4
 8001344:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001346:	f7ff fbc5 	bl	8000ad4 <HAL_GetTick>
 800134a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800134c:	e01a      	b.n	8001384 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001354:	d016      	beq.n	8001384 <HAL_ADC_PollForConversion+0xb4>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001356:	f7ff fbbd 	bl	8000ad4 <HAL_GetTick>
 800135a:	4602      	mov	r2, r0
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	683a      	ldr	r2, [r7, #0]
 8001362:	429a      	cmp	r2, r3
 8001364:	d302      	bcc.n	800136c <HAL_ADC_PollForConversion+0x9c>
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d10b      	bne.n	8001384 <HAL_ADC_PollForConversion+0xb4>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001370:	f043 0204 	orr.w	r2, r3, #4
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2200      	movs	r2, #0
 800137c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001380:	2303      	movs	r3, #3
 8001382:	e06b      	b.n	800145c <HAL_ADC_PollForConversion+0x18c>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	4013      	ands	r3, r2
 800138e:	2b00      	cmp	r3, #0
 8001390:	d0dd      	beq.n	800134e <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001396:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff fc2b 	bl	8000bfe <LL_ADC_REG_IsTriggerSourceSWStart>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d01c      	beq.n	80013e8 <HAL_ADC_PollForConversion+0x118>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	7e5b      	ldrb	r3, [r3, #25]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d118      	bne.n	80013e8 <HAL_ADC_PollForConversion+0x118>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 0308 	and.w	r3, r3, #8
 80013c0:	2b08      	cmp	r3, #8
 80013c2:	d111      	bne.n	80013e8 <HAL_ADC_PollForConversion+0x118>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d105      	bne.n	80013e8 <HAL_ADC_PollForConversion+0x118>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013e0:	f043 0201 	orr.w	r2, r3, #1
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a1e      	ldr	r2, [pc, #120]	; (8001468 <HAL_ADC_PollForConversion+0x198>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d002      	beq.n	80013f8 <HAL_ADC_PollForConversion+0x128>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	e000      	b.n	80013fa <HAL_ADC_PollForConversion+0x12a>
 80013f8:	4b1c      	ldr	r3, [pc, #112]	; (800146c <HAL_ADC_PollForConversion+0x19c>)
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	6812      	ldr	r2, [r2, #0]
 80013fe:	4293      	cmp	r3, r2
 8001400:	d008      	beq.n	8001414 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d005      	beq.n	8001414 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	2b05      	cmp	r3, #5
 800140c:	d002      	beq.n	8001414 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	2b09      	cmp	r3, #9
 8001412:	d104      	bne.n	800141e <HAL_ADC_PollForConversion+0x14e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	68db      	ldr	r3, [r3, #12]
 800141a:	61bb      	str	r3, [r7, #24]
 800141c:	e00c      	b.n	8001438 <HAL_ADC_PollForConversion+0x168>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a11      	ldr	r2, [pc, #68]	; (8001468 <HAL_ADC_PollForConversion+0x198>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d002      	beq.n	800142e <HAL_ADC_PollForConversion+0x15e>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	e000      	b.n	8001430 <HAL_ADC_PollForConversion+0x160>
 800142e:	4b0f      	ldr	r3, [pc, #60]	; (800146c <HAL_ADC_PollForConversion+0x19c>)
 8001430:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	68db      	ldr	r3, [r3, #12]
 8001436:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	2b08      	cmp	r3, #8
 800143c:	d104      	bne.n	8001448 <HAL_ADC_PollForConversion+0x178>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	2208      	movs	r2, #8
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	e008      	b.n	800145a <HAL_ADC_PollForConversion+0x18a>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d103      	bne.n	800145a <HAL_ADC_PollForConversion+0x18a>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	220c      	movs	r2, #12
 8001458:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800145a:	2300      	movs	r3, #0
}
 800145c:	4618      	mov	r0, r3
 800145e:	3720      	adds	r7, #32
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	50040300 	.word	0x50040300
 8001468:	50040100 	.word	0x50040100
 800146c:	50040000 	.word	0x50040000

08001470 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800147e:	4618      	mov	r0, r3
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
	...

0800148c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b0b6      	sub	sp, #216	; 0xd8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001496:	2300      	movs	r3, #0
 8001498:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800149c:	2300      	movs	r3, #0
 800149e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d101      	bne.n	80014ae <HAL_ADC_ConfigChannel+0x22>
 80014aa:	2302      	movs	r3, #2
 80014ac:	e3c6      	b.n	8001c3c <HAL_ADC_ConfigChannel+0x7b0>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2201      	movs	r2, #1
 80014b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff fcd3 	bl	8000e66 <LL_ADC_REG_IsConversionOngoing>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	f040 83a7 	bne.w	8001c16 <HAL_ADC_ConfigChannel+0x78a>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	2b05      	cmp	r3, #5
 80014ce:	d824      	bhi.n	800151a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	3b02      	subs	r3, #2
 80014d6:	2b03      	cmp	r3, #3
 80014d8:	d81b      	bhi.n	8001512 <HAL_ADC_ConfigChannel+0x86>
 80014da:	a201      	add	r2, pc, #4	; (adr r2, 80014e0 <HAL_ADC_ConfigChannel+0x54>)
 80014dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014e0:	080014f1 	.word	0x080014f1
 80014e4:	080014f9 	.word	0x080014f9
 80014e8:	08001501 	.word	0x08001501
 80014ec:	08001509 	.word	0x08001509
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	220c      	movs	r2, #12
 80014f4:	605a      	str	r2, [r3, #4]
          break;
 80014f6:	e011      	b.n	800151c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	2212      	movs	r2, #18
 80014fc:	605a      	str	r2, [r3, #4]
          break;
 80014fe:	e00d      	b.n	800151c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	2218      	movs	r2, #24
 8001504:	605a      	str	r2, [r3, #4]
          break;
 8001506:	e009      	b.n	800151c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800150e:	605a      	str	r2, [r3, #4]
          break;
 8001510:	e004      	b.n	800151c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	2206      	movs	r2, #6
 8001516:	605a      	str	r2, [r3, #4]
          break;
 8001518:	e000      	b.n	800151c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800151a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6818      	ldr	r0, [r3, #0]
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	6859      	ldr	r1, [r3, #4]
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	461a      	mov	r2, r3
 800152a:	f7ff fb7b 	bl	8000c24 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4618      	mov	r0, r3
 8001534:	f7ff fc97 	bl	8000e66 <LL_ADC_REG_IsConversionOngoing>
 8001538:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff fca3 	bl	8000e8c <LL_ADC_INJ_IsConversionOngoing>
 8001546:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800154a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800154e:	2b00      	cmp	r3, #0
 8001550:	f040 81a6 	bne.w	80018a0 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001554:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001558:	2b00      	cmp	r3, #0
 800155a:	f040 81a1 	bne.w	80018a0 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6818      	ldr	r0, [r3, #0]
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	6819      	ldr	r1, [r3, #0]
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	461a      	mov	r2, r3
 800156c:	f7ff fb86 	bl	8000c7c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	695a      	ldr	r2, [r3, #20]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	68db      	ldr	r3, [r3, #12]
 800157a:	08db      	lsrs	r3, r3, #3
 800157c:	f003 0303 	and.w	r3, r3, #3
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	691b      	ldr	r3, [r3, #16]
 800158e:	2b04      	cmp	r3, #4
 8001590:	d00a      	beq.n	80015a8 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6818      	ldr	r0, [r3, #0]
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	6919      	ldr	r1, [r3, #16]
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80015a2:	f7ff fad7 	bl	8000b54 <LL_ADC_SetOffset>
 80015a6:	e17b      	b.n	80018a0 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2100      	movs	r1, #0
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff faf4 	bl	8000b9c <LL_ADC_GetOffsetChannel>
 80015b4:	4603      	mov	r3, r0
 80015b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d10a      	bne.n	80015d4 <HAL_ADC_ConfigChannel+0x148>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2100      	movs	r1, #0
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff fae9 	bl	8000b9c <LL_ADC_GetOffsetChannel>
 80015ca:	4603      	mov	r3, r0
 80015cc:	0e9b      	lsrs	r3, r3, #26
 80015ce:	f003 021f 	and.w	r2, r3, #31
 80015d2:	e01e      	b.n	8001612 <HAL_ADC_ConfigChannel+0x186>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2100      	movs	r1, #0
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff fade 	bl	8000b9c <LL_ADC_GetOffsetChannel>
 80015e0:	4603      	mov	r3, r0
 80015e2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015e6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80015ea:	fa93 f3a3 	rbit	r3, r3
 80015ee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80015f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80015f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80015fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d101      	bne.n	8001606 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001602:	2320      	movs	r3, #32
 8001604:	e004      	b.n	8001610 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001606:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800160a:	fab3 f383 	clz	r3, r3
 800160e:	b2db      	uxtb	r3, r3
 8001610:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800161a:	2b00      	cmp	r3, #0
 800161c:	d105      	bne.n	800162a <HAL_ADC_ConfigChannel+0x19e>
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	0e9b      	lsrs	r3, r3, #26
 8001624:	f003 031f 	and.w	r3, r3, #31
 8001628:	e018      	b.n	800165c <HAL_ADC_ConfigChannel+0x1d0>
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001632:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001636:	fa93 f3a3 	rbit	r3, r3
 800163a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800163e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001642:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001646:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800164a:	2b00      	cmp	r3, #0
 800164c:	d101      	bne.n	8001652 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800164e:	2320      	movs	r3, #32
 8001650:	e004      	b.n	800165c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001652:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001656:	fab3 f383 	clz	r3, r3
 800165a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800165c:	429a      	cmp	r2, r3
 800165e:	d106      	bne.n	800166e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2200      	movs	r2, #0
 8001666:	2100      	movs	r1, #0
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff faad 	bl	8000bc8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	2101      	movs	r1, #1
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff fa91 	bl	8000b9c <LL_ADC_GetOffsetChannel>
 800167a:	4603      	mov	r3, r0
 800167c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001680:	2b00      	cmp	r3, #0
 8001682:	d10a      	bne.n	800169a <HAL_ADC_ConfigChannel+0x20e>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2101      	movs	r1, #1
 800168a:	4618      	mov	r0, r3
 800168c:	f7ff fa86 	bl	8000b9c <LL_ADC_GetOffsetChannel>
 8001690:	4603      	mov	r3, r0
 8001692:	0e9b      	lsrs	r3, r3, #26
 8001694:	f003 021f 	and.w	r2, r3, #31
 8001698:	e01e      	b.n	80016d8 <HAL_ADC_ConfigChannel+0x24c>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	2101      	movs	r1, #1
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff fa7b 	bl	8000b9c <LL_ADC_GetOffsetChannel>
 80016a6:	4603      	mov	r3, r0
 80016a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80016b0:	fa93 f3a3 	rbit	r3, r3
 80016b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80016b8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80016bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80016c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d101      	bne.n	80016cc <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80016c8:	2320      	movs	r3, #32
 80016ca:	e004      	b.n	80016d6 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80016cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80016d0:	fab3 f383 	clz	r3, r3
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d105      	bne.n	80016f0 <HAL_ADC_ConfigChannel+0x264>
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	0e9b      	lsrs	r3, r3, #26
 80016ea:	f003 031f 	and.w	r3, r3, #31
 80016ee:	e018      	b.n	8001722 <HAL_ADC_ConfigChannel+0x296>
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80016fc:	fa93 f3a3 	rbit	r3, r3
 8001700:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001704:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001708:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800170c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001710:	2b00      	cmp	r3, #0
 8001712:	d101      	bne.n	8001718 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001714:	2320      	movs	r3, #32
 8001716:	e004      	b.n	8001722 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001718:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800171c:	fab3 f383 	clz	r3, r3
 8001720:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001722:	429a      	cmp	r2, r3
 8001724:	d106      	bne.n	8001734 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	2200      	movs	r2, #0
 800172c:	2101      	movs	r1, #1
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff fa4a 	bl	8000bc8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2102      	movs	r1, #2
 800173a:	4618      	mov	r0, r3
 800173c:	f7ff fa2e 	bl	8000b9c <LL_ADC_GetOffsetChannel>
 8001740:	4603      	mov	r3, r0
 8001742:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001746:	2b00      	cmp	r3, #0
 8001748:	d10a      	bne.n	8001760 <HAL_ADC_ConfigChannel+0x2d4>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	2102      	movs	r1, #2
 8001750:	4618      	mov	r0, r3
 8001752:	f7ff fa23 	bl	8000b9c <LL_ADC_GetOffsetChannel>
 8001756:	4603      	mov	r3, r0
 8001758:	0e9b      	lsrs	r3, r3, #26
 800175a:	f003 021f 	and.w	r2, r3, #31
 800175e:	e01e      	b.n	800179e <HAL_ADC_ConfigChannel+0x312>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2102      	movs	r1, #2
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff fa18 	bl	8000b9c <LL_ADC_GetOffsetChannel>
 800176c:	4603      	mov	r3, r0
 800176e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001772:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001776:	fa93 f3a3 	rbit	r3, r3
 800177a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800177e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001782:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001786:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800178a:	2b00      	cmp	r3, #0
 800178c:	d101      	bne.n	8001792 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800178e:	2320      	movs	r3, #32
 8001790:	e004      	b.n	800179c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001792:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001796:	fab3 f383 	clz	r3, r3
 800179a:	b2db      	uxtb	r3, r3
 800179c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d105      	bne.n	80017b6 <HAL_ADC_ConfigChannel+0x32a>
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	0e9b      	lsrs	r3, r3, #26
 80017b0:	f003 031f 	and.w	r3, r3, #31
 80017b4:	e016      	b.n	80017e4 <HAL_ADC_ConfigChannel+0x358>
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017be:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80017c2:	fa93 f3a3 	rbit	r3, r3
 80017c6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80017c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80017ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80017ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d101      	bne.n	80017da <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80017d6:	2320      	movs	r3, #32
 80017d8:	e004      	b.n	80017e4 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80017da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80017de:	fab3 f383 	clz	r3, r3
 80017e2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d106      	bne.n	80017f6 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2200      	movs	r2, #0
 80017ee:	2102      	movs	r1, #2
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff f9e9 	bl	8000bc8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2103      	movs	r1, #3
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff f9cd 	bl	8000b9c <LL_ADC_GetOffsetChannel>
 8001802:	4603      	mov	r3, r0
 8001804:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001808:	2b00      	cmp	r3, #0
 800180a:	d10a      	bne.n	8001822 <HAL_ADC_ConfigChannel+0x396>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2103      	movs	r1, #3
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff f9c2 	bl	8000b9c <LL_ADC_GetOffsetChannel>
 8001818:	4603      	mov	r3, r0
 800181a:	0e9b      	lsrs	r3, r3, #26
 800181c:	f003 021f 	and.w	r2, r3, #31
 8001820:	e017      	b.n	8001852 <HAL_ADC_ConfigChannel+0x3c6>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2103      	movs	r1, #3
 8001828:	4618      	mov	r0, r3
 800182a:	f7ff f9b7 	bl	8000b9c <LL_ADC_GetOffsetChannel>
 800182e:	4603      	mov	r3, r0
 8001830:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001832:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001834:	fa93 f3a3 	rbit	r3, r3
 8001838:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800183a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800183c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800183e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001840:	2b00      	cmp	r3, #0
 8001842:	d101      	bne.n	8001848 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001844:	2320      	movs	r3, #32
 8001846:	e003      	b.n	8001850 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001848:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800184a:	fab3 f383 	clz	r3, r3
 800184e:	b2db      	uxtb	r3, r3
 8001850:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800185a:	2b00      	cmp	r3, #0
 800185c:	d105      	bne.n	800186a <HAL_ADC_ConfigChannel+0x3de>
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	0e9b      	lsrs	r3, r3, #26
 8001864:	f003 031f 	and.w	r3, r3, #31
 8001868:	e011      	b.n	800188e <HAL_ADC_ConfigChannel+0x402>
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001870:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001872:	fa93 f3a3 	rbit	r3, r3
 8001876:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001878:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800187a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800187c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800187e:	2b00      	cmp	r3, #0
 8001880:	d101      	bne.n	8001886 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001882:	2320      	movs	r3, #32
 8001884:	e003      	b.n	800188e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8001886:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001888:	fab3 f383 	clz	r3, r3
 800188c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800188e:	429a      	cmp	r2, r3
 8001890:	d106      	bne.n	80018a0 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2200      	movs	r2, #0
 8001898:	2103      	movs	r1, #3
 800189a:	4618      	mov	r0, r3
 800189c:	f7ff f994 	bl	8000bc8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff fab7 	bl	8000e18 <LL_ADC_IsEnabled>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	f040 813f 	bne.w	8001b30 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6818      	ldr	r0, [r3, #0]
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	6819      	ldr	r1, [r3, #0]
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	461a      	mov	r2, r3
 80018c0:	f7ff fa08 	bl	8000cd4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	4a8e      	ldr	r2, [pc, #568]	; (8001b04 <HAL_ADC_ConfigChannel+0x678>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	f040 8130 	bne.w	8001b30 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d10b      	bne.n	80018f8 <HAL_ADC_ConfigChannel+0x46c>
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	0e9b      	lsrs	r3, r3, #26
 80018e6:	3301      	adds	r3, #1
 80018e8:	f003 031f 	and.w	r3, r3, #31
 80018ec:	2b09      	cmp	r3, #9
 80018ee:	bf94      	ite	ls
 80018f0:	2301      	movls	r3, #1
 80018f2:	2300      	movhi	r3, #0
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	e019      	b.n	800192c <HAL_ADC_ConfigChannel+0x4a0>
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001900:	fa93 f3a3 	rbit	r3, r3
 8001904:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001906:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001908:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800190a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800190c:	2b00      	cmp	r3, #0
 800190e:	d101      	bne.n	8001914 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001910:	2320      	movs	r3, #32
 8001912:	e003      	b.n	800191c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001914:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001916:	fab3 f383 	clz	r3, r3
 800191a:	b2db      	uxtb	r3, r3
 800191c:	3301      	adds	r3, #1
 800191e:	f003 031f 	and.w	r3, r3, #31
 8001922:	2b09      	cmp	r3, #9
 8001924:	bf94      	ite	ls
 8001926:	2301      	movls	r3, #1
 8001928:	2300      	movhi	r3, #0
 800192a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800192c:	2b00      	cmp	r3, #0
 800192e:	d079      	beq.n	8001a24 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001938:	2b00      	cmp	r3, #0
 800193a:	d107      	bne.n	800194c <HAL_ADC_ConfigChannel+0x4c0>
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	0e9b      	lsrs	r3, r3, #26
 8001942:	3301      	adds	r3, #1
 8001944:	069b      	lsls	r3, r3, #26
 8001946:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800194a:	e015      	b.n	8001978 <HAL_ADC_ConfigChannel+0x4ec>
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001952:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001954:	fa93 f3a3 	rbit	r3, r3
 8001958:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800195a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800195c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800195e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001960:	2b00      	cmp	r3, #0
 8001962:	d101      	bne.n	8001968 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001964:	2320      	movs	r3, #32
 8001966:	e003      	b.n	8001970 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001968:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800196a:	fab3 f383 	clz	r3, r3
 800196e:	b2db      	uxtb	r3, r3
 8001970:	3301      	adds	r3, #1
 8001972:	069b      	lsls	r3, r3, #26
 8001974:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001980:	2b00      	cmp	r3, #0
 8001982:	d109      	bne.n	8001998 <HAL_ADC_ConfigChannel+0x50c>
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	0e9b      	lsrs	r3, r3, #26
 800198a:	3301      	adds	r3, #1
 800198c:	f003 031f 	and.w	r3, r3, #31
 8001990:	2101      	movs	r1, #1
 8001992:	fa01 f303 	lsl.w	r3, r1, r3
 8001996:	e017      	b.n	80019c8 <HAL_ADC_ConfigChannel+0x53c>
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800199e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019a0:	fa93 f3a3 	rbit	r3, r3
 80019a4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80019a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019a8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80019aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d101      	bne.n	80019b4 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80019b0:	2320      	movs	r3, #32
 80019b2:	e003      	b.n	80019bc <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80019b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80019b6:	fab3 f383 	clz	r3, r3
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	3301      	adds	r3, #1
 80019be:	f003 031f 	and.w	r3, r3, #31
 80019c2:	2101      	movs	r1, #1
 80019c4:	fa01 f303 	lsl.w	r3, r1, r3
 80019c8:	ea42 0103 	orr.w	r1, r2, r3
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d10a      	bne.n	80019ee <HAL_ADC_ConfigChannel+0x562>
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	0e9b      	lsrs	r3, r3, #26
 80019de:	3301      	adds	r3, #1
 80019e0:	f003 021f 	and.w	r2, r3, #31
 80019e4:	4613      	mov	r3, r2
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	4413      	add	r3, r2
 80019ea:	051b      	lsls	r3, r3, #20
 80019ec:	e018      	b.n	8001a20 <HAL_ADC_ConfigChannel+0x594>
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019f6:	fa93 f3a3 	rbit	r3, r3
 80019fa:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80019fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001a00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d101      	bne.n	8001a0a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001a06:	2320      	movs	r3, #32
 8001a08:	e003      	b.n	8001a12 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001a0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a0c:	fab3 f383 	clz	r3, r3
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	3301      	adds	r3, #1
 8001a14:	f003 021f 	and.w	r2, r3, #31
 8001a18:	4613      	mov	r3, r2
 8001a1a:	005b      	lsls	r3, r3, #1
 8001a1c:	4413      	add	r3, r2
 8001a1e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a20:	430b      	orrs	r3, r1
 8001a22:	e080      	b.n	8001b26 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d107      	bne.n	8001a40 <HAL_ADC_ConfigChannel+0x5b4>
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	0e9b      	lsrs	r3, r3, #26
 8001a36:	3301      	adds	r3, #1
 8001a38:	069b      	lsls	r3, r3, #26
 8001a3a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a3e:	e015      	b.n	8001a6c <HAL_ADC_ConfigChannel+0x5e0>
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a48:	fa93 f3a3 	rbit	r3, r3
 8001a4c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a50:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d101      	bne.n	8001a5c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001a58:	2320      	movs	r3, #32
 8001a5a:	e003      	b.n	8001a64 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a5e:	fab3 f383 	clz	r3, r3
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	3301      	adds	r3, #1
 8001a66:	069b      	lsls	r3, r3, #26
 8001a68:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d109      	bne.n	8001a8c <HAL_ADC_ConfigChannel+0x600>
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	0e9b      	lsrs	r3, r3, #26
 8001a7e:	3301      	adds	r3, #1
 8001a80:	f003 031f 	and.w	r3, r3, #31
 8001a84:	2101      	movs	r1, #1
 8001a86:	fa01 f303 	lsl.w	r3, r1, r3
 8001a8a:	e017      	b.n	8001abc <HAL_ADC_ConfigChannel+0x630>
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a92:	6a3b      	ldr	r3, [r7, #32]
 8001a94:	fa93 f3a3 	rbit	r3, r3
 8001a98:	61fb      	str	r3, [r7, #28]
  return result;
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d101      	bne.n	8001aa8 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001aa4:	2320      	movs	r3, #32
 8001aa6:	e003      	b.n	8001ab0 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aaa:	fab3 f383 	clz	r3, r3
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	f003 031f 	and.w	r3, r3, #31
 8001ab6:	2101      	movs	r1, #1
 8001ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8001abc:	ea42 0103 	orr.w	r1, r2, r3
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d10d      	bne.n	8001ae8 <HAL_ADC_ConfigChannel+0x65c>
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	0e9b      	lsrs	r3, r3, #26
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	f003 021f 	and.w	r2, r3, #31
 8001ad8:	4613      	mov	r3, r2
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	4413      	add	r3, r2
 8001ade:	3b1e      	subs	r3, #30
 8001ae0:	051b      	lsls	r3, r3, #20
 8001ae2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ae6:	e01d      	b.n	8001b24 <HAL_ADC_ConfigChannel+0x698>
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	fa93 f3a3 	rbit	r3, r3
 8001af4:	613b      	str	r3, [r7, #16]
  return result;
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d103      	bne.n	8001b08 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001b00:	2320      	movs	r3, #32
 8001b02:	e005      	b.n	8001b10 <HAL_ADC_ConfigChannel+0x684>
 8001b04:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	fab3 f383 	clz	r3, r3
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	3301      	adds	r3, #1
 8001b12:	f003 021f 	and.w	r2, r3, #31
 8001b16:	4613      	mov	r3, r2
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	4413      	add	r3, r2
 8001b1c:	3b1e      	subs	r3, #30
 8001b1e:	051b      	lsls	r3, r3, #20
 8001b20:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b24:	430b      	orrs	r3, r1
 8001b26:	683a      	ldr	r2, [r7, #0]
 8001b28:	6892      	ldr	r2, [r2, #8]
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	f7ff f8a6 	bl	8000c7c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	4b43      	ldr	r3, [pc, #268]	; (8001c44 <HAL_ADC_ConfigChannel+0x7b8>)
 8001b36:	4013      	ands	r3, r2
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d079      	beq.n	8001c30 <HAL_ADC_ConfigChannel+0x7a4>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b3c:	4842      	ldr	r0, [pc, #264]	; (8001c48 <HAL_ADC_ConfigChannel+0x7bc>)
 8001b3e:	f7fe fffb 	bl	8000b38 <LL_ADC_GetCommonPathInternalCh>
 8001b42:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a40      	ldr	r2, [pc, #256]	; (8001c4c <HAL_ADC_ConfigChannel+0x7c0>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d12b      	bne.n	8001ba8 <HAL_ADC_ConfigChannel+0x71c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001b50:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001b54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d125      	bne.n	8001ba8 <HAL_ADC_ConfigChannel+0x71c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a3b      	ldr	r2, [pc, #236]	; (8001c50 <HAL_ADC_ConfigChannel+0x7c4>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d004      	beq.n	8001b70 <HAL_ADC_ConfigChannel+0x6e4>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a3a      	ldr	r2, [pc, #232]	; (8001c54 <HAL_ADC_ConfigChannel+0x7c8>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d15c      	bne.n	8001c2a <HAL_ADC_ConfigChannel+0x79e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b70:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001b74:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4833      	ldr	r0, [pc, #204]	; (8001c48 <HAL_ADC_ConfigChannel+0x7bc>)
 8001b7c:	f7fe ffc9 	bl	8000b12 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001b80:	4b35      	ldr	r3, [pc, #212]	; (8001c58 <HAL_ADC_ConfigChannel+0x7cc>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	099b      	lsrs	r3, r3, #6
 8001b86:	4a35      	ldr	r2, [pc, #212]	; (8001c5c <HAL_ADC_ConfigChannel+0x7d0>)
 8001b88:	fba2 2303 	umull	r2, r3, r2, r3
 8001b8c:	099a      	lsrs	r2, r3, #6
 8001b8e:	4613      	mov	r3, r2
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	4413      	add	r3, r2
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001b98:	e002      	b.n	8001ba0 <HAL_ADC_ConfigChannel+0x714>
          {
            wait_loop_index--;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	3b01      	subs	r3, #1
 8001b9e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d1f9      	bne.n	8001b9a <HAL_ADC_ConfigChannel+0x70e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ba6:	e040      	b.n	8001c2a <HAL_ADC_ConfigChannel+0x79e>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a2c      	ldr	r2, [pc, #176]	; (8001c60 <HAL_ADC_ConfigChannel+0x7d4>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d118      	bne.n	8001be4 <HAL_ADC_ConfigChannel+0x758>
 8001bb2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001bb6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d112      	bne.n	8001be4 <HAL_ADC_ConfigChannel+0x758>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a23      	ldr	r2, [pc, #140]	; (8001c50 <HAL_ADC_ConfigChannel+0x7c4>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d004      	beq.n	8001bd2 <HAL_ADC_ConfigChannel+0x746>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a21      	ldr	r2, [pc, #132]	; (8001c54 <HAL_ADC_ConfigChannel+0x7c8>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d12d      	bne.n	8001c2e <HAL_ADC_ConfigChannel+0x7a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001bd2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001bd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bda:	4619      	mov	r1, r3
 8001bdc:	481a      	ldr	r0, [pc, #104]	; (8001c48 <HAL_ADC_ConfigChannel+0x7bc>)
 8001bde:	f7fe ff98 	bl	8000b12 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001be2:	e024      	b.n	8001c2e <HAL_ADC_ConfigChannel+0x7a2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a1e      	ldr	r2, [pc, #120]	; (8001c64 <HAL_ADC_ConfigChannel+0x7d8>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d120      	bne.n	8001c30 <HAL_ADC_ConfigChannel+0x7a4>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001bee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001bf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d11a      	bne.n	8001c30 <HAL_ADC_ConfigChannel+0x7a4>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a14      	ldr	r2, [pc, #80]	; (8001c50 <HAL_ADC_ConfigChannel+0x7c4>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d115      	bne.n	8001c30 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c04:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c08:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	480e      	ldr	r0, [pc, #56]	; (8001c48 <HAL_ADC_ConfigChannel+0x7bc>)
 8001c10:	f7fe ff7f 	bl	8000b12 <LL_ADC_SetCommonPathInternalCh>
 8001c14:	e00c      	b.n	8001c30 <HAL_ADC_ConfigChannel+0x7a4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c1a:	f043 0220 	orr.w	r2, r3, #32
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001c28:	e002      	b.n	8001c30 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001c2a:	bf00      	nop
 8001c2c:	e000      	b.n	8001c30 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001c2e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001c38:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	37d8      	adds	r7, #216	; 0xd8
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	80080000 	.word	0x80080000
 8001c48:	50040300 	.word	0x50040300
 8001c4c:	c7520000 	.word	0xc7520000
 8001c50:	50040000 	.word	0x50040000
 8001c54:	50040200 	.word	0x50040200
 8001c58:	20000008 	.word	0x20000008
 8001c5c:	053e2d63 	.word	0x053e2d63
 8001c60:	cb840000 	.word	0xcb840000
 8001c64:	80000001 	.word	0x80000001

08001c68 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7ff f8cf 	bl	8000e18 <LL_ADC_IsEnabled>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d146      	bne.n	8001d0e <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	689a      	ldr	r2, [r3, #8]
 8001c86:	4b24      	ldr	r3, [pc, #144]	; (8001d18 <ADC_Enable+0xb0>)
 8001c88:	4013      	ands	r3, r2
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d00d      	beq.n	8001caa <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c92:	f043 0210 	orr.w	r2, r3, #16
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c9e:	f043 0201 	orr.w	r2, r3, #1
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e032      	b.n	8001d10 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7ff f89e 	bl	8000df0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001cb4:	f7fe ff0e 	bl	8000ad4 <HAL_GetTick>
 8001cb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001cba:	e021      	b.n	8001d00 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff f8a9 	bl	8000e18 <LL_ADC_IsEnabled>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d104      	bne.n	8001cd6 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff f88d 	bl	8000df0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001cd6:	f7fe fefd 	bl	8000ad4 <HAL_GetTick>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d90d      	bls.n	8001d00 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ce8:	f043 0210 	orr.w	r2, r3, #16
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf4:	f043 0201 	orr.w	r2, r3, #1
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e007      	b.n	8001d10 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d1d6      	bne.n	8001cbc <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001d0e:	2300      	movs	r3, #0
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3710      	adds	r7, #16
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	8000003f 	.word	0x8000003f

08001d1c <LL_ADC_IsEnabled>:
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	f003 0301 	and.w	r3, r3, #1
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d101      	bne.n	8001d34 <LL_ADC_IsEnabled+0x18>
 8001d30:	2301      	movs	r3, #1
 8001d32:	e000      	b.n	8001d36 <LL_ADC_IsEnabled+0x1a>
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr

08001d42 <LL_ADC_REG_IsConversionOngoing>:
{
 8001d42:	b480      	push	{r7}
 8001d44:	b083      	sub	sp, #12
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f003 0304 	and.w	r3, r3, #4
 8001d52:	2b04      	cmp	r3, #4
 8001d54:	d101      	bne.n	8001d5a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d56:	2301      	movs	r3, #1
 8001d58:	e000      	b.n	8001d5c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d5a:	2300      	movs	r3, #0
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001d68:	b590      	push	{r4, r7, lr}
 8001d6a:	b09f      	sub	sp, #124	; 0x7c
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d72:	2300      	movs	r3, #0
 8001d74:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d101      	bne.n	8001d86 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001d82:	2302      	movs	r3, #2
 8001d84:	e08f      	b.n	8001ea6 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2201      	movs	r2, #1
 8001d8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a47      	ldr	r2, [pc, #284]	; (8001eb0 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d102      	bne.n	8001d9e <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8001d98:	4b46      	ldr	r3, [pc, #280]	; (8001eb4 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8001d9a:	60bb      	str	r3, [r7, #8]
 8001d9c:	e001      	b.n	8001da2 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8001d9e:	2300      	movs	r3, #0
 8001da0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d10b      	bne.n	8001dc0 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dac:	f043 0220 	orr.w	r2, r3, #32
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e072      	b.n	8001ea6 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7ff ffbd 	bl	8001d42 <LL_ADC_REG_IsConversionOngoing>
 8001dc8:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7ff ffb7 	bl	8001d42 <LL_ADC_REG_IsConversionOngoing>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d154      	bne.n	8001e84 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001dda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d151      	bne.n	8001e84 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001de0:	4b35      	ldr	r3, [pc, #212]	; (8001eb8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001de2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d02c      	beq.n	8001e46 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001dec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	6859      	ldr	r1, [r3, #4]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001dfe:	035b      	lsls	r3, r3, #13
 8001e00:	430b      	orrs	r3, r1
 8001e02:	431a      	orrs	r2, r3
 8001e04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e06:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e08:	4829      	ldr	r0, [pc, #164]	; (8001eb0 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8001e0a:	f7ff ff87 	bl	8001d1c <LL_ADC_IsEnabled>
 8001e0e:	4604      	mov	r4, r0
 8001e10:	4828      	ldr	r0, [pc, #160]	; (8001eb4 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8001e12:	f7ff ff83 	bl	8001d1c <LL_ADC_IsEnabled>
 8001e16:	4603      	mov	r3, r0
 8001e18:	431c      	orrs	r4, r3
 8001e1a:	4828      	ldr	r0, [pc, #160]	; (8001ebc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001e1c:	f7ff ff7e 	bl	8001d1c <LL_ADC_IsEnabled>
 8001e20:	4603      	mov	r3, r0
 8001e22:	4323      	orrs	r3, r4
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d137      	bne.n	8001e98 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001e28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001e30:	f023 030f 	bic.w	r3, r3, #15
 8001e34:	683a      	ldr	r2, [r7, #0]
 8001e36:	6811      	ldr	r1, [r2, #0]
 8001e38:	683a      	ldr	r2, [r7, #0]
 8001e3a:	6892      	ldr	r2, [r2, #8]
 8001e3c:	430a      	orrs	r2, r1
 8001e3e:	431a      	orrs	r2, r3
 8001e40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e42:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e44:	e028      	b.n	8001e98 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001e46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e50:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e52:	4817      	ldr	r0, [pc, #92]	; (8001eb0 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8001e54:	f7ff ff62 	bl	8001d1c <LL_ADC_IsEnabled>
 8001e58:	4604      	mov	r4, r0
 8001e5a:	4816      	ldr	r0, [pc, #88]	; (8001eb4 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8001e5c:	f7ff ff5e 	bl	8001d1c <LL_ADC_IsEnabled>
 8001e60:	4603      	mov	r3, r0
 8001e62:	431c      	orrs	r4, r3
 8001e64:	4815      	ldr	r0, [pc, #84]	; (8001ebc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001e66:	f7ff ff59 	bl	8001d1c <LL_ADC_IsEnabled>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	4323      	orrs	r3, r4
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d112      	bne.n	8001e98 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001e72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001e7a:	f023 030f 	bic.w	r3, r3, #15
 8001e7e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001e80:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e82:	e009      	b.n	8001e98 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e88:	f043 0220 	orr.w	r2, r3, #32
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8001e96:	e000      	b.n	8001e9a <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e98:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001ea2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	377c      	adds	r7, #124	; 0x7c
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd90      	pop	{r4, r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	50040000 	.word	0x50040000
 8001eb4:	50040100 	.word	0x50040100
 8001eb8:	50040300 	.word	0x50040300
 8001ebc:	50040200 	.word	0x50040200

08001ec0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f003 0307 	and.w	r3, r3, #7
 8001ece:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ed0:	4b0c      	ldr	r3, [pc, #48]	; (8001f04 <__NVIC_SetPriorityGrouping+0x44>)
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ed6:	68ba      	ldr	r2, [r7, #8]
 8001ed8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001edc:	4013      	ands	r3, r2
 8001ede:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ee8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001eec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ef0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ef2:	4a04      	ldr	r2, [pc, #16]	; (8001f04 <__NVIC_SetPriorityGrouping+0x44>)
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	60d3      	str	r3, [r2, #12]
}
 8001ef8:	bf00      	nop
 8001efa:	3714      	adds	r7, #20
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr
 8001f04:	e000ed00 	.word	0xe000ed00

08001f08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f0c:	4b04      	ldr	r3, [pc, #16]	; (8001f20 <__NVIC_GetPriorityGrouping+0x18>)
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	0a1b      	lsrs	r3, r3, #8
 8001f12:	f003 0307 	and.w	r3, r3, #7
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr
 8001f20:	e000ed00 	.word	0xe000ed00

08001f24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	6039      	str	r1, [r7, #0]
 8001f2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	db0a      	blt.n	8001f4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	b2da      	uxtb	r2, r3
 8001f3c:	490c      	ldr	r1, [pc, #48]	; (8001f70 <__NVIC_SetPriority+0x4c>)
 8001f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f42:	0112      	lsls	r2, r2, #4
 8001f44:	b2d2      	uxtb	r2, r2
 8001f46:	440b      	add	r3, r1
 8001f48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f4c:	e00a      	b.n	8001f64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	b2da      	uxtb	r2, r3
 8001f52:	4908      	ldr	r1, [pc, #32]	; (8001f74 <__NVIC_SetPriority+0x50>)
 8001f54:	79fb      	ldrb	r3, [r7, #7]
 8001f56:	f003 030f 	and.w	r3, r3, #15
 8001f5a:	3b04      	subs	r3, #4
 8001f5c:	0112      	lsls	r2, r2, #4
 8001f5e:	b2d2      	uxtb	r2, r2
 8001f60:	440b      	add	r3, r1
 8001f62:	761a      	strb	r2, [r3, #24]
}
 8001f64:	bf00      	nop
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr
 8001f70:	e000e100 	.word	0xe000e100
 8001f74:	e000ed00 	.word	0xe000ed00

08001f78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b089      	sub	sp, #36	; 0x24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f003 0307 	and.w	r3, r3, #7
 8001f8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	f1c3 0307 	rsb	r3, r3, #7
 8001f92:	2b04      	cmp	r3, #4
 8001f94:	bf28      	it	cs
 8001f96:	2304      	movcs	r3, #4
 8001f98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	3304      	adds	r3, #4
 8001f9e:	2b06      	cmp	r3, #6
 8001fa0:	d902      	bls.n	8001fa8 <NVIC_EncodePriority+0x30>
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	3b03      	subs	r3, #3
 8001fa6:	e000      	b.n	8001faa <NVIC_EncodePriority+0x32>
 8001fa8:	2300      	movs	r3, #0
 8001faa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fac:	f04f 32ff 	mov.w	r2, #4294967295
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb6:	43da      	mvns	r2, r3
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	401a      	ands	r2, r3
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fc0:	f04f 31ff 	mov.w	r1, #4294967295
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fca:	43d9      	mvns	r1, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd0:	4313      	orrs	r3, r2
         );
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3724      	adds	r7, #36	; 0x24
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
	...

08001fe0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	3b01      	subs	r3, #1
 8001fec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ff0:	d301      	bcc.n	8001ff6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e00f      	b.n	8002016 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ff6:	4a0a      	ldr	r2, [pc, #40]	; (8002020 <SysTick_Config+0x40>)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ffe:	210f      	movs	r1, #15
 8002000:	f04f 30ff 	mov.w	r0, #4294967295
 8002004:	f7ff ff8e 	bl	8001f24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002008:	4b05      	ldr	r3, [pc, #20]	; (8002020 <SysTick_Config+0x40>)
 800200a:	2200      	movs	r2, #0
 800200c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800200e:	4b04      	ldr	r3, [pc, #16]	; (8002020 <SysTick_Config+0x40>)
 8002010:	2207      	movs	r2, #7
 8002012:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	e000e010 	.word	0xe000e010

08002024 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f7ff ff47 	bl	8001ec0 <__NVIC_SetPriorityGrouping>
}
 8002032:	bf00      	nop
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}

0800203a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800203a:	b580      	push	{r7, lr}
 800203c:	b086      	sub	sp, #24
 800203e:	af00      	add	r7, sp, #0
 8002040:	4603      	mov	r3, r0
 8002042:	60b9      	str	r1, [r7, #8]
 8002044:	607a      	str	r2, [r7, #4]
 8002046:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002048:	2300      	movs	r3, #0
 800204a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800204c:	f7ff ff5c 	bl	8001f08 <__NVIC_GetPriorityGrouping>
 8002050:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	68b9      	ldr	r1, [r7, #8]
 8002056:	6978      	ldr	r0, [r7, #20]
 8002058:	f7ff ff8e 	bl	8001f78 <NVIC_EncodePriority>
 800205c:	4602      	mov	r2, r0
 800205e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002062:	4611      	mov	r1, r2
 8002064:	4618      	mov	r0, r3
 8002066:	f7ff ff5d 	bl	8001f24 <__NVIC_SetPriority>
}
 800206a:	bf00      	nop
 800206c:	3718      	adds	r7, #24
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002072:	b580      	push	{r7, lr}
 8002074:	b082      	sub	sp, #8
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f7ff ffb0 	bl	8001fe0 <SysTick_Config>
 8002080:	4603      	mov	r3, r0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
	...

0800208c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002090:	4b04      	ldr	r3, [pc, #16]	; (80020a4 <HAL_PWREx_GetVoltageRange+0x18>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002098:	4618      	mov	r0, r3
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	40007000 	.word	0x40007000

080020a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b085      	sub	sp, #20
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020b6:	d130      	bne.n	800211a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80020b8:	4b23      	ldr	r3, [pc, #140]	; (8002148 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80020c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020c4:	d038      	beq.n	8002138 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80020c6:	4b20      	ldr	r3, [pc, #128]	; (8002148 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80020ce:	4a1e      	ldr	r2, [pc, #120]	; (8002148 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020d4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80020d6:	4b1d      	ldr	r3, [pc, #116]	; (800214c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2232      	movs	r2, #50	; 0x32
 80020dc:	fb02 f303 	mul.w	r3, r2, r3
 80020e0:	4a1b      	ldr	r2, [pc, #108]	; (8002150 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80020e2:	fba2 2303 	umull	r2, r3, r2, r3
 80020e6:	0c9b      	lsrs	r3, r3, #18
 80020e8:	3301      	adds	r3, #1
 80020ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020ec:	e002      	b.n	80020f4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	3b01      	subs	r3, #1
 80020f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020f4:	4b14      	ldr	r3, [pc, #80]	; (8002148 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020f6:	695b      	ldr	r3, [r3, #20]
 80020f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002100:	d102      	bne.n	8002108 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d1f2      	bne.n	80020ee <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002108:	4b0f      	ldr	r3, [pc, #60]	; (8002148 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800210a:	695b      	ldr	r3, [r3, #20]
 800210c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002110:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002114:	d110      	bne.n	8002138 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e00f      	b.n	800213a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800211a:	4b0b      	ldr	r3, [pc, #44]	; (8002148 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002122:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002126:	d007      	beq.n	8002138 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002128:	4b07      	ldr	r3, [pc, #28]	; (8002148 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002130:	4a05      	ldr	r2, [pc, #20]	; (8002148 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002132:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002136:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	3714      	adds	r7, #20
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	40007000 	.word	0x40007000
 800214c:	20000008 	.word	0x20000008
 8002150:	431bde83 	.word	0x431bde83

08002154 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b088      	sub	sp, #32
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d101      	bne.n	8002166 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e3d4      	b.n	8002910 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002166:	4ba1      	ldr	r3, [pc, #644]	; (80023ec <HAL_RCC_OscConfig+0x298>)
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f003 030c 	and.w	r3, r3, #12
 800216e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002170:	4b9e      	ldr	r3, [pc, #632]	; (80023ec <HAL_RCC_OscConfig+0x298>)
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	f003 0303 	and.w	r3, r3, #3
 8002178:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0310 	and.w	r3, r3, #16
 8002182:	2b00      	cmp	r3, #0
 8002184:	f000 80e4 	beq.w	8002350 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d007      	beq.n	800219e <HAL_RCC_OscConfig+0x4a>
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	2b0c      	cmp	r3, #12
 8002192:	f040 808b 	bne.w	80022ac <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	2b01      	cmp	r3, #1
 800219a:	f040 8087 	bne.w	80022ac <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800219e:	4b93      	ldr	r3, [pc, #588]	; (80023ec <HAL_RCC_OscConfig+0x298>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d005      	beq.n	80021b6 <HAL_RCC_OscConfig+0x62>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d101      	bne.n	80021b6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e3ac      	b.n	8002910 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a1a      	ldr	r2, [r3, #32]
 80021ba:	4b8c      	ldr	r3, [pc, #560]	; (80023ec <HAL_RCC_OscConfig+0x298>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0308 	and.w	r3, r3, #8
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d004      	beq.n	80021d0 <HAL_RCC_OscConfig+0x7c>
 80021c6:	4b89      	ldr	r3, [pc, #548]	; (80023ec <HAL_RCC_OscConfig+0x298>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021ce:	e005      	b.n	80021dc <HAL_RCC_OscConfig+0x88>
 80021d0:	4b86      	ldr	r3, [pc, #536]	; (80023ec <HAL_RCC_OscConfig+0x298>)
 80021d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021d6:	091b      	lsrs	r3, r3, #4
 80021d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021dc:	4293      	cmp	r3, r2
 80021de:	d223      	bcs.n	8002228 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6a1b      	ldr	r3, [r3, #32]
 80021e4:	4618      	mov	r0, r3
 80021e6:	f000 fd07 	bl	8002bf8 <RCC_SetFlashLatencyFromMSIRange>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d001      	beq.n	80021f4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e38d      	b.n	8002910 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021f4:	4b7d      	ldr	r3, [pc, #500]	; (80023ec <HAL_RCC_OscConfig+0x298>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a7c      	ldr	r2, [pc, #496]	; (80023ec <HAL_RCC_OscConfig+0x298>)
 80021fa:	f043 0308 	orr.w	r3, r3, #8
 80021fe:	6013      	str	r3, [r2, #0]
 8002200:	4b7a      	ldr	r3, [pc, #488]	; (80023ec <HAL_RCC_OscConfig+0x298>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a1b      	ldr	r3, [r3, #32]
 800220c:	4977      	ldr	r1, [pc, #476]	; (80023ec <HAL_RCC_OscConfig+0x298>)
 800220e:	4313      	orrs	r3, r2
 8002210:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002212:	4b76      	ldr	r3, [pc, #472]	; (80023ec <HAL_RCC_OscConfig+0x298>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	69db      	ldr	r3, [r3, #28]
 800221e:	021b      	lsls	r3, r3, #8
 8002220:	4972      	ldr	r1, [pc, #456]	; (80023ec <HAL_RCC_OscConfig+0x298>)
 8002222:	4313      	orrs	r3, r2
 8002224:	604b      	str	r3, [r1, #4]
 8002226:	e025      	b.n	8002274 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002228:	4b70      	ldr	r3, [pc, #448]	; (80023ec <HAL_RCC_OscConfig+0x298>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a6f      	ldr	r2, [pc, #444]	; (80023ec <HAL_RCC_OscConfig+0x298>)
 800222e:	f043 0308 	orr.w	r3, r3, #8
 8002232:	6013      	str	r3, [r2, #0]
 8002234:	4b6d      	ldr	r3, [pc, #436]	; (80023ec <HAL_RCC_OscConfig+0x298>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a1b      	ldr	r3, [r3, #32]
 8002240:	496a      	ldr	r1, [pc, #424]	; (80023ec <HAL_RCC_OscConfig+0x298>)
 8002242:	4313      	orrs	r3, r2
 8002244:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002246:	4b69      	ldr	r3, [pc, #420]	; (80023ec <HAL_RCC_OscConfig+0x298>)
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	69db      	ldr	r3, [r3, #28]
 8002252:	021b      	lsls	r3, r3, #8
 8002254:	4965      	ldr	r1, [pc, #404]	; (80023ec <HAL_RCC_OscConfig+0x298>)
 8002256:	4313      	orrs	r3, r2
 8002258:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d109      	bne.n	8002274 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a1b      	ldr	r3, [r3, #32]
 8002264:	4618      	mov	r0, r3
 8002266:	f000 fcc7 	bl	8002bf8 <RCC_SetFlashLatencyFromMSIRange>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e34d      	b.n	8002910 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002274:	f000 fc36 	bl	8002ae4 <HAL_RCC_GetSysClockFreq>
 8002278:	4601      	mov	r1, r0
 800227a:	4b5c      	ldr	r3, [pc, #368]	; (80023ec <HAL_RCC_OscConfig+0x298>)
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	091b      	lsrs	r3, r3, #4
 8002280:	f003 030f 	and.w	r3, r3, #15
 8002284:	4a5a      	ldr	r2, [pc, #360]	; (80023f0 <HAL_RCC_OscConfig+0x29c>)
 8002286:	5cd3      	ldrb	r3, [r2, r3]
 8002288:	f003 031f 	and.w	r3, r3, #31
 800228c:	fa21 f303 	lsr.w	r3, r1, r3
 8002290:	4a58      	ldr	r2, [pc, #352]	; (80023f4 <HAL_RCC_OscConfig+0x2a0>)
 8002292:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002294:	4b58      	ldr	r3, [pc, #352]	; (80023f8 <HAL_RCC_OscConfig+0x2a4>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4618      	mov	r0, r3
 800229a:	f7fe fbcb 	bl	8000a34 <HAL_InitTick>
 800229e:	4603      	mov	r3, r0
 80022a0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80022a2:	7bfb      	ldrb	r3, [r7, #15]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d052      	beq.n	800234e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80022a8:	7bfb      	ldrb	r3, [r7, #15]
 80022aa:	e331      	b.n	8002910 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	699b      	ldr	r3, [r3, #24]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d032      	beq.n	800231a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80022b4:	4b4d      	ldr	r3, [pc, #308]	; (80023ec <HAL_RCC_OscConfig+0x298>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a4c      	ldr	r2, [pc, #304]	; (80023ec <HAL_RCC_OscConfig+0x298>)
 80022ba:	f043 0301 	orr.w	r3, r3, #1
 80022be:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80022c0:	f7fe fc08 	bl	8000ad4 <HAL_GetTick>
 80022c4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022c6:	e008      	b.n	80022da <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022c8:	f7fe fc04 	bl	8000ad4 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e31a      	b.n	8002910 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022da:	4b44      	ldr	r3, [pc, #272]	; (80023ec <HAL_RCC_OscConfig+0x298>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d0f0      	beq.n	80022c8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022e6:	4b41      	ldr	r3, [pc, #260]	; (80023ec <HAL_RCC_OscConfig+0x298>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a40      	ldr	r2, [pc, #256]	; (80023ec <HAL_RCC_OscConfig+0x298>)
 80022ec:	f043 0308 	orr.w	r3, r3, #8
 80022f0:	6013      	str	r3, [r2, #0]
 80022f2:	4b3e      	ldr	r3, [pc, #248]	; (80023ec <HAL_RCC_OscConfig+0x298>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a1b      	ldr	r3, [r3, #32]
 80022fe:	493b      	ldr	r1, [pc, #236]	; (80023ec <HAL_RCC_OscConfig+0x298>)
 8002300:	4313      	orrs	r3, r2
 8002302:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002304:	4b39      	ldr	r3, [pc, #228]	; (80023ec <HAL_RCC_OscConfig+0x298>)
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	69db      	ldr	r3, [r3, #28]
 8002310:	021b      	lsls	r3, r3, #8
 8002312:	4936      	ldr	r1, [pc, #216]	; (80023ec <HAL_RCC_OscConfig+0x298>)
 8002314:	4313      	orrs	r3, r2
 8002316:	604b      	str	r3, [r1, #4]
 8002318:	e01a      	b.n	8002350 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800231a:	4b34      	ldr	r3, [pc, #208]	; (80023ec <HAL_RCC_OscConfig+0x298>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a33      	ldr	r2, [pc, #204]	; (80023ec <HAL_RCC_OscConfig+0x298>)
 8002320:	f023 0301 	bic.w	r3, r3, #1
 8002324:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002326:	f7fe fbd5 	bl	8000ad4 <HAL_GetTick>
 800232a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800232c:	e008      	b.n	8002340 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800232e:	f7fe fbd1 	bl	8000ad4 <HAL_GetTick>
 8002332:	4602      	mov	r2, r0
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	2b02      	cmp	r3, #2
 800233a:	d901      	bls.n	8002340 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	e2e7      	b.n	8002910 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002340:	4b2a      	ldr	r3, [pc, #168]	; (80023ec <HAL_RCC_OscConfig+0x298>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0302 	and.w	r3, r3, #2
 8002348:	2b00      	cmp	r3, #0
 800234a:	d1f0      	bne.n	800232e <HAL_RCC_OscConfig+0x1da>
 800234c:	e000      	b.n	8002350 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800234e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0301 	and.w	r3, r3, #1
 8002358:	2b00      	cmp	r3, #0
 800235a:	d074      	beq.n	8002446 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	2b08      	cmp	r3, #8
 8002360:	d005      	beq.n	800236e <HAL_RCC_OscConfig+0x21a>
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	2b0c      	cmp	r3, #12
 8002366:	d10e      	bne.n	8002386 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	2b03      	cmp	r3, #3
 800236c:	d10b      	bne.n	8002386 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800236e:	4b1f      	ldr	r3, [pc, #124]	; (80023ec <HAL_RCC_OscConfig+0x298>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d064      	beq.n	8002444 <HAL_RCC_OscConfig+0x2f0>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d160      	bne.n	8002444 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e2c4      	b.n	8002910 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800238e:	d106      	bne.n	800239e <HAL_RCC_OscConfig+0x24a>
 8002390:	4b16      	ldr	r3, [pc, #88]	; (80023ec <HAL_RCC_OscConfig+0x298>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a15      	ldr	r2, [pc, #84]	; (80023ec <HAL_RCC_OscConfig+0x298>)
 8002396:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800239a:	6013      	str	r3, [r2, #0]
 800239c:	e01d      	b.n	80023da <HAL_RCC_OscConfig+0x286>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023a6:	d10c      	bne.n	80023c2 <HAL_RCC_OscConfig+0x26e>
 80023a8:	4b10      	ldr	r3, [pc, #64]	; (80023ec <HAL_RCC_OscConfig+0x298>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a0f      	ldr	r2, [pc, #60]	; (80023ec <HAL_RCC_OscConfig+0x298>)
 80023ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023b2:	6013      	str	r3, [r2, #0]
 80023b4:	4b0d      	ldr	r3, [pc, #52]	; (80023ec <HAL_RCC_OscConfig+0x298>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a0c      	ldr	r2, [pc, #48]	; (80023ec <HAL_RCC_OscConfig+0x298>)
 80023ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023be:	6013      	str	r3, [r2, #0]
 80023c0:	e00b      	b.n	80023da <HAL_RCC_OscConfig+0x286>
 80023c2:	4b0a      	ldr	r3, [pc, #40]	; (80023ec <HAL_RCC_OscConfig+0x298>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a09      	ldr	r2, [pc, #36]	; (80023ec <HAL_RCC_OscConfig+0x298>)
 80023c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023cc:	6013      	str	r3, [r2, #0]
 80023ce:	4b07      	ldr	r3, [pc, #28]	; (80023ec <HAL_RCC_OscConfig+0x298>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a06      	ldr	r2, [pc, #24]	; (80023ec <HAL_RCC_OscConfig+0x298>)
 80023d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023d8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d01c      	beq.n	800241c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e2:	f7fe fb77 	bl	8000ad4 <HAL_GetTick>
 80023e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023e8:	e011      	b.n	800240e <HAL_RCC_OscConfig+0x2ba>
 80023ea:	bf00      	nop
 80023ec:	40021000 	.word	0x40021000
 80023f0:	08003c80 	.word	0x08003c80
 80023f4:	20000008 	.word	0x20000008
 80023f8:	20000000 	.word	0x20000000
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023fc:	f7fe fb6a 	bl	8000ad4 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b64      	cmp	r3, #100	; 0x64
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e280      	b.n	8002910 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800240e:	4baf      	ldr	r3, [pc, #700]	; (80026cc <HAL_RCC_OscConfig+0x578>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d0f0      	beq.n	80023fc <HAL_RCC_OscConfig+0x2a8>
 800241a:	e014      	b.n	8002446 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800241c:	f7fe fb5a 	bl	8000ad4 <HAL_GetTick>
 8002420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002422:	e008      	b.n	8002436 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002424:	f7fe fb56 	bl	8000ad4 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	2b64      	cmp	r3, #100	; 0x64
 8002430:	d901      	bls.n	8002436 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e26c      	b.n	8002910 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002436:	4ba5      	ldr	r3, [pc, #660]	; (80026cc <HAL_RCC_OscConfig+0x578>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d1f0      	bne.n	8002424 <HAL_RCC_OscConfig+0x2d0>
 8002442:	e000      	b.n	8002446 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002444:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0302 	and.w	r3, r3, #2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d060      	beq.n	8002514 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	2b04      	cmp	r3, #4
 8002456:	d005      	beq.n	8002464 <HAL_RCC_OscConfig+0x310>
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	2b0c      	cmp	r3, #12
 800245c:	d119      	bne.n	8002492 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	2b02      	cmp	r3, #2
 8002462:	d116      	bne.n	8002492 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002464:	4b99      	ldr	r3, [pc, #612]	; (80026cc <HAL_RCC_OscConfig+0x578>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800246c:	2b00      	cmp	r3, #0
 800246e:	d005      	beq.n	800247c <HAL_RCC_OscConfig+0x328>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d101      	bne.n	800247c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e249      	b.n	8002910 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800247c:	4b93      	ldr	r3, [pc, #588]	; (80026cc <HAL_RCC_OscConfig+0x578>)
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	691b      	ldr	r3, [r3, #16]
 8002488:	061b      	lsls	r3, r3, #24
 800248a:	4990      	ldr	r1, [pc, #576]	; (80026cc <HAL_RCC_OscConfig+0x578>)
 800248c:	4313      	orrs	r3, r2
 800248e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002490:	e040      	b.n	8002514 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d023      	beq.n	80024e2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800249a:	4b8c      	ldr	r3, [pc, #560]	; (80026cc <HAL_RCC_OscConfig+0x578>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a8b      	ldr	r2, [pc, #556]	; (80026cc <HAL_RCC_OscConfig+0x578>)
 80024a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a6:	f7fe fb15 	bl	8000ad4 <HAL_GetTick>
 80024aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024ac:	e008      	b.n	80024c0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024ae:	f7fe fb11 	bl	8000ad4 <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d901      	bls.n	80024c0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e227      	b.n	8002910 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024c0:	4b82      	ldr	r3, [pc, #520]	; (80026cc <HAL_RCC_OscConfig+0x578>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d0f0      	beq.n	80024ae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024cc:	4b7f      	ldr	r3, [pc, #508]	; (80026cc <HAL_RCC_OscConfig+0x578>)
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	691b      	ldr	r3, [r3, #16]
 80024d8:	061b      	lsls	r3, r3, #24
 80024da:	497c      	ldr	r1, [pc, #496]	; (80026cc <HAL_RCC_OscConfig+0x578>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	604b      	str	r3, [r1, #4]
 80024e0:	e018      	b.n	8002514 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024e2:	4b7a      	ldr	r3, [pc, #488]	; (80026cc <HAL_RCC_OscConfig+0x578>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a79      	ldr	r2, [pc, #484]	; (80026cc <HAL_RCC_OscConfig+0x578>)
 80024e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ee:	f7fe faf1 	bl	8000ad4 <HAL_GetTick>
 80024f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024f4:	e008      	b.n	8002508 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024f6:	f7fe faed 	bl	8000ad4 <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	2b02      	cmp	r3, #2
 8002502:	d901      	bls.n	8002508 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e203      	b.n	8002910 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002508:	4b70      	ldr	r3, [pc, #448]	; (80026cc <HAL_RCC_OscConfig+0x578>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002510:	2b00      	cmp	r3, #0
 8002512:	d1f0      	bne.n	80024f6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0308 	and.w	r3, r3, #8
 800251c:	2b00      	cmp	r3, #0
 800251e:	d03c      	beq.n	800259a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	695b      	ldr	r3, [r3, #20]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d01c      	beq.n	8002562 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002528:	4b68      	ldr	r3, [pc, #416]	; (80026cc <HAL_RCC_OscConfig+0x578>)
 800252a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800252e:	4a67      	ldr	r2, [pc, #412]	; (80026cc <HAL_RCC_OscConfig+0x578>)
 8002530:	f043 0301 	orr.w	r3, r3, #1
 8002534:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002538:	f7fe facc 	bl	8000ad4 <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800253e:	e008      	b.n	8002552 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002540:	f7fe fac8 	bl	8000ad4 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b02      	cmp	r3, #2
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e1de      	b.n	8002910 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002552:	4b5e      	ldr	r3, [pc, #376]	; (80026cc <HAL_RCC_OscConfig+0x578>)
 8002554:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002558:	f003 0302 	and.w	r3, r3, #2
 800255c:	2b00      	cmp	r3, #0
 800255e:	d0ef      	beq.n	8002540 <HAL_RCC_OscConfig+0x3ec>
 8002560:	e01b      	b.n	800259a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002562:	4b5a      	ldr	r3, [pc, #360]	; (80026cc <HAL_RCC_OscConfig+0x578>)
 8002564:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002568:	4a58      	ldr	r2, [pc, #352]	; (80026cc <HAL_RCC_OscConfig+0x578>)
 800256a:	f023 0301 	bic.w	r3, r3, #1
 800256e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002572:	f7fe faaf 	bl	8000ad4 <HAL_GetTick>
 8002576:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002578:	e008      	b.n	800258c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800257a:	f7fe faab 	bl	8000ad4 <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	2b02      	cmp	r3, #2
 8002586:	d901      	bls.n	800258c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e1c1      	b.n	8002910 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800258c:	4b4f      	ldr	r3, [pc, #316]	; (80026cc <HAL_RCC_OscConfig+0x578>)
 800258e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	2b00      	cmp	r3, #0
 8002598:	d1ef      	bne.n	800257a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0304 	and.w	r3, r3, #4
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	f000 80a6 	beq.w	80026f4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025a8:	2300      	movs	r3, #0
 80025aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80025ac:	4b47      	ldr	r3, [pc, #284]	; (80026cc <HAL_RCC_OscConfig+0x578>)
 80025ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d10d      	bne.n	80025d4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025b8:	4b44      	ldr	r3, [pc, #272]	; (80026cc <HAL_RCC_OscConfig+0x578>)
 80025ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025bc:	4a43      	ldr	r2, [pc, #268]	; (80026cc <HAL_RCC_OscConfig+0x578>)
 80025be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025c2:	6593      	str	r3, [r2, #88]	; 0x58
 80025c4:	4b41      	ldr	r3, [pc, #260]	; (80026cc <HAL_RCC_OscConfig+0x578>)
 80025c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025cc:	60bb      	str	r3, [r7, #8]
 80025ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025d0:	2301      	movs	r3, #1
 80025d2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025d4:	4b3e      	ldr	r3, [pc, #248]	; (80026d0 <HAL_RCC_OscConfig+0x57c>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d118      	bne.n	8002612 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025e0:	4b3b      	ldr	r3, [pc, #236]	; (80026d0 <HAL_RCC_OscConfig+0x57c>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a3a      	ldr	r2, [pc, #232]	; (80026d0 <HAL_RCC_OscConfig+0x57c>)
 80025e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025ec:	f7fe fa72 	bl	8000ad4 <HAL_GetTick>
 80025f0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025f4:	f7fe fa6e 	bl	8000ad4 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e184      	b.n	8002910 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002606:	4b32      	ldr	r3, [pc, #200]	; (80026d0 <HAL_RCC_OscConfig+0x57c>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800260e:	2b00      	cmp	r3, #0
 8002610:	d0f0      	beq.n	80025f4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d108      	bne.n	800262c <HAL_RCC_OscConfig+0x4d8>
 800261a:	4b2c      	ldr	r3, [pc, #176]	; (80026cc <HAL_RCC_OscConfig+0x578>)
 800261c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002620:	4a2a      	ldr	r2, [pc, #168]	; (80026cc <HAL_RCC_OscConfig+0x578>)
 8002622:	f043 0301 	orr.w	r3, r3, #1
 8002626:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800262a:	e024      	b.n	8002676 <HAL_RCC_OscConfig+0x522>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	2b05      	cmp	r3, #5
 8002632:	d110      	bne.n	8002656 <HAL_RCC_OscConfig+0x502>
 8002634:	4b25      	ldr	r3, [pc, #148]	; (80026cc <HAL_RCC_OscConfig+0x578>)
 8002636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800263a:	4a24      	ldr	r2, [pc, #144]	; (80026cc <HAL_RCC_OscConfig+0x578>)
 800263c:	f043 0304 	orr.w	r3, r3, #4
 8002640:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002644:	4b21      	ldr	r3, [pc, #132]	; (80026cc <HAL_RCC_OscConfig+0x578>)
 8002646:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800264a:	4a20      	ldr	r2, [pc, #128]	; (80026cc <HAL_RCC_OscConfig+0x578>)
 800264c:	f043 0301 	orr.w	r3, r3, #1
 8002650:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002654:	e00f      	b.n	8002676 <HAL_RCC_OscConfig+0x522>
 8002656:	4b1d      	ldr	r3, [pc, #116]	; (80026cc <HAL_RCC_OscConfig+0x578>)
 8002658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800265c:	4a1b      	ldr	r2, [pc, #108]	; (80026cc <HAL_RCC_OscConfig+0x578>)
 800265e:	f023 0301 	bic.w	r3, r3, #1
 8002662:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002666:	4b19      	ldr	r3, [pc, #100]	; (80026cc <HAL_RCC_OscConfig+0x578>)
 8002668:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800266c:	4a17      	ldr	r2, [pc, #92]	; (80026cc <HAL_RCC_OscConfig+0x578>)
 800266e:	f023 0304 	bic.w	r3, r3, #4
 8002672:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d016      	beq.n	80026ac <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800267e:	f7fe fa29 	bl	8000ad4 <HAL_GetTick>
 8002682:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002684:	e00a      	b.n	800269c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002686:	f7fe fa25 	bl	8000ad4 <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	f241 3288 	movw	r2, #5000	; 0x1388
 8002694:	4293      	cmp	r3, r2
 8002696:	d901      	bls.n	800269c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e139      	b.n	8002910 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800269c:	4b0b      	ldr	r3, [pc, #44]	; (80026cc <HAL_RCC_OscConfig+0x578>)
 800269e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d0ed      	beq.n	8002686 <HAL_RCC_OscConfig+0x532>
 80026aa:	e01a      	b.n	80026e2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ac:	f7fe fa12 	bl	8000ad4 <HAL_GetTick>
 80026b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026b2:	e00f      	b.n	80026d4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026b4:	f7fe fa0e 	bl	8000ad4 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	f241 3288 	movw	r2, #5000	; 0x1388
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d906      	bls.n	80026d4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e122      	b.n	8002910 <HAL_RCC_OscConfig+0x7bc>
 80026ca:	bf00      	nop
 80026cc:	40021000 	.word	0x40021000
 80026d0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026d4:	4b90      	ldr	r3, [pc, #576]	; (8002918 <HAL_RCC_OscConfig+0x7c4>)
 80026d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d1e8      	bne.n	80026b4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026e2:	7ffb      	ldrb	r3, [r7, #31]
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d105      	bne.n	80026f4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026e8:	4b8b      	ldr	r3, [pc, #556]	; (8002918 <HAL_RCC_OscConfig+0x7c4>)
 80026ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ec:	4a8a      	ldr	r2, [pc, #552]	; (8002918 <HAL_RCC_OscConfig+0x7c4>)
 80026ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026f2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	f000 8108 	beq.w	800290e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002702:	2b02      	cmp	r3, #2
 8002704:	f040 80d0 	bne.w	80028a8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002708:	4b83      	ldr	r3, [pc, #524]	; (8002918 <HAL_RCC_OscConfig+0x7c4>)
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	f003 0203 	and.w	r2, r3, #3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002718:	429a      	cmp	r2, r3
 800271a:	d130      	bne.n	800277e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002726:	3b01      	subs	r3, #1
 8002728:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800272a:	429a      	cmp	r2, r3
 800272c:	d127      	bne.n	800277e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002738:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800273a:	429a      	cmp	r2, r3
 800273c:	d11f      	bne.n	800277e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002748:	2a07      	cmp	r2, #7
 800274a:	bf14      	ite	ne
 800274c:	2201      	movne	r2, #1
 800274e:	2200      	moveq	r2, #0
 8002750:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002752:	4293      	cmp	r3, r2
 8002754:	d113      	bne.n	800277e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002760:	085b      	lsrs	r3, r3, #1
 8002762:	3b01      	subs	r3, #1
 8002764:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002766:	429a      	cmp	r2, r3
 8002768:	d109      	bne.n	800277e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002774:	085b      	lsrs	r3, r3, #1
 8002776:	3b01      	subs	r3, #1
 8002778:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800277a:	429a      	cmp	r2, r3
 800277c:	d06e      	beq.n	800285c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	2b0c      	cmp	r3, #12
 8002782:	d069      	beq.n	8002858 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002784:	4b64      	ldr	r3, [pc, #400]	; (8002918 <HAL_RCC_OscConfig+0x7c4>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d105      	bne.n	800279c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002790:	4b61      	ldr	r3, [pc, #388]	; (8002918 <HAL_RCC_OscConfig+0x7c4>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d001      	beq.n	80027a0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e0b7      	b.n	8002910 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80027a0:	4b5d      	ldr	r3, [pc, #372]	; (8002918 <HAL_RCC_OscConfig+0x7c4>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a5c      	ldr	r2, [pc, #368]	; (8002918 <HAL_RCC_OscConfig+0x7c4>)
 80027a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027aa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80027ac:	f7fe f992 	bl	8000ad4 <HAL_GetTick>
 80027b0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027b2:	e008      	b.n	80027c6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027b4:	f7fe f98e 	bl	8000ad4 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d901      	bls.n	80027c6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e0a4      	b.n	8002910 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027c6:	4b54      	ldr	r3, [pc, #336]	; (8002918 <HAL_RCC_OscConfig+0x7c4>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d1f0      	bne.n	80027b4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027d2:	4b51      	ldr	r3, [pc, #324]	; (8002918 <HAL_RCC_OscConfig+0x7c4>)
 80027d4:	68da      	ldr	r2, [r3, #12]
 80027d6:	4b51      	ldr	r3, [pc, #324]	; (800291c <HAL_RCC_OscConfig+0x7c8>)
 80027d8:	4013      	ands	r3, r2
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80027e2:	3a01      	subs	r2, #1
 80027e4:	0112      	lsls	r2, r2, #4
 80027e6:	4311      	orrs	r1, r2
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80027ec:	0212      	lsls	r2, r2, #8
 80027ee:	4311      	orrs	r1, r2
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80027f4:	0852      	lsrs	r2, r2, #1
 80027f6:	3a01      	subs	r2, #1
 80027f8:	0552      	lsls	r2, r2, #21
 80027fa:	4311      	orrs	r1, r2
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002800:	0852      	lsrs	r2, r2, #1
 8002802:	3a01      	subs	r2, #1
 8002804:	0652      	lsls	r2, r2, #25
 8002806:	4311      	orrs	r1, r2
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800280c:	0912      	lsrs	r2, r2, #4
 800280e:	0452      	lsls	r2, r2, #17
 8002810:	430a      	orrs	r2, r1
 8002812:	4941      	ldr	r1, [pc, #260]	; (8002918 <HAL_RCC_OscConfig+0x7c4>)
 8002814:	4313      	orrs	r3, r2
 8002816:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002818:	4b3f      	ldr	r3, [pc, #252]	; (8002918 <HAL_RCC_OscConfig+0x7c4>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a3e      	ldr	r2, [pc, #248]	; (8002918 <HAL_RCC_OscConfig+0x7c4>)
 800281e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002822:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002824:	4b3c      	ldr	r3, [pc, #240]	; (8002918 <HAL_RCC_OscConfig+0x7c4>)
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	4a3b      	ldr	r2, [pc, #236]	; (8002918 <HAL_RCC_OscConfig+0x7c4>)
 800282a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800282e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002830:	f7fe f950 	bl	8000ad4 <HAL_GetTick>
 8002834:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002836:	e008      	b.n	800284a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002838:	f7fe f94c 	bl	8000ad4 <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	2b02      	cmp	r3, #2
 8002844:	d901      	bls.n	800284a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e062      	b.n	8002910 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800284a:	4b33      	ldr	r3, [pc, #204]	; (8002918 <HAL_RCC_OscConfig+0x7c4>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d0f0      	beq.n	8002838 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002856:	e05a      	b.n	800290e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e059      	b.n	8002910 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800285c:	4b2e      	ldr	r3, [pc, #184]	; (8002918 <HAL_RCC_OscConfig+0x7c4>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d152      	bne.n	800290e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002868:	4b2b      	ldr	r3, [pc, #172]	; (8002918 <HAL_RCC_OscConfig+0x7c4>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a2a      	ldr	r2, [pc, #168]	; (8002918 <HAL_RCC_OscConfig+0x7c4>)
 800286e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002872:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002874:	4b28      	ldr	r3, [pc, #160]	; (8002918 <HAL_RCC_OscConfig+0x7c4>)
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	4a27      	ldr	r2, [pc, #156]	; (8002918 <HAL_RCC_OscConfig+0x7c4>)
 800287a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800287e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002880:	f7fe f928 	bl	8000ad4 <HAL_GetTick>
 8002884:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002886:	e008      	b.n	800289a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002888:	f7fe f924 	bl	8000ad4 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2b02      	cmp	r3, #2
 8002894:	d901      	bls.n	800289a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e03a      	b.n	8002910 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800289a:	4b1f      	ldr	r3, [pc, #124]	; (8002918 <HAL_RCC_OscConfig+0x7c4>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d0f0      	beq.n	8002888 <HAL_RCC_OscConfig+0x734>
 80028a6:	e032      	b.n	800290e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	2b0c      	cmp	r3, #12
 80028ac:	d02d      	beq.n	800290a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ae:	4b1a      	ldr	r3, [pc, #104]	; (8002918 <HAL_RCC_OscConfig+0x7c4>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a19      	ldr	r2, [pc, #100]	; (8002918 <HAL_RCC_OscConfig+0x7c4>)
 80028b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028b8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80028ba:	4b17      	ldr	r3, [pc, #92]	; (8002918 <HAL_RCC_OscConfig+0x7c4>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d105      	bne.n	80028d2 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80028c6:	4b14      	ldr	r3, [pc, #80]	; (8002918 <HAL_RCC_OscConfig+0x7c4>)
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	4a13      	ldr	r2, [pc, #76]	; (8002918 <HAL_RCC_OscConfig+0x7c4>)
 80028cc:	f023 0303 	bic.w	r3, r3, #3
 80028d0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80028d2:	4b11      	ldr	r3, [pc, #68]	; (8002918 <HAL_RCC_OscConfig+0x7c4>)
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	4a10      	ldr	r2, [pc, #64]	; (8002918 <HAL_RCC_OscConfig+0x7c4>)
 80028d8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80028dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028e0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e2:	f7fe f8f7 	bl	8000ad4 <HAL_GetTick>
 80028e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028e8:	e008      	b.n	80028fc <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028ea:	f7fe f8f3 	bl	8000ad4 <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d901      	bls.n	80028fc <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e009      	b.n	8002910 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028fc:	4b06      	ldr	r3, [pc, #24]	; (8002918 <HAL_RCC_OscConfig+0x7c4>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d1f0      	bne.n	80028ea <HAL_RCC_OscConfig+0x796>
 8002908:	e001      	b.n	800290e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e000      	b.n	8002910 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800290e:	2300      	movs	r3, #0
}
 8002910:	4618      	mov	r0, r3
 8002912:	3720      	adds	r7, #32
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	40021000 	.word	0x40021000
 800291c:	f99d808c 	.word	0xf99d808c

08002920 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d101      	bne.n	8002934 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e0c8      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002934:	4b66      	ldr	r3, [pc, #408]	; (8002ad0 <HAL_RCC_ClockConfig+0x1b0>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0307 	and.w	r3, r3, #7
 800293c:	683a      	ldr	r2, [r7, #0]
 800293e:	429a      	cmp	r2, r3
 8002940:	d910      	bls.n	8002964 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002942:	4b63      	ldr	r3, [pc, #396]	; (8002ad0 <HAL_RCC_ClockConfig+0x1b0>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f023 0207 	bic.w	r2, r3, #7
 800294a:	4961      	ldr	r1, [pc, #388]	; (8002ad0 <HAL_RCC_ClockConfig+0x1b0>)
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	4313      	orrs	r3, r2
 8002950:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002952:	4b5f      	ldr	r3, [pc, #380]	; (8002ad0 <HAL_RCC_ClockConfig+0x1b0>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0307 	and.w	r3, r3, #7
 800295a:	683a      	ldr	r2, [r7, #0]
 800295c:	429a      	cmp	r2, r3
 800295e:	d001      	beq.n	8002964 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e0b0      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0301 	and.w	r3, r3, #1
 800296c:	2b00      	cmp	r3, #0
 800296e:	d04c      	beq.n	8002a0a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	2b03      	cmp	r3, #3
 8002976:	d107      	bne.n	8002988 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002978:	4b56      	ldr	r3, [pc, #344]	; (8002ad4 <HAL_RCC_ClockConfig+0x1b4>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d121      	bne.n	80029c8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e09e      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	2b02      	cmp	r3, #2
 800298e:	d107      	bne.n	80029a0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002990:	4b50      	ldr	r3, [pc, #320]	; (8002ad4 <HAL_RCC_ClockConfig+0x1b4>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d115      	bne.n	80029c8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e092      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d107      	bne.n	80029b8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029a8:	4b4a      	ldr	r3, [pc, #296]	; (8002ad4 <HAL_RCC_ClockConfig+0x1b4>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0302 	and.w	r3, r3, #2
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d109      	bne.n	80029c8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e086      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029b8:	4b46      	ldr	r3, [pc, #280]	; (8002ad4 <HAL_RCC_ClockConfig+0x1b4>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d101      	bne.n	80029c8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e07e      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80029c8:	4b42      	ldr	r3, [pc, #264]	; (8002ad4 <HAL_RCC_ClockConfig+0x1b4>)
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f023 0203 	bic.w	r2, r3, #3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	493f      	ldr	r1, [pc, #252]	; (8002ad4 <HAL_RCC_ClockConfig+0x1b4>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029da:	f7fe f87b 	bl	8000ad4 <HAL_GetTick>
 80029de:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029e0:	e00a      	b.n	80029f8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029e2:	f7fe f877 	bl	8000ad4 <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d901      	bls.n	80029f8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e066      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029f8:	4b36      	ldr	r3, [pc, #216]	; (8002ad4 <HAL_RCC_ClockConfig+0x1b4>)
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f003 020c 	and.w	r2, r3, #12
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d1eb      	bne.n	80029e2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d008      	beq.n	8002a28 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a16:	4b2f      	ldr	r3, [pc, #188]	; (8002ad4 <HAL_RCC_ClockConfig+0x1b4>)
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	492c      	ldr	r1, [pc, #176]	; (8002ad4 <HAL_RCC_ClockConfig+0x1b4>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a28:	4b29      	ldr	r3, [pc, #164]	; (8002ad0 <HAL_RCC_ClockConfig+0x1b0>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0307 	and.w	r3, r3, #7
 8002a30:	683a      	ldr	r2, [r7, #0]
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d210      	bcs.n	8002a58 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a36:	4b26      	ldr	r3, [pc, #152]	; (8002ad0 <HAL_RCC_ClockConfig+0x1b0>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f023 0207 	bic.w	r2, r3, #7
 8002a3e:	4924      	ldr	r1, [pc, #144]	; (8002ad0 <HAL_RCC_ClockConfig+0x1b0>)
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a46:	4b22      	ldr	r3, [pc, #136]	; (8002ad0 <HAL_RCC_ClockConfig+0x1b0>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0307 	and.w	r3, r3, #7
 8002a4e:	683a      	ldr	r2, [r7, #0]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d001      	beq.n	8002a58 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e036      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0304 	and.w	r3, r3, #4
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d008      	beq.n	8002a76 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a64:	4b1b      	ldr	r3, [pc, #108]	; (8002ad4 <HAL_RCC_ClockConfig+0x1b4>)
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	4918      	ldr	r1, [pc, #96]	; (8002ad4 <HAL_RCC_ClockConfig+0x1b4>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0308 	and.w	r3, r3, #8
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d009      	beq.n	8002a96 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a82:	4b14      	ldr	r3, [pc, #80]	; (8002ad4 <HAL_RCC_ClockConfig+0x1b4>)
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	00db      	lsls	r3, r3, #3
 8002a90:	4910      	ldr	r1, [pc, #64]	; (8002ad4 <HAL_RCC_ClockConfig+0x1b4>)
 8002a92:	4313      	orrs	r3, r2
 8002a94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a96:	f000 f825 	bl	8002ae4 <HAL_RCC_GetSysClockFreq>
 8002a9a:	4601      	mov	r1, r0
 8002a9c:	4b0d      	ldr	r3, [pc, #52]	; (8002ad4 <HAL_RCC_ClockConfig+0x1b4>)
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	091b      	lsrs	r3, r3, #4
 8002aa2:	f003 030f 	and.w	r3, r3, #15
 8002aa6:	4a0c      	ldr	r2, [pc, #48]	; (8002ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8002aa8:	5cd3      	ldrb	r3, [r2, r3]
 8002aaa:	f003 031f 	and.w	r3, r3, #31
 8002aae:	fa21 f303 	lsr.w	r3, r1, r3
 8002ab2:	4a0a      	ldr	r2, [pc, #40]	; (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 8002ab4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002ab6:	4b0a      	ldr	r3, [pc, #40]	; (8002ae0 <HAL_RCC_ClockConfig+0x1c0>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7fd ffba 	bl	8000a34 <HAL_InitTick>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	72fb      	strb	r3, [r7, #11]

  return status;
 8002ac4:	7afb      	ldrb	r3, [r7, #11]
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3710      	adds	r7, #16
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	40022000 	.word	0x40022000
 8002ad4:	40021000 	.word	0x40021000
 8002ad8:	08003c80 	.word	0x08003c80
 8002adc:	20000008 	.word	0x20000008
 8002ae0:	20000000 	.word	0x20000000

08002ae4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b089      	sub	sp, #36	; 0x24
 8002ae8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002aea:	2300      	movs	r3, #0
 8002aec:	61fb      	str	r3, [r7, #28]
 8002aee:	2300      	movs	r3, #0
 8002af0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002af2:	4b3d      	ldr	r3, [pc, #244]	; (8002be8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f003 030c 	and.w	r3, r3, #12
 8002afa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002afc:	4b3a      	ldr	r3, [pc, #232]	; (8002be8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	f003 0303 	and.w	r3, r3, #3
 8002b04:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d005      	beq.n	8002b18 <HAL_RCC_GetSysClockFreq+0x34>
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	2b0c      	cmp	r3, #12
 8002b10:	d121      	bne.n	8002b56 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d11e      	bne.n	8002b56 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002b18:	4b33      	ldr	r3, [pc, #204]	; (8002be8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0308 	and.w	r3, r3, #8
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d107      	bne.n	8002b34 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002b24:	4b30      	ldr	r3, [pc, #192]	; (8002be8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002b26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b2a:	0a1b      	lsrs	r3, r3, #8
 8002b2c:	f003 030f 	and.w	r3, r3, #15
 8002b30:	61fb      	str	r3, [r7, #28]
 8002b32:	e005      	b.n	8002b40 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002b34:	4b2c      	ldr	r3, [pc, #176]	; (8002be8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	091b      	lsrs	r3, r3, #4
 8002b3a:	f003 030f 	and.w	r3, r3, #15
 8002b3e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002b40:	4a2a      	ldr	r2, [pc, #168]	; (8002bec <HAL_RCC_GetSysClockFreq+0x108>)
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b48:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d10d      	bne.n	8002b6c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b54:	e00a      	b.n	8002b6c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	2b04      	cmp	r3, #4
 8002b5a:	d102      	bne.n	8002b62 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b5c:	4b24      	ldr	r3, [pc, #144]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002b5e:	61bb      	str	r3, [r7, #24]
 8002b60:	e004      	b.n	8002b6c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	2b08      	cmp	r3, #8
 8002b66:	d101      	bne.n	8002b6c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b68:	4b22      	ldr	r3, [pc, #136]	; (8002bf4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b6a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	2b0c      	cmp	r3, #12
 8002b70:	d133      	bne.n	8002bda <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b72:	4b1d      	ldr	r3, [pc, #116]	; (8002be8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	f003 0303 	and.w	r3, r3, #3
 8002b7a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d002      	beq.n	8002b88 <HAL_RCC_GetSysClockFreq+0xa4>
 8002b82:	2b03      	cmp	r3, #3
 8002b84:	d003      	beq.n	8002b8e <HAL_RCC_GetSysClockFreq+0xaa>
 8002b86:	e005      	b.n	8002b94 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002b88:	4b19      	ldr	r3, [pc, #100]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002b8a:	617b      	str	r3, [r7, #20]
      break;
 8002b8c:	e005      	b.n	8002b9a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002b8e:	4b19      	ldr	r3, [pc, #100]	; (8002bf4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b90:	617b      	str	r3, [r7, #20]
      break;
 8002b92:	e002      	b.n	8002b9a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	617b      	str	r3, [r7, #20]
      break;
 8002b98:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b9a:	4b13      	ldr	r3, [pc, #76]	; (8002be8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	091b      	lsrs	r3, r3, #4
 8002ba0:	f003 0307 	and.w	r3, r3, #7
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002ba8:	4b0f      	ldr	r3, [pc, #60]	; (8002be8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	0a1b      	lsrs	r3, r3, #8
 8002bae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002bb2:	697a      	ldr	r2, [r7, #20]
 8002bb4:	fb02 f203 	mul.w	r2, r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bbe:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002bc0:	4b09      	ldr	r3, [pc, #36]	; (8002be8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	0e5b      	lsrs	r3, r3, #25
 8002bc6:	f003 0303 	and.w	r3, r3, #3
 8002bca:	3301      	adds	r3, #1
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002bd0:	697a      	ldr	r2, [r7, #20]
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bd8:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002bda:	69bb      	ldr	r3, [r7, #24]
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3724      	adds	r7, #36	; 0x24
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr
 8002be8:	40021000 	.word	0x40021000
 8002bec:	08003c90 	.word	0x08003c90
 8002bf0:	00f42400 	.word	0x00f42400
 8002bf4:	007a1200 	.word	0x007a1200

08002bf8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b086      	sub	sp, #24
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002c00:	2300      	movs	r3, #0
 8002c02:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002c04:	4b2a      	ldr	r3, [pc, #168]	; (8002cb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d003      	beq.n	8002c18 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002c10:	f7ff fa3c 	bl	800208c <HAL_PWREx_GetVoltageRange>
 8002c14:	6178      	str	r0, [r7, #20]
 8002c16:	e014      	b.n	8002c42 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c18:	4b25      	ldr	r3, [pc, #148]	; (8002cb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c1c:	4a24      	ldr	r2, [pc, #144]	; (8002cb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c22:	6593      	str	r3, [r2, #88]	; 0x58
 8002c24:	4b22      	ldr	r3, [pc, #136]	; (8002cb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c2c:	60fb      	str	r3, [r7, #12]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002c30:	f7ff fa2c 	bl	800208c <HAL_PWREx_GetVoltageRange>
 8002c34:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002c36:	4b1e      	ldr	r3, [pc, #120]	; (8002cb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c3a:	4a1d      	ldr	r2, [pc, #116]	; (8002cb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c40:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c48:	d10b      	bne.n	8002c62 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2b80      	cmp	r3, #128	; 0x80
 8002c4e:	d919      	bls.n	8002c84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2ba0      	cmp	r3, #160	; 0xa0
 8002c54:	d902      	bls.n	8002c5c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c56:	2302      	movs	r3, #2
 8002c58:	613b      	str	r3, [r7, #16]
 8002c5a:	e013      	b.n	8002c84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	613b      	str	r3, [r7, #16]
 8002c60:	e010      	b.n	8002c84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2b80      	cmp	r3, #128	; 0x80
 8002c66:	d902      	bls.n	8002c6e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002c68:	2303      	movs	r3, #3
 8002c6a:	613b      	str	r3, [r7, #16]
 8002c6c:	e00a      	b.n	8002c84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2b80      	cmp	r3, #128	; 0x80
 8002c72:	d102      	bne.n	8002c7a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c74:	2302      	movs	r3, #2
 8002c76:	613b      	str	r3, [r7, #16]
 8002c78:	e004      	b.n	8002c84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2b70      	cmp	r3, #112	; 0x70
 8002c7e:	d101      	bne.n	8002c84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c80:	2301      	movs	r3, #1
 8002c82:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002c84:	4b0b      	ldr	r3, [pc, #44]	; (8002cb4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f023 0207 	bic.w	r2, r3, #7
 8002c8c:	4909      	ldr	r1, [pc, #36]	; (8002cb4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002c94:	4b07      	ldr	r3, [pc, #28]	; (8002cb4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0307 	and.w	r3, r3, #7
 8002c9c:	693a      	ldr	r2, [r7, #16]
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d001      	beq.n	8002ca6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e000      	b.n	8002ca8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3718      	adds	r7, #24
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	40021000 	.word	0x40021000
 8002cb4:	40022000 	.word	0x40022000

08002cb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b086      	sub	sp, #24
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d03f      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cd8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cdc:	d01c      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8002cde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ce2:	d802      	bhi.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d00e      	beq.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002ce8:	e01f      	b.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002cea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002cee:	d003      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002cf0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002cf4:	d01c      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002cf6:	e018      	b.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002cf8:	4b85      	ldr	r3, [pc, #532]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	4a84      	ldr	r2, [pc, #528]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002cfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d02:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d04:	e015      	b.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	3304      	adds	r3, #4
 8002d0a:	2100      	movs	r1, #0
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f000 fab9 	bl	8003284 <RCCEx_PLLSAI1_Config>
 8002d12:	4603      	mov	r3, r0
 8002d14:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d16:	e00c      	b.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	3320      	adds	r3, #32
 8002d1c:	2100      	movs	r1, #0
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f000 fba0 	bl	8003464 <RCCEx_PLLSAI2_Config>
 8002d24:	4603      	mov	r3, r0
 8002d26:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d28:	e003      	b.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	74fb      	strb	r3, [r7, #19]
      break;
 8002d2e:	e000      	b.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002d30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d32:	7cfb      	ldrb	r3, [r7, #19]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d10b      	bne.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d38:	4b75      	ldr	r3, [pc, #468]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d3e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d46:	4972      	ldr	r1, [pc, #456]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002d4e:	e001      	b.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d50:	7cfb      	ldrb	r3, [r7, #19]
 8002d52:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d03f      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d68:	d01c      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002d6a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d6e:	d802      	bhi.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d00e      	beq.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002d74:	e01f      	b.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002d76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d7a:	d003      	beq.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002d7c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002d80:	d01c      	beq.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x104>
 8002d82:	e018      	b.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002d84:	4b62      	ldr	r3, [pc, #392]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	4a61      	ldr	r2, [pc, #388]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d8e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d90:	e015      	b.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	3304      	adds	r3, #4
 8002d96:	2100      	movs	r1, #0
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f000 fa73 	bl	8003284 <RCCEx_PLLSAI1_Config>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002da2:	e00c      	b.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	3320      	adds	r3, #32
 8002da8:	2100      	movs	r1, #0
 8002daa:	4618      	mov	r0, r3
 8002dac:	f000 fb5a 	bl	8003464 <RCCEx_PLLSAI2_Config>
 8002db0:	4603      	mov	r3, r0
 8002db2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002db4:	e003      	b.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	74fb      	strb	r3, [r7, #19]
      break;
 8002dba:	e000      	b.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002dbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002dbe:	7cfb      	ldrb	r3, [r7, #19]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d10b      	bne.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002dc4:	4b52      	ldr	r3, [pc, #328]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dca:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002dd2:	494f      	ldr	r1, [pc, #316]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002dda:	e001      	b.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ddc:	7cfb      	ldrb	r3, [r7, #19]
 8002dde:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f000 80a0 	beq.w	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dee:	2300      	movs	r3, #0
 8002df0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002df2:	4b47      	ldr	r3, [pc, #284]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d101      	bne.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e000      	b.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002e02:	2300      	movs	r3, #0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d00d      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e08:	4b41      	ldr	r3, [pc, #260]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e0c:	4a40      	ldr	r2, [pc, #256]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e12:	6593      	str	r3, [r2, #88]	; 0x58
 8002e14:	4b3e      	ldr	r3, [pc, #248]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e1c:	60bb      	str	r3, [r7, #8]
 8002e1e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e20:	2301      	movs	r3, #1
 8002e22:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e24:	4b3b      	ldr	r3, [pc, #236]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a3a      	ldr	r2, [pc, #232]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002e2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e2e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e30:	f7fd fe50 	bl	8000ad4 <HAL_GetTick>
 8002e34:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e36:	e009      	b.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e38:	f7fd fe4c 	bl	8000ad4 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d902      	bls.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	74fb      	strb	r3, [r7, #19]
        break;
 8002e4a:	e005      	b.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e4c:	4b31      	ldr	r3, [pc, #196]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d0ef      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8002e58:	7cfb      	ldrb	r3, [r7, #19]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d15c      	bne.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e5e:	4b2c      	ldr	r3, [pc, #176]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e68:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d01f      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e76:	697a      	ldr	r2, [r7, #20]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d019      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e7c:	4b24      	ldr	r3, [pc, #144]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e86:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e88:	4b21      	ldr	r3, [pc, #132]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e8e:	4a20      	ldr	r2, [pc, #128]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e98:	4b1d      	ldr	r3, [pc, #116]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e9e:	4a1c      	ldr	r2, [pc, #112]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ea0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ea4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ea8:	4a19      	ldr	r2, [pc, #100]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	f003 0301 	and.w	r3, r3, #1
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d016      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eba:	f7fd fe0b 	bl	8000ad4 <HAL_GetTick>
 8002ebe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ec0:	e00b      	b.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ec2:	f7fd fe07 	bl	8000ad4 <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d902      	bls.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	74fb      	strb	r3, [r7, #19]
            break;
 8002ed8:	e006      	b.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002eda:	4b0d      	ldr	r3, [pc, #52]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee0:	f003 0302 	and.w	r3, r3, #2
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d0ec      	beq.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8002ee8:	7cfb      	ldrb	r3, [r7, #19]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d10c      	bne.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002eee:	4b08      	ldr	r3, [pc, #32]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ef4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002efe:	4904      	ldr	r1, [pc, #16]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f00:	4313      	orrs	r3, r2
 8002f02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002f06:	e009      	b.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f08:	7cfb      	ldrb	r3, [r7, #19]
 8002f0a:	74bb      	strb	r3, [r7, #18]
 8002f0c:	e006      	b.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x264>
 8002f0e:	bf00      	nop
 8002f10:	40021000 	.word	0x40021000
 8002f14:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f18:	7cfb      	ldrb	r3, [r7, #19]
 8002f1a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f1c:	7c7b      	ldrb	r3, [r7, #17]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d105      	bne.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f22:	4b9e      	ldr	r3, [pc, #632]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f26:	4a9d      	ldr	r2, [pc, #628]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f2c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d00a      	beq.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f3a:	4b98      	ldr	r3, [pc, #608]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f40:	f023 0203 	bic.w	r2, r3, #3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f48:	4994      	ldr	r1, [pc, #592]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0302 	and.w	r3, r3, #2
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d00a      	beq.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f5c:	4b8f      	ldr	r3, [pc, #572]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f62:	f023 020c 	bic.w	r2, r3, #12
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f6a:	498c      	ldr	r1, [pc, #560]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0304 	and.w	r3, r3, #4
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d00a      	beq.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f7e:	4b87      	ldr	r3, [pc, #540]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f84:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8c:	4983      	ldr	r1, [pc, #524]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0308 	and.w	r3, r3, #8
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d00a      	beq.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002fa0:	4b7e      	ldr	r3, [pc, #504]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fa6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fae:	497b      	ldr	r1, [pc, #492]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0310 	and.w	r3, r3, #16
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d00a      	beq.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002fc2:	4b76      	ldr	r3, [pc, #472]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fc8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fd0:	4972      	ldr	r1, [pc, #456]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0320 	and.w	r3, r3, #32
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d00a      	beq.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002fe4:	4b6d      	ldr	r3, [pc, #436]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ff2:	496a      	ldr	r1, [pc, #424]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00a      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003006:	4b65      	ldr	r3, [pc, #404]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003008:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800300c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003014:	4961      	ldr	r1, [pc, #388]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003016:	4313      	orrs	r3, r2
 8003018:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003024:	2b00      	cmp	r3, #0
 8003026:	d00a      	beq.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003028:	4b5c      	ldr	r3, [pc, #368]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800302a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800302e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003036:	4959      	ldr	r1, [pc, #356]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003038:	4313      	orrs	r3, r2
 800303a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00a      	beq.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800304a:	4b54      	ldr	r3, [pc, #336]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800304c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003050:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003058:	4950      	ldr	r1, [pc, #320]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800305a:	4313      	orrs	r3, r2
 800305c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003068:	2b00      	cmp	r3, #0
 800306a:	d00a      	beq.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800306c:	4b4b      	ldr	r3, [pc, #300]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800306e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003072:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800307a:	4948      	ldr	r1, [pc, #288]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800307c:	4313      	orrs	r3, r2
 800307e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800308a:	2b00      	cmp	r3, #0
 800308c:	d00a      	beq.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800308e:	4b43      	ldr	r3, [pc, #268]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003090:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003094:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800309c:	493f      	ldr	r1, [pc, #252]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d028      	beq.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80030b0:	4b3a      	ldr	r3, [pc, #232]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030be:	4937      	ldr	r1, [pc, #220]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030c0:	4313      	orrs	r3, r2
 80030c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030ce:	d106      	bne.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030d0:	4b32      	ldr	r3, [pc, #200]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	4a31      	ldr	r2, [pc, #196]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030da:	60d3      	str	r3, [r2, #12]
 80030dc:	e011      	b.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80030e6:	d10c      	bne.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	3304      	adds	r3, #4
 80030ec:	2101      	movs	r1, #1
 80030ee:	4618      	mov	r0, r3
 80030f0:	f000 f8c8 	bl	8003284 <RCCEx_PLLSAI1_Config>
 80030f4:	4603      	mov	r3, r0
 80030f6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80030f8:	7cfb      	ldrb	r3, [r7, #19]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 80030fe:	7cfb      	ldrb	r3, [r7, #19]
 8003100:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d028      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800310e:	4b23      	ldr	r3, [pc, #140]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003110:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003114:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800311c:	491f      	ldr	r1, [pc, #124]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800311e:	4313      	orrs	r3, r2
 8003120:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003128:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800312c:	d106      	bne.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800312e:	4b1b      	ldr	r3, [pc, #108]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	4a1a      	ldr	r2, [pc, #104]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003134:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003138:	60d3      	str	r3, [r2, #12]
 800313a:	e011      	b.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003140:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003144:	d10c      	bne.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	3304      	adds	r3, #4
 800314a:	2101      	movs	r1, #1
 800314c:	4618      	mov	r0, r3
 800314e:	f000 f899 	bl	8003284 <RCCEx_PLLSAI1_Config>
 8003152:	4603      	mov	r3, r0
 8003154:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003156:	7cfb      	ldrb	r3, [r7, #19]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d001      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 800315c:	7cfb      	ldrb	r3, [r7, #19]
 800315e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d02b      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800316c:	4b0b      	ldr	r3, [pc, #44]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800316e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003172:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800317a:	4908      	ldr	r1, [pc, #32]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800317c:	4313      	orrs	r3, r2
 800317e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003186:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800318a:	d109      	bne.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800318c:	4b03      	ldr	r3, [pc, #12]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	4a02      	ldr	r2, [pc, #8]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003192:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003196:	60d3      	str	r3, [r2, #12]
 8003198:	e014      	b.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800319a:	bf00      	nop
 800319c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80031a8:	d10c      	bne.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	3304      	adds	r3, #4
 80031ae:	2101      	movs	r1, #1
 80031b0:	4618      	mov	r0, r3
 80031b2:	f000 f867 	bl	8003284 <RCCEx_PLLSAI1_Config>
 80031b6:	4603      	mov	r3, r0
 80031b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80031ba:	7cfb      	ldrb	r3, [r7, #19]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d001      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 80031c0:	7cfb      	ldrb	r3, [r7, #19]
 80031c2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d02f      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80031d0:	4b2b      	ldr	r3, [pc, #172]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80031d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031d6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031de:	4928      	ldr	r1, [pc, #160]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80031e0:	4313      	orrs	r3, r2
 80031e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80031ee:	d10d      	bne.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	3304      	adds	r3, #4
 80031f4:	2102      	movs	r1, #2
 80031f6:	4618      	mov	r0, r3
 80031f8:	f000 f844 	bl	8003284 <RCCEx_PLLSAI1_Config>
 80031fc:	4603      	mov	r3, r0
 80031fe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003200:	7cfb      	ldrb	r3, [r7, #19]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d014      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003206:	7cfb      	ldrb	r3, [r7, #19]
 8003208:	74bb      	strb	r3, [r7, #18]
 800320a:	e011      	b.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003210:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003214:	d10c      	bne.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	3320      	adds	r3, #32
 800321a:	2102      	movs	r1, #2
 800321c:	4618      	mov	r0, r3
 800321e:	f000 f921 	bl	8003464 <RCCEx_PLLSAI2_Config>
 8003222:	4603      	mov	r3, r0
 8003224:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003226:	7cfb      	ldrb	r3, [r7, #19]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d001      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800322c:	7cfb      	ldrb	r3, [r7, #19]
 800322e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d00a      	beq.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800323c:	4b10      	ldr	r3, [pc, #64]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800323e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003242:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800324a:	490d      	ldr	r1, [pc, #52]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800324c:	4313      	orrs	r3, r2
 800324e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d00b      	beq.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800325e:	4b08      	ldr	r3, [pc, #32]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003260:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003264:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800326e:	4904      	ldr	r1, [pc, #16]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003270:	4313      	orrs	r3, r2
 8003272:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003276:	7cbb      	ldrb	r3, [r7, #18]
}
 8003278:	4618      	mov	r0, r3
 800327a:	3718      	adds	r7, #24
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}
 8003280:	40021000 	.word	0x40021000

08003284 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800328e:	2300      	movs	r3, #0
 8003290:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003292:	4b73      	ldr	r3, [pc, #460]	; (8003460 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	f003 0303 	and.w	r3, r3, #3
 800329a:	2b00      	cmp	r3, #0
 800329c:	d018      	beq.n	80032d0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800329e:	4b70      	ldr	r3, [pc, #448]	; (8003460 <RCCEx_PLLSAI1_Config+0x1dc>)
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	f003 0203 	and.w	r2, r3, #3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d10d      	bne.n	80032ca <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
       ||
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d009      	beq.n	80032ca <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80032b6:	4b6a      	ldr	r3, [pc, #424]	; (8003460 <RCCEx_PLLSAI1_Config+0x1dc>)
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	091b      	lsrs	r3, r3, #4
 80032bc:	f003 0307 	and.w	r3, r3, #7
 80032c0:	1c5a      	adds	r2, r3, #1
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
       ||
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d044      	beq.n	8003354 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	73fb      	strb	r3, [r7, #15]
 80032ce:	e041      	b.n	8003354 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d00c      	beq.n	80032f2 <RCCEx_PLLSAI1_Config+0x6e>
 80032d8:	2b03      	cmp	r3, #3
 80032da:	d013      	beq.n	8003304 <RCCEx_PLLSAI1_Config+0x80>
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d120      	bne.n	8003322 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80032e0:	4b5f      	ldr	r3, [pc, #380]	; (8003460 <RCCEx_PLLSAI1_Config+0x1dc>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0302 	and.w	r3, r3, #2
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d11d      	bne.n	8003328 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032f0:	e01a      	b.n	8003328 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80032f2:	4b5b      	ldr	r3, [pc, #364]	; (8003460 <RCCEx_PLLSAI1_Config+0x1dc>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d116      	bne.n	800332c <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003302:	e013      	b.n	800332c <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003304:	4b56      	ldr	r3, [pc, #344]	; (8003460 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d10f      	bne.n	8003330 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003310:	4b53      	ldr	r3, [pc, #332]	; (8003460 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d109      	bne.n	8003330 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003320:	e006      	b.n	8003330 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	73fb      	strb	r3, [r7, #15]
      break;
 8003326:	e004      	b.n	8003332 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003328:	bf00      	nop
 800332a:	e002      	b.n	8003332 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800332c:	bf00      	nop
 800332e:	e000      	b.n	8003332 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003330:	bf00      	nop
    }

    if(status == HAL_OK)
 8003332:	7bfb      	ldrb	r3, [r7, #15]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d10d      	bne.n	8003354 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003338:	4b49      	ldr	r3, [pc, #292]	; (8003460 <RCCEx_PLLSAI1_Config+0x1dc>)
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6819      	ldr	r1, [r3, #0]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	3b01      	subs	r3, #1
 800334a:	011b      	lsls	r3, r3, #4
 800334c:	430b      	orrs	r3, r1
 800334e:	4944      	ldr	r1, [pc, #272]	; (8003460 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003350:	4313      	orrs	r3, r2
 8003352:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003354:	7bfb      	ldrb	r3, [r7, #15]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d17d      	bne.n	8003456 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800335a:	4b41      	ldr	r3, [pc, #260]	; (8003460 <RCCEx_PLLSAI1_Config+0x1dc>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a40      	ldr	r2, [pc, #256]	; (8003460 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003360:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003364:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003366:	f7fd fbb5 	bl	8000ad4 <HAL_GetTick>
 800336a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800336c:	e009      	b.n	8003382 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800336e:	f7fd fbb1 	bl	8000ad4 <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	2b02      	cmp	r3, #2
 800337a:	d902      	bls.n	8003382 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	73fb      	strb	r3, [r7, #15]
        break;
 8003380:	e005      	b.n	800338e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003382:	4b37      	ldr	r3, [pc, #220]	; (8003460 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1ef      	bne.n	800336e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800338e:	7bfb      	ldrb	r3, [r7, #15]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d160      	bne.n	8003456 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d111      	bne.n	80033be <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800339a:	4b31      	ldr	r3, [pc, #196]	; (8003460 <RCCEx_PLLSAI1_Config+0x1dc>)
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80033a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	6892      	ldr	r2, [r2, #8]
 80033aa:	0211      	lsls	r1, r2, #8
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	68d2      	ldr	r2, [r2, #12]
 80033b0:	0912      	lsrs	r2, r2, #4
 80033b2:	0452      	lsls	r2, r2, #17
 80033b4:	430a      	orrs	r2, r1
 80033b6:	492a      	ldr	r1, [pc, #168]	; (8003460 <RCCEx_PLLSAI1_Config+0x1dc>)
 80033b8:	4313      	orrs	r3, r2
 80033ba:	610b      	str	r3, [r1, #16]
 80033bc:	e027      	b.n	800340e <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d112      	bne.n	80033ea <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80033c4:	4b26      	ldr	r3, [pc, #152]	; (8003460 <RCCEx_PLLSAI1_Config+0x1dc>)
 80033c6:	691b      	ldr	r3, [r3, #16]
 80033c8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80033cc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	6892      	ldr	r2, [r2, #8]
 80033d4:	0211      	lsls	r1, r2, #8
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	6912      	ldr	r2, [r2, #16]
 80033da:	0852      	lsrs	r2, r2, #1
 80033dc:	3a01      	subs	r2, #1
 80033de:	0552      	lsls	r2, r2, #21
 80033e0:	430a      	orrs	r2, r1
 80033e2:	491f      	ldr	r1, [pc, #124]	; (8003460 <RCCEx_PLLSAI1_Config+0x1dc>)
 80033e4:	4313      	orrs	r3, r2
 80033e6:	610b      	str	r3, [r1, #16]
 80033e8:	e011      	b.n	800340e <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80033ea:	4b1d      	ldr	r3, [pc, #116]	; (8003460 <RCCEx_PLLSAI1_Config+0x1dc>)
 80033ec:	691b      	ldr	r3, [r3, #16]
 80033ee:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80033f2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	6892      	ldr	r2, [r2, #8]
 80033fa:	0211      	lsls	r1, r2, #8
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	6952      	ldr	r2, [r2, #20]
 8003400:	0852      	lsrs	r2, r2, #1
 8003402:	3a01      	subs	r2, #1
 8003404:	0652      	lsls	r2, r2, #25
 8003406:	430a      	orrs	r2, r1
 8003408:	4915      	ldr	r1, [pc, #84]	; (8003460 <RCCEx_PLLSAI1_Config+0x1dc>)
 800340a:	4313      	orrs	r3, r2
 800340c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800340e:	4b14      	ldr	r3, [pc, #80]	; (8003460 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a13      	ldr	r2, [pc, #76]	; (8003460 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003414:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003418:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800341a:	f7fd fb5b 	bl	8000ad4 <HAL_GetTick>
 800341e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003420:	e009      	b.n	8003436 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003422:	f7fd fb57 	bl	8000ad4 <HAL_GetTick>
 8003426:	4602      	mov	r2, r0
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	2b02      	cmp	r3, #2
 800342e:	d902      	bls.n	8003436 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8003430:	2303      	movs	r3, #3
 8003432:	73fb      	strb	r3, [r7, #15]
          break;
 8003434:	e005      	b.n	8003442 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003436:	4b0a      	ldr	r3, [pc, #40]	; (8003460 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d0ef      	beq.n	8003422 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8003442:	7bfb      	ldrb	r3, [r7, #15]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d106      	bne.n	8003456 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003448:	4b05      	ldr	r3, [pc, #20]	; (8003460 <RCCEx_PLLSAI1_Config+0x1dc>)
 800344a:	691a      	ldr	r2, [r3, #16]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	699b      	ldr	r3, [r3, #24]
 8003450:	4903      	ldr	r1, [pc, #12]	; (8003460 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003452:	4313      	orrs	r3, r2
 8003454:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003456:	7bfb      	ldrb	r3, [r7, #15]
}
 8003458:	4618      	mov	r0, r3
 800345a:	3710      	adds	r7, #16
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}
 8003460:	40021000 	.word	0x40021000

08003464 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800346e:	2300      	movs	r3, #0
 8003470:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003472:	4b68      	ldr	r3, [pc, #416]	; (8003614 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	f003 0303 	and.w	r3, r3, #3
 800347a:	2b00      	cmp	r3, #0
 800347c:	d018      	beq.n	80034b0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800347e:	4b65      	ldr	r3, [pc, #404]	; (8003614 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	f003 0203 	and.w	r2, r3, #3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	429a      	cmp	r2, r3
 800348c:	d10d      	bne.n	80034aa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
       ||
 8003492:	2b00      	cmp	r3, #0
 8003494:	d009      	beq.n	80034aa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003496:	4b5f      	ldr	r3, [pc, #380]	; (8003614 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	091b      	lsrs	r3, r3, #4
 800349c:	f003 0307 	and.w	r3, r3, #7
 80034a0:	1c5a      	adds	r2, r3, #1
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
       ||
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d044      	beq.n	8003534 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	73fb      	strb	r3, [r7, #15]
 80034ae:	e041      	b.n	8003534 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d00c      	beq.n	80034d2 <RCCEx_PLLSAI2_Config+0x6e>
 80034b8:	2b03      	cmp	r3, #3
 80034ba:	d013      	beq.n	80034e4 <RCCEx_PLLSAI2_Config+0x80>
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d120      	bne.n	8003502 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80034c0:	4b54      	ldr	r3, [pc, #336]	; (8003614 <RCCEx_PLLSAI2_Config+0x1b0>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0302 	and.w	r3, r3, #2
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d11d      	bne.n	8003508 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034d0:	e01a      	b.n	8003508 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80034d2:	4b50      	ldr	r3, [pc, #320]	; (8003614 <RCCEx_PLLSAI2_Config+0x1b0>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d116      	bne.n	800350c <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034e2:	e013      	b.n	800350c <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80034e4:	4b4b      	ldr	r3, [pc, #300]	; (8003614 <RCCEx_PLLSAI2_Config+0x1b0>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d10f      	bne.n	8003510 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80034f0:	4b48      	ldr	r3, [pc, #288]	; (8003614 <RCCEx_PLLSAI2_Config+0x1b0>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d109      	bne.n	8003510 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003500:	e006      	b.n	8003510 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	73fb      	strb	r3, [r7, #15]
      break;
 8003506:	e004      	b.n	8003512 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003508:	bf00      	nop
 800350a:	e002      	b.n	8003512 <RCCEx_PLLSAI2_Config+0xae>
      break;
 800350c:	bf00      	nop
 800350e:	e000      	b.n	8003512 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003510:	bf00      	nop
    }

    if(status == HAL_OK)
 8003512:	7bfb      	ldrb	r3, [r7, #15]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d10d      	bne.n	8003534 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003518:	4b3e      	ldr	r3, [pc, #248]	; (8003614 <RCCEx_PLLSAI2_Config+0x1b0>)
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6819      	ldr	r1, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	3b01      	subs	r3, #1
 800352a:	011b      	lsls	r3, r3, #4
 800352c:	430b      	orrs	r3, r1
 800352e:	4939      	ldr	r1, [pc, #228]	; (8003614 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003530:	4313      	orrs	r3, r2
 8003532:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003534:	7bfb      	ldrb	r3, [r7, #15]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d167      	bne.n	800360a <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800353a:	4b36      	ldr	r3, [pc, #216]	; (8003614 <RCCEx_PLLSAI2_Config+0x1b0>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a35      	ldr	r2, [pc, #212]	; (8003614 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003540:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003544:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003546:	f7fd fac5 	bl	8000ad4 <HAL_GetTick>
 800354a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800354c:	e009      	b.n	8003562 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800354e:	f7fd fac1 	bl	8000ad4 <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	2b02      	cmp	r3, #2
 800355a:	d902      	bls.n	8003562 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	73fb      	strb	r3, [r7, #15]
        break;
 8003560:	e005      	b.n	800356e <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003562:	4b2c      	ldr	r3, [pc, #176]	; (8003614 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d1ef      	bne.n	800354e <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800356e:	7bfb      	ldrb	r3, [r7, #15]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d14a      	bne.n	800360a <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d111      	bne.n	800359e <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800357a:	4b26      	ldr	r3, [pc, #152]	; (8003614 <RCCEx_PLLSAI2_Config+0x1b0>)
 800357c:	695b      	ldr	r3, [r3, #20]
 800357e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003582:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	6892      	ldr	r2, [r2, #8]
 800358a:	0211      	lsls	r1, r2, #8
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	68d2      	ldr	r2, [r2, #12]
 8003590:	0912      	lsrs	r2, r2, #4
 8003592:	0452      	lsls	r2, r2, #17
 8003594:	430a      	orrs	r2, r1
 8003596:	491f      	ldr	r1, [pc, #124]	; (8003614 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003598:	4313      	orrs	r3, r2
 800359a:	614b      	str	r3, [r1, #20]
 800359c:	e011      	b.n	80035c2 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800359e:	4b1d      	ldr	r3, [pc, #116]	; (8003614 <RCCEx_PLLSAI2_Config+0x1b0>)
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80035a6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	6892      	ldr	r2, [r2, #8]
 80035ae:	0211      	lsls	r1, r2, #8
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	6912      	ldr	r2, [r2, #16]
 80035b4:	0852      	lsrs	r2, r2, #1
 80035b6:	3a01      	subs	r2, #1
 80035b8:	0652      	lsls	r2, r2, #25
 80035ba:	430a      	orrs	r2, r1
 80035bc:	4915      	ldr	r1, [pc, #84]	; (8003614 <RCCEx_PLLSAI2_Config+0x1b0>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80035c2:	4b14      	ldr	r3, [pc, #80]	; (8003614 <RCCEx_PLLSAI2_Config+0x1b0>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a13      	ldr	r2, [pc, #76]	; (8003614 <RCCEx_PLLSAI2_Config+0x1b0>)
 80035c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035cc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ce:	f7fd fa81 	bl	8000ad4 <HAL_GetTick>
 80035d2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80035d4:	e009      	b.n	80035ea <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80035d6:	f7fd fa7d 	bl	8000ad4 <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d902      	bls.n	80035ea <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	73fb      	strb	r3, [r7, #15]
          break;
 80035e8:	e005      	b.n	80035f6 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80035ea:	4b0a      	ldr	r3, [pc, #40]	; (8003614 <RCCEx_PLLSAI2_Config+0x1b0>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d0ef      	beq.n	80035d6 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 80035f6:	7bfb      	ldrb	r3, [r7, #15]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d106      	bne.n	800360a <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80035fc:	4b05      	ldr	r3, [pc, #20]	; (8003614 <RCCEx_PLLSAI2_Config+0x1b0>)
 80035fe:	695a      	ldr	r2, [r3, #20]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	695b      	ldr	r3, [r3, #20]
 8003604:	4903      	ldr	r1, [pc, #12]	; (8003614 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003606:	4313      	orrs	r3, r2
 8003608:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800360a:	7bfb      	ldrb	r3, [r7, #15]
}
 800360c:	4618      	mov	r0, r3
 800360e:	3710      	adds	r7, #16
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}
 8003614:	40021000 	.word	0x40021000

08003618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003618:	b5b0      	push	{r4, r5, r7, lr}
 800361a:	b08c      	sub	sp, #48	; 0x30
 800361c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800361e:	f7fd f9f1 	bl	8000a04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003622:	f000 f891 	bl	8003748 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_ADC1_Init();
 8003626:	f000 f917 	bl	8003858 <MX_ADC1_Init>
  MX_ADC3_Init();
 800362a:	f000 f98b 	bl	8003944 <MX_ADC3_Init>
	float VREF;
	uint16_t refVoltage;
	uint16_t tempVoltage;

	// get VREF
	HAL_ADC_Start(&hadc1);
 800362e:	4840      	ldr	r0, [pc, #256]	; (8003730 <main+0x118>)
 8003630:	f7fd fd94 	bl	800115c <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 10000) == HAL_OK) {
 8003634:	f242 7110 	movw	r1, #10000	; 0x2710
 8003638:	483d      	ldr	r0, [pc, #244]	; (8003730 <main+0x118>)
 800363a:	f7fd fe49 	bl	80012d0 <HAL_ADC_PollForConversion>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d130      	bne.n	80036a6 <main+0x8e>
		refVoltage = HAL_ADC_GetValue(&hadc1);
 8003644:	483a      	ldr	r0, [pc, #232]	; (8003730 <main+0x118>)
 8003646:	f7fd ff13 	bl	8001470 <HAL_ADC_GetValue>
 800364a:	4603      	mov	r3, r0
 800364c:	857b      	strh	r3, [r7, #42]	; 0x2a
		int32_t VREFINT_CAL = (int32_t) *((uint16_t*) (0x1FFF75AAUL));
 800364e:	4b39      	ldr	r3, [pc, #228]	; (8003734 <main+0x11c>)
 8003650:	881b      	ldrh	r3, [r3, #0]
 8003652:	627b      	str	r3, [r7, #36]	; 0x24
		VREF = 3.0 * (float) VREFINT_CAL / ((float) refVoltage);
 8003654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003656:	ee07 3a90 	vmov	s15, r3
 800365a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800365e:	ee17 0a90 	vmov	r0, s15
 8003662:	f7fc ff15 	bl	8000490 <__aeabi_f2d>
 8003666:	f04f 0200 	mov.w	r2, #0
 800366a:	4b33      	ldr	r3, [pc, #204]	; (8003738 <main+0x120>)
 800366c:	f7fc ff68 	bl	8000540 <__aeabi_dmul>
 8003670:	4603      	mov	r3, r0
 8003672:	460c      	mov	r4, r1
 8003674:	4625      	mov	r5, r4
 8003676:	461c      	mov	r4, r3
 8003678:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800367a:	ee07 3a90 	vmov	s15, r3
 800367e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003682:	ee17 0a90 	vmov	r0, s15
 8003686:	f7fc ff03 	bl	8000490 <__aeabi_f2d>
 800368a:	4602      	mov	r2, r0
 800368c:	460b      	mov	r3, r1
 800368e:	4620      	mov	r0, r4
 8003690:	4629      	mov	r1, r5
 8003692:	f7fd f87f 	bl	8000794 <__aeabi_ddiv>
 8003696:	4603      	mov	r3, r0
 8003698:	460c      	mov	r4, r1
 800369a:	4618      	mov	r0, r3
 800369c:	4621      	mov	r1, r4
 800369e:	f7fd f961 	bl	8000964 <__aeabi_d2f>
 80036a2:	4603      	mov	r3, r0
 80036a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	// get tempVoltage
	// calculate temp in Celsious based on tempVoltage and VREF and calibrated values
	HAL_ADC_Start(&hadc3);
 80036a6:	4825      	ldr	r0, [pc, #148]	; (800373c <main+0x124>)
 80036a8:	f7fd fd58 	bl	800115c <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc3, 10000) == HAL_OK) {
 80036ac:	f242 7110 	movw	r1, #10000	; 0x2710
 80036b0:	4822      	ldr	r0, [pc, #136]	; (800373c <main+0x124>)
 80036b2:	f7fd fe0d 	bl	80012d0 <HAL_ADC_PollForConversion>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1b8      	bne.n	800362e <main+0x16>
		tempVoltage = HAL_ADC_GetValue(&hadc3);
 80036bc:	481f      	ldr	r0, [pc, #124]	; (800373c <main+0x124>)
 80036be:	f7fd fed7 	bl	8001470 <HAL_ADC_GetValue>
 80036c2:	4603      	mov	r3, r0
 80036c4:	847b      	strh	r3, [r7, #34]	; 0x22

		int32_t TS_CAL2 = (int32_t) *((uint16_t*) (0x1FFF75CAUL));
 80036c6:	4b1e      	ldr	r3, [pc, #120]	; (8003740 <main+0x128>)
 80036c8:	881b      	ldrh	r3, [r3, #0]
 80036ca:	61fb      	str	r3, [r7, #28]
		int32_t TS_CAL1 = (int32_t) *((uint16_t*) (0x1FFF75A8UL));
 80036cc:	4b1d      	ldr	r3, [pc, #116]	; (8003744 <main+0x12c>)
 80036ce:	881b      	ldrh	r3, [r3, #0]
 80036d0:	61bb      	str	r3, [r7, #24]

		int32_t castedTempVoltage = (int32_t) tempVoltage;
 80036d2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80036d4:	617b      	str	r3, [r7, #20]
		int32_t diff = castedTempVoltage - TS_CAL1;
 80036d6:	697a      	ldr	r2, [r7, #20]
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	613b      	str	r3, [r7, #16]
		int32_t numerator = 110 - 30;
 80036de:	2350      	movs	r3, #80	; 0x50
 80036e0:	60fb      	str	r3, [r7, #12]
		int32_t denominator = TS_CAL2 - TS_CAL1;
 80036e2:	69fa      	ldr	r2, [r7, #28]
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	60bb      	str	r3, [r7, #8]

		// in here, we are also scaling the TS_CAL2/1 according to VREF
		float scalar = ((float) numerator) / (VREF * ((float) denominator));
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	ee07 3a90 	vmov	s15, r3
 80036f0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	ee07 3a90 	vmov	s15, r3
 80036fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80036fe:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003702:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003706:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800370a:	edc7 7a01 	vstr	s15, [r7, #4]

		// tempCelsius = ((TS_CAL2_TEMP - TS_CAL1_TEMP) / (TS_CAL2 - TS_CAL1)) * (TS_DATA - TS_CAL1) + 30
		tempCelsius = scalar * (diff) + 30;
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	ee07 3a90 	vmov	s15, r3
 8003714:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003718:	edd7 7a01 	vldr	s15, [r7, #4]
 800371c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003720:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8003724:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003728:	edc7 7a00 	vstr	s15, [r7]
  {
 800372c:	e77f      	b.n	800362e <main+0x16>
 800372e:	bf00      	nop
 8003730:	20000030 	.word	0x20000030
 8003734:	1fff75aa 	.word	0x1fff75aa
 8003738:	40080000 	.word	0x40080000
 800373c:	20000094 	.word	0x20000094
 8003740:	1fff75ca 	.word	0x1fff75ca
 8003744:	1fff75a8 	.word	0x1fff75a8

08003748 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b0b8      	sub	sp, #224	; 0xe0
 800374c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800374e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003752:	2244      	movs	r2, #68	; 0x44
 8003754:	2100      	movs	r1, #0
 8003756:	4618      	mov	r0, r3
 8003758:	f000 fa7e 	bl	8003c58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800375c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003760:	2200      	movs	r2, #0
 8003762:	601a      	str	r2, [r3, #0]
 8003764:	605a      	str	r2, [r3, #4]
 8003766:	609a      	str	r2, [r3, #8]
 8003768:	60da      	str	r2, [r3, #12]
 800376a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800376c:	463b      	mov	r3, r7
 800376e:	2288      	movs	r2, #136	; 0x88
 8003770:	2100      	movs	r1, #0
 8003772:	4618      	mov	r0, r3
 8003774:	f000 fa70 	bl	8003c58 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8003778:	2310      	movs	r3, #16
 800377a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800377e:	2301      	movs	r3, #1
 8003780:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8003784:	2300      	movs	r3, #0
 8003786:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800378a:	2360      	movs	r3, #96	; 0x60
 800378c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003790:	2302      	movs	r3, #2
 8003792:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8003796:	2301      	movs	r3, #1
 8003798:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800379c:	2301      	movs	r3, #1
 800379e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 80037a2:	2328      	movs	r3, #40	; 0x28
 80037a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80037a8:	2307      	movs	r3, #7
 80037aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80037ae:	2302      	movs	r3, #2
 80037b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80037b4:	2302      	movs	r3, #2
 80037b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80037ba:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80037be:	4618      	mov	r0, r3
 80037c0:	f7fe fcc8 	bl	8002154 <HAL_RCC_OscConfig>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d001      	beq.n	80037ce <SystemClock_Config+0x86>
  {
    Error_Handler();
 80037ca:	f000 f91f 	bl	8003a0c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80037ce:	230f      	movs	r3, #15
 80037d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80037d4:	2303      	movs	r3, #3
 80037d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80037da:	2300      	movs	r3, #0
 80037dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80037e0:	2300      	movs	r3, #0
 80037e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80037e6:	2300      	movs	r3, #0
 80037e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80037ec:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80037f0:	2104      	movs	r1, #4
 80037f2:	4618      	mov	r0, r3
 80037f4:	f7ff f894 	bl	8002920 <HAL_RCC_ClockConfig>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d001      	beq.n	8003802 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80037fe:	f000 f905 	bl	8003a0c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003802:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003806:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8003808:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800380c:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800380e:	2301      	movs	r3, #1
 8003810:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8003812:	2301      	movs	r3, #1
 8003814:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8003816:	2318      	movs	r3, #24
 8003818:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800381a:	2307      	movs	r3, #7
 800381c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800381e:	2302      	movs	r3, #2
 8003820:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8003822:	2302      	movs	r3, #2
 8003824:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8003826:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800382a:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800382c:	463b      	mov	r3, r7
 800382e:	4618      	mov	r0, r3
 8003830:	f7ff fa42 	bl	8002cb8 <HAL_RCCEx_PeriphCLKConfig>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d001      	beq.n	800383e <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800383a:	f000 f8e7 	bl	8003a0c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800383e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003842:	f7fe fc31 	bl	80020a8 <HAL_PWREx_ControlVoltageScaling>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d001      	beq.n	8003850 <SystemClock_Config+0x108>
  {
    Error_Handler();
 800384c:	f000 f8de 	bl	8003a0c <Error_Handler>
  }
}
 8003850:	bf00      	nop
 8003852:	37e0      	adds	r7, #224	; 0xe0
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b08a      	sub	sp, #40	; 0x28
 800385c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800385e:	f107 031c 	add.w	r3, r7, #28
 8003862:	2200      	movs	r2, #0
 8003864:	601a      	str	r2, [r3, #0]
 8003866:	605a      	str	r2, [r3, #4]
 8003868:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800386a:	1d3b      	adds	r3, r7, #4
 800386c:	2200      	movs	r2, #0
 800386e:	601a      	str	r2, [r3, #0]
 8003870:	605a      	str	r2, [r3, #4]
 8003872:	609a      	str	r2, [r3, #8]
 8003874:	60da      	str	r2, [r3, #12]
 8003876:	611a      	str	r2, [r3, #16]
 8003878:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800387a:	4b2f      	ldr	r3, [pc, #188]	; (8003938 <MX_ADC1_Init+0xe0>)
 800387c:	4a2f      	ldr	r2, [pc, #188]	; (800393c <MX_ADC1_Init+0xe4>)
 800387e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003880:	4b2d      	ldr	r3, [pc, #180]	; (8003938 <MX_ADC1_Init+0xe0>)
 8003882:	2200      	movs	r2, #0
 8003884:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003886:	4b2c      	ldr	r3, [pc, #176]	; (8003938 <MX_ADC1_Init+0xe0>)
 8003888:	2200      	movs	r2, #0
 800388a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800388c:	4b2a      	ldr	r3, [pc, #168]	; (8003938 <MX_ADC1_Init+0xe0>)
 800388e:	2200      	movs	r2, #0
 8003890:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003892:	4b29      	ldr	r3, [pc, #164]	; (8003938 <MX_ADC1_Init+0xe0>)
 8003894:	2200      	movs	r2, #0
 8003896:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003898:	4b27      	ldr	r3, [pc, #156]	; (8003938 <MX_ADC1_Init+0xe0>)
 800389a:	2204      	movs	r2, #4
 800389c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800389e:	4b26      	ldr	r3, [pc, #152]	; (8003938 <MX_ADC1_Init+0xe0>)
 80038a0:	2200      	movs	r2, #0
 80038a2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80038a4:	4b24      	ldr	r3, [pc, #144]	; (8003938 <MX_ADC1_Init+0xe0>)
 80038a6:	2200      	movs	r2, #0
 80038a8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80038aa:	4b23      	ldr	r3, [pc, #140]	; (8003938 <MX_ADC1_Init+0xe0>)
 80038ac:	2201      	movs	r2, #1
 80038ae:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80038b0:	4b21      	ldr	r3, [pc, #132]	; (8003938 <MX_ADC1_Init+0xe0>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80038b8:	4b1f      	ldr	r3, [pc, #124]	; (8003938 <MX_ADC1_Init+0xe0>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80038be:	4b1e      	ldr	r3, [pc, #120]	; (8003938 <MX_ADC1_Init+0xe0>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80038c4:	4b1c      	ldr	r3, [pc, #112]	; (8003938 <MX_ADC1_Init+0xe0>)
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80038cc:	4b1a      	ldr	r3, [pc, #104]	; (8003938 <MX_ADC1_Init+0xe0>)
 80038ce:	2200      	movs	r2, #0
 80038d0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80038d2:	4b19      	ldr	r3, [pc, #100]	; (8003938 <MX_ADC1_Init+0xe0>)
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80038da:	4817      	ldr	r0, [pc, #92]	; (8003938 <MX_ADC1_Init+0xe0>)
 80038dc:	f7fd faea 	bl	8000eb4 <HAL_ADC_Init>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d001      	beq.n	80038ea <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80038e6:	f000 f891 	bl	8003a0c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80038ea:	2300      	movs	r3, #0
 80038ec:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80038ee:	f107 031c 	add.w	r3, r7, #28
 80038f2:	4619      	mov	r1, r3
 80038f4:	4810      	ldr	r0, [pc, #64]	; (8003938 <MX_ADC1_Init+0xe0>)
 80038f6:	f7fe fa37 	bl	8001d68 <HAL_ADCEx_MultiModeConfigChannel>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d001      	beq.n	8003904 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8003900:	f000 f884 	bl	8003a0c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8003904:	4b0e      	ldr	r3, [pc, #56]	; (8003940 <MX_ADC1_Init+0xe8>)
 8003906:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003908:	2306      	movs	r3, #6
 800390a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800390c:	2307      	movs	r3, #7
 800390e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003910:	237f      	movs	r3, #127	; 0x7f
 8003912:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003914:	2304      	movs	r3, #4
 8003916:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8003918:	2300      	movs	r3, #0
 800391a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800391c:	1d3b      	adds	r3, r7, #4
 800391e:	4619      	mov	r1, r3
 8003920:	4805      	ldr	r0, [pc, #20]	; (8003938 <MX_ADC1_Init+0xe0>)
 8003922:	f7fd fdb3 	bl	800148c <HAL_ADC_ConfigChannel>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d001      	beq.n	8003930 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 800392c:	f000 f86e 	bl	8003a0c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003930:	bf00      	nop
 8003932:	3728      	adds	r7, #40	; 0x28
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	20000030 	.word	0x20000030
 800393c:	50040000 	.word	0x50040000
 8003940:	80000001 	.word	0x80000001

08003944 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b086      	sub	sp, #24
 8003948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800394a:	463b      	mov	r3, r7
 800394c:	2200      	movs	r2, #0
 800394e:	601a      	str	r2, [r3, #0]
 8003950:	605a      	str	r2, [r3, #4]
 8003952:	609a      	str	r2, [r3, #8]
 8003954:	60da      	str	r2, [r3, #12]
 8003956:	611a      	str	r2, [r3, #16]
 8003958:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 800395a:	4b29      	ldr	r3, [pc, #164]	; (8003a00 <MX_ADC3_Init+0xbc>)
 800395c:	4a29      	ldr	r2, [pc, #164]	; (8003a04 <MX_ADC3_Init+0xc0>)
 800395e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003960:	4b27      	ldr	r3, [pc, #156]	; (8003a00 <MX_ADC3_Init+0xbc>)
 8003962:	2200      	movs	r2, #0
 8003964:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8003966:	4b26      	ldr	r3, [pc, #152]	; (8003a00 <MX_ADC3_Init+0xbc>)
 8003968:	2200      	movs	r2, #0
 800396a:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800396c:	4b24      	ldr	r3, [pc, #144]	; (8003a00 <MX_ADC3_Init+0xbc>)
 800396e:	2200      	movs	r2, #0
 8003970:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003972:	4b23      	ldr	r3, [pc, #140]	; (8003a00 <MX_ADC3_Init+0xbc>)
 8003974:	2200      	movs	r2, #0
 8003976:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003978:	4b21      	ldr	r3, [pc, #132]	; (8003a00 <MX_ADC3_Init+0xbc>)
 800397a:	2204      	movs	r2, #4
 800397c:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800397e:	4b20      	ldr	r3, [pc, #128]	; (8003a00 <MX_ADC3_Init+0xbc>)
 8003980:	2200      	movs	r2, #0
 8003982:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8003984:	4b1e      	ldr	r3, [pc, #120]	; (8003a00 <MX_ADC3_Init+0xbc>)
 8003986:	2200      	movs	r2, #0
 8003988:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 800398a:	4b1d      	ldr	r3, [pc, #116]	; (8003a00 <MX_ADC3_Init+0xbc>)
 800398c:	2201      	movs	r2, #1
 800398e:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8003990:	4b1b      	ldr	r3, [pc, #108]	; (8003a00 <MX_ADC3_Init+0xbc>)
 8003992:	2200      	movs	r2, #0
 8003994:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003998:	4b19      	ldr	r3, [pc, #100]	; (8003a00 <MX_ADC3_Init+0xbc>)
 800399a:	2200      	movs	r2, #0
 800399c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800399e:	4b18      	ldr	r3, [pc, #96]	; (8003a00 <MX_ADC3_Init+0xbc>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80039a4:	4b16      	ldr	r3, [pc, #88]	; (8003a00 <MX_ADC3_Init+0xbc>)
 80039a6:	2200      	movs	r2, #0
 80039a8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80039ac:	4b14      	ldr	r3, [pc, #80]	; (8003a00 <MX_ADC3_Init+0xbc>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80039b2:	4b13      	ldr	r3, [pc, #76]	; (8003a00 <MX_ADC3_Init+0xbc>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80039ba:	4811      	ldr	r0, [pc, #68]	; (8003a00 <MX_ADC3_Init+0xbc>)
 80039bc:	f7fd fa7a 	bl	8000eb4 <HAL_ADC_Init>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d001      	beq.n	80039ca <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 80039c6:	f000 f821 	bl	8003a0c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80039ca:	4b0f      	ldr	r3, [pc, #60]	; (8003a08 <MX_ADC3_Init+0xc4>)
 80039cc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80039ce:	2306      	movs	r3, #6
 80039d0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80039d2:	2307      	movs	r3, #7
 80039d4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80039d6:	237f      	movs	r3, #127	; 0x7f
 80039d8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80039da:	2304      	movs	r3, #4
 80039dc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80039de:	2300      	movs	r3, #0
 80039e0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80039e2:	463b      	mov	r3, r7
 80039e4:	4619      	mov	r1, r3
 80039e6:	4806      	ldr	r0, [pc, #24]	; (8003a00 <MX_ADC3_Init+0xbc>)
 80039e8:	f7fd fd50 	bl	800148c <HAL_ADC_ConfigChannel>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d001      	beq.n	80039f6 <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 80039f2:	f000 f80b 	bl	8003a0c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80039f6:	bf00      	nop
 80039f8:	3718      	adds	r7, #24
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	20000094 	.word	0x20000094
 8003a04:	50040200 	.word	0x50040200
 8003a08:	c7520000 	.word	0xc7520000

08003a0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003a10:	bf00      	nop
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
	...

08003a1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a22:	4b0f      	ldr	r3, [pc, #60]	; (8003a60 <HAL_MspInit+0x44>)
 8003a24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a26:	4a0e      	ldr	r2, [pc, #56]	; (8003a60 <HAL_MspInit+0x44>)
 8003a28:	f043 0301 	orr.w	r3, r3, #1
 8003a2c:	6613      	str	r3, [r2, #96]	; 0x60
 8003a2e:	4b0c      	ldr	r3, [pc, #48]	; (8003a60 <HAL_MspInit+0x44>)
 8003a30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a32:	f003 0301 	and.w	r3, r3, #1
 8003a36:	607b      	str	r3, [r7, #4]
 8003a38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a3a:	4b09      	ldr	r3, [pc, #36]	; (8003a60 <HAL_MspInit+0x44>)
 8003a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a3e:	4a08      	ldr	r2, [pc, #32]	; (8003a60 <HAL_MspInit+0x44>)
 8003a40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a44:	6593      	str	r3, [r2, #88]	; 0x58
 8003a46:	4b06      	ldr	r3, [pc, #24]	; (8003a60 <HAL_MspInit+0x44>)
 8003a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a4e:	603b      	str	r3, [r7, #0]
 8003a50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a52:	bf00      	nop
 8003a54:	370c      	adds	r7, #12
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop
 8003a60:	40021000 	.word	0x40021000

08003a64 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b085      	sub	sp, #20
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a1c      	ldr	r2, [pc, #112]	; (8003ae4 <HAL_ADC_MspInit+0x80>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d115      	bne.n	8003aa2 <HAL_ADC_MspInit+0x3e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8003a76:	4b1c      	ldr	r3, [pc, #112]	; (8003ae8 <HAL_ADC_MspInit+0x84>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	3301      	adds	r3, #1
 8003a7c:	4a1a      	ldr	r2, [pc, #104]	; (8003ae8 <HAL_ADC_MspInit+0x84>)
 8003a7e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8003a80:	4b19      	ldr	r3, [pc, #100]	; (8003ae8 <HAL_ADC_MspInit+0x84>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d126      	bne.n	8003ad6 <HAL_ADC_MspInit+0x72>
      __HAL_RCC_ADC_CLK_ENABLE();
 8003a88:	4b18      	ldr	r3, [pc, #96]	; (8003aec <HAL_ADC_MspInit+0x88>)
 8003a8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a8c:	4a17      	ldr	r2, [pc, #92]	; (8003aec <HAL_ADC_MspInit+0x88>)
 8003a8e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003a92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a94:	4b15      	ldr	r3, [pc, #84]	; (8003aec <HAL_ADC_MspInit+0x88>)
 8003a96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a9c:	60fb      	str	r3, [r7, #12]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8003aa0:	e019      	b.n	8003ad6 <HAL_ADC_MspInit+0x72>
  else if(hadc->Instance==ADC3)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a12      	ldr	r2, [pc, #72]	; (8003af0 <HAL_ADC_MspInit+0x8c>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d114      	bne.n	8003ad6 <HAL_ADC_MspInit+0x72>
    HAL_RCC_ADC_CLK_ENABLED++;
 8003aac:	4b0e      	ldr	r3, [pc, #56]	; (8003ae8 <HAL_ADC_MspInit+0x84>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	4a0d      	ldr	r2, [pc, #52]	; (8003ae8 <HAL_ADC_MspInit+0x84>)
 8003ab4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8003ab6:	4b0c      	ldr	r3, [pc, #48]	; (8003ae8 <HAL_ADC_MspInit+0x84>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d10b      	bne.n	8003ad6 <HAL_ADC_MspInit+0x72>
      __HAL_RCC_ADC_CLK_ENABLE();
 8003abe:	4b0b      	ldr	r3, [pc, #44]	; (8003aec <HAL_ADC_MspInit+0x88>)
 8003ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ac2:	4a0a      	ldr	r2, [pc, #40]	; (8003aec <HAL_ADC_MspInit+0x88>)
 8003ac4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003ac8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003aca:	4b08      	ldr	r3, [pc, #32]	; (8003aec <HAL_ADC_MspInit+0x88>)
 8003acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ace:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ad2:	60bb      	str	r3, [r7, #8]
 8003ad4:	68bb      	ldr	r3, [r7, #8]
}
 8003ad6:	bf00      	nop
 8003ad8:	3714      	adds	r7, #20
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	50040000 	.word	0x50040000
 8003ae8:	20000028 	.word	0x20000028
 8003aec:	40021000 	.word	0x40021000
 8003af0:	50040200 	.word	0x50040200

08003af4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003af4:	b480      	push	{r7}
 8003af6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003af8:	bf00      	nop
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr

08003b02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b02:	b480      	push	{r7}
 8003b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b06:	e7fe      	b.n	8003b06 <HardFault_Handler+0x4>

08003b08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b0c:	e7fe      	b.n	8003b0c <MemManage_Handler+0x4>

08003b0e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b0e:	b480      	push	{r7}
 8003b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b12:	e7fe      	b.n	8003b12 <BusFault_Handler+0x4>

08003b14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b14:	b480      	push	{r7}
 8003b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b18:	e7fe      	b.n	8003b18 <UsageFault_Handler+0x4>

08003b1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b1a:	b480      	push	{r7}
 8003b1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b1e:	bf00      	nop
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr

08003b28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b2c:	bf00      	nop
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr

08003b36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b36:	b480      	push	{r7}
 8003b38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b3a:	bf00      	nop
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b48:	f7fc ffb0 	bl	8000aac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b4c:	bf00      	nop
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003b50:	b480      	push	{r7}
 8003b52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003b54:	4b17      	ldr	r3, [pc, #92]	; (8003bb4 <SystemInit+0x64>)
 8003b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b5a:	4a16      	ldr	r2, [pc, #88]	; (8003bb4 <SystemInit+0x64>)
 8003b5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003b64:	4b14      	ldr	r3, [pc, #80]	; (8003bb8 <SystemInit+0x68>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a13      	ldr	r2, [pc, #76]	; (8003bb8 <SystemInit+0x68>)
 8003b6a:	f043 0301 	orr.w	r3, r3, #1
 8003b6e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8003b70:	4b11      	ldr	r3, [pc, #68]	; (8003bb8 <SystemInit+0x68>)
 8003b72:	2200      	movs	r2, #0
 8003b74:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8003b76:	4b10      	ldr	r3, [pc, #64]	; (8003bb8 <SystemInit+0x68>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a0f      	ldr	r2, [pc, #60]	; (8003bb8 <SystemInit+0x68>)
 8003b7c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8003b80:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8003b84:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8003b86:	4b0c      	ldr	r3, [pc, #48]	; (8003bb8 <SystemInit+0x68>)
 8003b88:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003b8c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003b8e:	4b0a      	ldr	r3, [pc, #40]	; (8003bb8 <SystemInit+0x68>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a09      	ldr	r2, [pc, #36]	; (8003bb8 <SystemInit+0x68>)
 8003b94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b98:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003b9a:	4b07      	ldr	r3, [pc, #28]	; (8003bb8 <SystemInit+0x68>)
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003ba0:	4b04      	ldr	r3, [pc, #16]	; (8003bb4 <SystemInit+0x64>)
 8003ba2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003ba6:	609a      	str	r2, [r3, #8]
#endif
}
 8003ba8:	bf00      	nop
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	e000ed00 	.word	0xe000ed00
 8003bb8:	40021000 	.word	0x40021000

08003bbc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003bbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003bf4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003bc0:	f7ff ffc6 	bl	8003b50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003bc4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003bc6:	e003      	b.n	8003bd0 <LoopCopyDataInit>

08003bc8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003bc8:	4b0b      	ldr	r3, [pc, #44]	; (8003bf8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003bca:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003bcc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003bce:	3104      	adds	r1, #4

08003bd0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003bd0:	480a      	ldr	r0, [pc, #40]	; (8003bfc <LoopForever+0xa>)
	ldr	r3, =_edata
 8003bd2:	4b0b      	ldr	r3, [pc, #44]	; (8003c00 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003bd4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003bd6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003bd8:	d3f6      	bcc.n	8003bc8 <CopyDataInit>
	ldr	r2, =_sbss
 8003bda:	4a0a      	ldr	r2, [pc, #40]	; (8003c04 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003bdc:	e002      	b.n	8003be4 <LoopFillZerobss>

08003bde <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003bde:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003be0:	f842 3b04 	str.w	r3, [r2], #4

08003be4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003be4:	4b08      	ldr	r3, [pc, #32]	; (8003c08 <LoopForever+0x16>)
	cmp	r2, r3
 8003be6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003be8:	d3f9      	bcc.n	8003bde <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003bea:	f000 f811 	bl	8003c10 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003bee:	f7ff fd13 	bl	8003618 <main>

08003bf2 <LoopForever>:

LoopForever:
    b LoopForever
 8003bf2:	e7fe      	b.n	8003bf2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003bf4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8003bf8:	08003cc8 	.word	0x08003cc8
	ldr	r0, =_sdata
 8003bfc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003c00:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8003c04:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8003c08:	200000f8 	.word	0x200000f8

08003c0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003c0c:	e7fe      	b.n	8003c0c <ADC1_2_IRQHandler>
	...

08003c10 <__libc_init_array>:
 8003c10:	b570      	push	{r4, r5, r6, lr}
 8003c12:	4e0d      	ldr	r6, [pc, #52]	; (8003c48 <__libc_init_array+0x38>)
 8003c14:	4c0d      	ldr	r4, [pc, #52]	; (8003c4c <__libc_init_array+0x3c>)
 8003c16:	1ba4      	subs	r4, r4, r6
 8003c18:	10a4      	asrs	r4, r4, #2
 8003c1a:	2500      	movs	r5, #0
 8003c1c:	42a5      	cmp	r5, r4
 8003c1e:	d109      	bne.n	8003c34 <__libc_init_array+0x24>
 8003c20:	4e0b      	ldr	r6, [pc, #44]	; (8003c50 <__libc_init_array+0x40>)
 8003c22:	4c0c      	ldr	r4, [pc, #48]	; (8003c54 <__libc_init_array+0x44>)
 8003c24:	f000 f820 	bl	8003c68 <_init>
 8003c28:	1ba4      	subs	r4, r4, r6
 8003c2a:	10a4      	asrs	r4, r4, #2
 8003c2c:	2500      	movs	r5, #0
 8003c2e:	42a5      	cmp	r5, r4
 8003c30:	d105      	bne.n	8003c3e <__libc_init_array+0x2e>
 8003c32:	bd70      	pop	{r4, r5, r6, pc}
 8003c34:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c38:	4798      	blx	r3
 8003c3a:	3501      	adds	r5, #1
 8003c3c:	e7ee      	b.n	8003c1c <__libc_init_array+0xc>
 8003c3e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c42:	4798      	blx	r3
 8003c44:	3501      	adds	r5, #1
 8003c46:	e7f2      	b.n	8003c2e <__libc_init_array+0x1e>
 8003c48:	08003cc0 	.word	0x08003cc0
 8003c4c:	08003cc0 	.word	0x08003cc0
 8003c50:	08003cc0 	.word	0x08003cc0
 8003c54:	08003cc4 	.word	0x08003cc4

08003c58 <memset>:
 8003c58:	4402      	add	r2, r0
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d100      	bne.n	8003c62 <memset+0xa>
 8003c60:	4770      	bx	lr
 8003c62:	f803 1b01 	strb.w	r1, [r3], #1
 8003c66:	e7f9      	b.n	8003c5c <memset+0x4>

08003c68 <_init>:
 8003c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c6a:	bf00      	nop
 8003c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c6e:	bc08      	pop	{r3}
 8003c70:	469e      	mov	lr, r3
 8003c72:	4770      	bx	lr

08003c74 <_fini>:
 8003c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c76:	bf00      	nop
 8003c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c7a:	bc08      	pop	{r3}
 8003c7c:	469e      	mov	lr, r3
 8003c7e:	4770      	bx	lr
